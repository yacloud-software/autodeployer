// Code generated by protoc-gen-go.
// source: users.singingcat.net/USERID/REPOSITORYNAME/REPOSITORYNAME.proto
// DO NOT EDIT!

/*
Package scuserapp is a generated protocol buffer package.

It is generated from these files:
	users.singingcat.net/USERID/REPOSITORYNAME/REPOSITORYNAME.proto

It has these top-level messages:
	Foo
*/
package scuserapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "golang.conradwood.net/apis/common"
import _ "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// a single prober
type Foo struct {
	Bar string `protobuf:"bytes,1,opt,name=Bar" json:"Bar,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (m *Foo) String() string            { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Foo) GetBar() string {
	if m != nil {
		return m.Bar
	}
	return ""
}

func init() {
	proto.RegisterType((*Foo)(nil), "scuserapp.Foo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCUserAppService service

type SCUserAppServiceClient interface {
	FooRPC(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error)
}

type sCUserAppServiceClient struct {
	cc *grpc.ClientConn
}

func NewSCUserAppServiceClient(cc *grpc.ClientConn) SCUserAppServiceClient {
	return &sCUserAppServiceClient{cc}
}

func (c *sCUserAppServiceClient) FooRPC(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error) {
	out := new(Foo)
	err := grpc.Invoke(ctx, "/scuserapp.SCUserAppService/FooRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCUserAppService service

type SCUserAppServiceServer interface {
	FooRPC(context.Context, *Foo) (*Foo, error)
}

func RegisterSCUserAppServiceServer(s *grpc.Server, srv SCUserAppServiceServer) {
	s.RegisterService(&_SCUserAppService_serviceDesc, srv)
}

func _SCUserAppService_FooRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCUserAppServiceServer).FooRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scuserapp.SCUserAppService/FooRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCUserAppServiceServer).FooRPC(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCUserAppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scuserapp.SCUserAppService",
	HandlerType: (*SCUserAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FooRPC",
			Handler:    _SCUserAppService_FooRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.singingcat.net/USERID/REPOSITORYNAME/REPOSITORYNAME.proto",
}

func init() {
	proto.RegisterFile("users.singingcat.net/USERID/REPOSITORYNAME/REPOSITORYNAME.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x2f, 0x2d, 0x4e, 0x2d,
	0x2a, 0xd6, 0x2b, 0xce, 0xcc, 0x4b, 0xcf, 0xcc, 0x4b, 0x4f, 0x4e, 0x2c, 0xd1, 0xcb, 0x4b, 0x2d,
	0xd1, 0x0f, 0x0d, 0x76, 0x0d, 0xf2, 0x74, 0xd1, 0x0f, 0x72, 0x0d, 0xf0, 0x0f, 0xf6, 0x0c, 0xf1,
	0x0f, 0x8a, 0xf4, 0x73, 0xf4, 0x75, 0x45, 0xe3, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71,
	0x16, 0x27, 0x83, 0x8c, 0x48, 0x2c, 0x28, 0x90, 0xd2, 0x4b, 0xcf, 0xcf, 0x49, 0xcc, 0x4b, 0xd7,
	0x4b, 0xce, 0xcf, 0x2b, 0x4a, 0x4c, 0x29, 0xcf, 0xcf, 0x4f, 0x01, 0x1b, 0x96, 0x58, 0x90, 0x59,
	0xac, 0x9f, 0x9c, 0x9f, 0x9b, 0x9b, 0x9f, 0x07, 0xa5, 0x20, 0x5a, 0xa5, 0x8c, 0xf0, 0xa8, 0xcf,
	0x30, 0x4a, 0x2f, 0x28, 0xca, 0xaf, 0xa8, 0x84, 0x33, 0x20, 0x7a, 0x94, 0xc4, 0xb9, 0x98, 0xdd,
	0xf2, 0xf3, 0x85, 0x04, 0xb8, 0x98, 0x9d, 0x12, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0x40, 0x4c, 0x23, 0x1b, 0x2e, 0x81, 0x60, 0xe7, 0xd0, 0xe2, 0xd4, 0x22, 0xc7, 0x82, 0x82, 0xe0,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x0d, 0x2e, 0x36, 0xb7, 0xfc, 0xfc, 0xa0, 0x00, 0x67,
	0x21, 0x3e, 0x3d, 0xb8, 0x33, 0xf5, 0xdc, 0xf2, 0xf3, 0xa5, 0xd0, 0xf8, 0x4e, 0x4a, 0x5c, 0x0a,
	0x79, 0xa9, 0x25, 0xc8, 0xc1, 0x00, 0x09, 0x17, 0x73, 0x84, 0xba, 0x24, 0x36, 0xb0, 0x0b, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59, 0x62, 0x22, 0xb9, 0x33, 0x01, 0x00, 0x00,
}
