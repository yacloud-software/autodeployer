// Code generated by protoc-gen-go.
// source: golang.yacloud.eu/apis/lockmanager/lockmanager.proto
// DO NOT EDIT!

/*
Package lockmanager is a generated protocol buffer package.

It is generated from these files:
	golang.yacloud.eu/apis/lockmanager/lockmanager.proto

It has these top-level messages:
	PingResponse
	LockServiceWithTimeoutRequest
	LockResult
	LockReference
	LockName
	UnlockResult
*/
package lockmanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type LockServiceWithTimeoutRequest struct {
	LockName     string `protobuf:"bytes,1,opt,name=LockName" json:"LockName,omitempty"`
	LockDuration uint32 `protobuf:"varint,2,opt,name=LockDuration" json:"LockDuration,omitempty"`
	TimeoutMS    uint32 `protobuf:"varint,3,opt,name=TimeoutMS" json:"TimeoutMS,omitempty"`
}

func (m *LockServiceWithTimeoutRequest) Reset()                    { *m = LockServiceWithTimeoutRequest{} }
func (m *LockServiceWithTimeoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LockServiceWithTimeoutRequest) ProtoMessage()               {}
func (*LockServiceWithTimeoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LockServiceWithTimeoutRequest) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

func (m *LockServiceWithTimeoutRequest) GetLockDuration() uint32 {
	if m != nil {
		return m.LockDuration
	}
	return 0
}

func (m *LockServiceWithTimeoutRequest) GetTimeoutMS() uint32 {
	if m != nil {
		return m.TimeoutMS
	}
	return 0
}

type LockResult struct {
	Locked        bool           `protobuf:"varint,1,opt,name=Locked" json:"Locked,omitempty"`
	LockReference *LockReference `protobuf:"bytes,2,opt,name=LockReference" json:"LockReference,omitempty"`
}

func (m *LockResult) Reset()                    { *m = LockResult{} }
func (m *LockResult) String() string            { return proto.CompactTextString(m) }
func (*LockResult) ProtoMessage()               {}
func (*LockResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LockResult) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *LockResult) GetLockReference() *LockReference {
	if m != nil {
		return m.LockReference
	}
	return nil
}

type LockReference struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *LockReference) Reset()                    { *m = LockReference{} }
func (m *LockReference) String() string            { return proto.CompactTextString(m) }
func (*LockReference) ProtoMessage()               {}
func (*LockReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LockReference) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type LockName struct {
	LockName string `protobuf:"bytes,1,opt,name=LockName" json:"LockName,omitempty"`
}

func (m *LockName) Reset()                    { *m = LockName{} }
func (m *LockName) String() string            { return proto.CompactTextString(m) }
func (*LockName) ProtoMessage()               {}
func (*LockName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LockName) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

type UnlockResult struct {
	Unlocked bool `protobuf:"varint,1,opt,name=Unlocked" json:"Unlocked,omitempty"`
}

func (m *UnlockResult) Reset()                    { *m = UnlockResult{} }
func (m *UnlockResult) String() string            { return proto.CompactTextString(m) }
func (*UnlockResult) ProtoMessage()               {}
func (*UnlockResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UnlockResult) GetUnlocked() bool {
	if m != nil {
		return m.Unlocked
	}
	return false
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "lockmanager.PingResponse")
	proto.RegisterType((*LockServiceWithTimeoutRequest)(nil), "lockmanager.LockServiceWithTimeoutRequest")
	proto.RegisterType((*LockResult)(nil), "lockmanager.LockResult")
	proto.RegisterType((*LockReference)(nil), "lockmanager.LockReference")
	proto.RegisterType((*LockName)(nil), "lockmanager.LockName")
	proto.RegisterType((*UnlockResult)(nil), "lockmanager.UnlockResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LockManager service

type LockManagerClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// acquire a lock specific to the calling service
	LockServiceWithTimeout(ctx context.Context, in *LockServiceWithTimeoutRequest, opts ...grpc.CallOption) (*LockResult, error)
	// unlock
	Unlock(ctx context.Context, in *LockReference, opts ...grpc.CallOption) (*UnlockResult, error)
}

type lockManagerClient struct {
	cc *grpc.ClientConn
}

func NewLockManagerClient(cc *grpc.ClientConn) LockManagerClient {
	return &lockManagerClient{cc}
}

func (c *lockManagerClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/lockmanager.LockManager/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockManagerClient) LockServiceWithTimeout(ctx context.Context, in *LockServiceWithTimeoutRequest, opts ...grpc.CallOption) (*LockResult, error) {
	out := new(LockResult)
	err := grpc.Invoke(ctx, "/lockmanager.LockManager/LockServiceWithTimeout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockManagerClient) Unlock(ctx context.Context, in *LockReference, opts ...grpc.CallOption) (*UnlockResult, error) {
	out := new(UnlockResult)
	err := grpc.Invoke(ctx, "/lockmanager.LockManager/Unlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LockManager service

type LockManagerServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// acquire a lock specific to the calling service
	LockServiceWithTimeout(context.Context, *LockServiceWithTimeoutRequest) (*LockResult, error)
	// unlock
	Unlock(context.Context, *LockReference) (*UnlockResult, error)
}

func RegisterLockManagerServer(s *grpc.Server, srv LockManagerServer) {
	s.RegisterService(&_LockManager_serviceDesc, srv)
}

func _LockManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockmanager.LockManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockManagerServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockManager_LockServiceWithTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockServiceWithTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockManagerServer).LockServiceWithTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockmanager.LockManager/LockServiceWithTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockManagerServer).LockServiceWithTimeout(ctx, req.(*LockServiceWithTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockManager_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockManagerServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockmanager.LockManager/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockManagerServer).Unlock(ctx, req.(*LockReference))
	}
	return interceptor(ctx, in, info, handler)
}

var _LockManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lockmanager.LockManager",
	HandlerType: (*LockManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LockManager_Ping_Handler,
		},
		{
			MethodName: "LockServiceWithTimeout",
			Handler:    _LockManager_LockServiceWithTimeout_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _LockManager_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.yacloud.eu/apis/lockmanager/lockmanager.proto",
}

func init() {
	proto.RegisterFile("golang.yacloud.eu/apis/lockmanager/lockmanager.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xcf, 0x4f, 0xea, 0x40,
	0x10, 0x4e, 0x79, 0x2f, 0x04, 0x06, 0x78, 0x87, 0x3d, 0xf0, 0x78, 0x7d, 0x12, 0x49, 0x0f, 0x86,
	0x70, 0x28, 0x09, 0x7a, 0xd7, 0x18, 0x2e, 0x24, 0x62, 0x4c, 0xf1, 0xc7, 0xc9, 0xc3, 0xda, 0x0e,
	0xb5, 0xa1, 0xdd, 0xc1, 0x76, 0x57, 0xe3, 0xc1, 0x7f, 0xd5, 0xbf, 0xc5, 0x6c, 0x5b, 0x4a, 0x8b,
	0xc8, 0x69, 0xe7, 0x9b, 0x7c, 0x33, 0xfb, 0x7d, 0x33, 0x03, 0x67, 0x3e, 0x85, 0x5c, 0xf8, 0xf6,
	0x3b, 0x77, 0x43, 0x52, 0x9e, 0x8d, 0x6a, 0xcc, 0xd7, 0x41, 0x32, 0x0e, 0xc9, 0x5d, 0x45, 0x5c,
	0x70, 0x1f, 0xe3, 0x72, 0x6c, 0xaf, 0x63, 0x92, 0xc4, 0x5a, 0xa5, 0x94, 0x69, 0xe7, 0x2d, 0x5c,
	0x12, 0x31, 0xf7, 0xde, 0x88, 0x3c, 0x5b, 0xa0, 0xcc, 0xda, 0xb8, 0x14, 0x45, 0x24, 0xf2, 0x27,
	0x2b, 0xb6, 0x46, 0xd0, 0xbe, 0x09, 0x84, 0xef, 0x60, 0xb2, 0x26, 0x91, 0x20, 0x33, 0xa1, 0xb1,
	0x89, 0x7b, 0xc6, 0xc0, 0x18, 0x36, 0x9d, 0x02, 0x5b, 0x1f, 0xd0, 0xbf, 0x22, 0x77, 0xb5, 0xc0,
	0xf8, 0x35, 0x70, 0xf1, 0x21, 0x90, 0xcf, 0xb7, 0x41, 0x84, 0xa4, 0xa4, 0x83, 0x2f, 0x0a, 0x13,
	0xa9, 0x8b, 0x35, 0xe1, 0x9a, 0x47, 0x45, 0xf1, 0x06, 0x33, 0x0b, 0xda, 0x3a, 0x9e, 0xaa, 0x98,
	0xcb, 0x80, 0x44, 0xaf, 0x36, 0x30, 0x86, 0x1d, 0xa7, 0x92, 0x63, 0x47, 0xd0, 0xcc, 0x3b, 0xce,
	0x17, 0xbd, 0x5f, 0x29, 0x61, 0x9b, 0xb0, 0x96, 0x00, 0x9a, 0xed, 0x60, 0xa2, 0x42, 0xc9, 0xba,
	0x50, 0xd7, 0x08, 0xbd, 0xf4, 0xa7, 0x86, 0x93, 0x23, 0x76, 0x01, 0x9d, 0x8c, 0xb5, 0xc4, 0x18,
	0x85, 0x8b, 0xe9, 0x47, 0xad, 0x89, 0x69, 0x97, 0x07, 0x57, 0x61, 0x38, 0xd5, 0x02, 0xeb, 0x78,
	0xa7, 0x03, 0xfb, 0x03, 0xb5, 0xd9, 0x34, 0x37, 0x54, 0x9b, 0x4d, 0xad, 0x93, 0xad, 0xcd, 0x43,
	0x96, 0xf5, 0x6c, 0xef, 0x44, 0xb8, 0x95, 0x6c, 0x42, 0x23, 0xc3, 0x85, 0xe8, 0x02, 0x4f, 0x3e,
	0x0d, 0x68, 0xe9, 0xc2, 0x79, 0xa6, 0x90, 0x8d, 0xe1, 0xb7, 0xde, 0x0b, 0x6b, 0xdb, 0xf9, 0xba,
	0xee, 0x29, 0xf0, 0xcc, 0x7f, 0x15, 0x17, 0x95, 0xc5, 0x3d, 0x42, 0x77, 0xff, 0x72, 0xd8, 0xe8,
	0x9b, 0xf5, 0x1f, 0x37, 0x68, 0xfe, 0xdd, 0x33, 0xa6, 0x54, 0xfb, 0x39, 0xd4, 0x33, 0xad, 0xec,
	0xc0, 0x24, 0x77, 0xf4, 0x95, 0xcd, 0x5f, 0xf6, 0xe1, 0x3f, 0xaa, 0xe2, 0xb2, 0xf5, 0x3d, 0x96,
	0xb9, 0x4f, 0xf5, 0xf4, 0x1c, 0x4f, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x29, 0x5e, 0x32, 0x23,
	0x03, 0x03, 0x00, 0x00,
}
