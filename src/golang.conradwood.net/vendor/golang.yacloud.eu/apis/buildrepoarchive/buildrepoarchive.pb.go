// Code generated by protoc-gen-go.
// source: golang.yacloud.eu/apis/buildrepoarchive/buildrepoarchive.proto
// DO NOT EDIT!

/*
Package buildrepoarchive is a generated protocol buffer package.

It is generated from these files:
	golang.yacloud.eu/apis/buildrepoarchive/buildrepoarchive.proto

It has these top-level messages:
	PingResponse
	UploadRequest
	DownloadRequest
	DownloadResponse
*/
package buildrepoarchive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type UploadRequest struct {
	DomainID string `protobuf:"bytes,1,opt,name=DomainID" json:"DomainID,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=Filename" json:"Filename,omitempty"`
	Data     []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadRequest) GetDomainID() string {
	if m != nil {
		return m.DomainID
	}
	return ""
}

func (m *UploadRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *UploadRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DownloadRequest struct {
	DomainID string `protobuf:"bytes,1,opt,name=DomainID" json:"DomainID,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
}

func (m *DownloadRequest) Reset()                    { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()               {}
func (*DownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DownloadRequest) GetDomainID() string {
	if m != nil {
		return m.DomainID
	}
	return ""
}

func (m *DownloadRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DownloadResponse struct {
	Filename string `protobuf:"bytes,1,opt,name=Filename" json:"Filename,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *DownloadResponse) Reset()                    { *m = DownloadResponse{} }
func (m *DownloadResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadResponse) ProtoMessage()               {}
func (*DownloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DownloadResponse) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *DownloadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "buildrepoarchive.PingResponse")
	proto.RegisterType((*UploadRequest)(nil), "buildrepoarchive.UploadRequest")
	proto.RegisterType((*DownloadRequest)(nil), "buildrepoarchive.DownloadRequest")
	proto.RegisterType((*DownloadResponse)(nil), "buildrepoarchive.DownloadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BuildRepoArchive service

type BuildRepoArchiveClient interface {
	// upload a file to archive
	Upload(ctx context.Context, opts ...grpc.CallOption) (BuildRepoArchive_UploadClient, error)
	// download a file from archive
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (BuildRepoArchive_DownloadClient, error)
}

type buildRepoArchiveClient struct {
	cc *grpc.ClientConn
}

func NewBuildRepoArchiveClient(cc *grpc.ClientConn) BuildRepoArchiveClient {
	return &buildRepoArchiveClient{cc}
}

func (c *buildRepoArchiveClient) Upload(ctx context.Context, opts ...grpc.CallOption) (BuildRepoArchive_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BuildRepoArchive_serviceDesc.Streams[0], c.cc, "/buildrepoarchive.BuildRepoArchive/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildRepoArchiveUploadClient{stream}
	return x, nil
}

type BuildRepoArchive_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*common.Void, error)
	grpc.ClientStream
}

type buildRepoArchiveUploadClient struct {
	grpc.ClientStream
}

func (x *buildRepoArchiveUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildRepoArchiveUploadClient) CloseAndRecv() (*common.Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildRepoArchiveClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (BuildRepoArchive_DownloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BuildRepoArchive_serviceDesc.Streams[1], c.cc, "/buildrepoarchive.BuildRepoArchive/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildRepoArchiveDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuildRepoArchive_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type buildRepoArchiveDownloadClient struct {
	grpc.ClientStream
}

func (x *buildRepoArchiveDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BuildRepoArchive service

type BuildRepoArchiveServer interface {
	// upload a file to archive
	Upload(BuildRepoArchive_UploadServer) error
	// download a file from archive
	Download(*DownloadRequest, BuildRepoArchive_DownloadServer) error
}

func RegisterBuildRepoArchiveServer(s *grpc.Server, srv BuildRepoArchiveServer) {
	s.RegisterService(&_BuildRepoArchive_serviceDesc, srv)
}

func _BuildRepoArchive_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildRepoArchiveServer).Upload(&buildRepoArchiveUploadServer{stream})
}

type BuildRepoArchive_UploadServer interface {
	SendAndClose(*common.Void) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type buildRepoArchiveUploadServer struct {
	grpc.ServerStream
}

func (x *buildRepoArchiveUploadServer) SendAndClose(m *common.Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildRepoArchiveUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildRepoArchive_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildRepoArchiveServer).Download(m, &buildRepoArchiveDownloadServer{stream})
}

type BuildRepoArchive_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type buildRepoArchiveDownloadServer struct {
	grpc.ServerStream
}

func (x *buildRepoArchiveDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _BuildRepoArchive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildrepoarchive.BuildRepoArchive",
	HandlerType: (*BuildRepoArchiveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _BuildRepoArchive_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _BuildRepoArchive_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.yacloud.eu/apis/buildrepoarchive/buildrepoarchive.proto",
}

func init() {
	proto.RegisterFile("golang.yacloud.eu/apis/buildrepoarchive/buildrepoarchive.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x65, 0xdb, 0x52, 0x74, 0xa9, 0x18, 0xf6, 0x14, 0x72, 0xb1, 0xee, 0xa9, 0x78, 0xd8, 0x8a,
	0x9e, 0xbc, 0x28, 0x96, 0x20, 0x88, 0x17, 0x89, 0xe8, 0x7d, 0x9b, 0x1d, 0xea, 0x42, 0xb2, 0xb3,
	0xe6, 0xc3, 0xd2, 0xbf, 0xe3, 0x2f, 0x95, 0xed, 0xe6, 0x03, 0x1b, 0xf4, 0xe0, 0x29, 0x33, 0xc3,
	0x9b, 0x97, 0xf7, 0xde, 0x2c, 0xbd, 0xdd, 0x60, 0x26, 0xcd, 0x46, 0xec, 0x64, 0x9a, 0x61, 0xad,
	0x04, 0xd4, 0x4b, 0x69, 0x75, 0xb9, 0x5c, 0xd7, 0x3a, 0x53, 0x05, 0x58, 0x94, 0x45, 0xfa, 0xae,
	0x3f, 0x61, 0x30, 0x10, 0xb6, 0xc0, 0x0a, 0x59, 0x70, 0x38, 0x8f, 0x44, 0xc3, 0x98, 0xa2, 0x29,
	0xa4, 0xda, 0x22, 0x2a, 0x61, 0xa0, 0xf2, 0xac, 0x29, 0xe6, 0x39, 0x9a, 0xe6, 0xe3, 0x19, 0xf8,
	0x05, 0x9d, 0x3d, 0x6b, 0xb3, 0x49, 0xa0, 0xb4, 0x68, 0x4a, 0x60, 0x11, 0x3d, 0x6a, 0xeb, 0x90,
	0xcc, 0xc9, 0xe2, 0x38, 0xe9, 0x7a, 0x9e, 0xd3, 0x93, 0x57, 0x9b, 0xa1, 0x54, 0x09, 0x7c, 0xd4,
	0x50, 0x56, 0x0e, 0x1c, 0x63, 0x2e, 0xb5, 0x79, 0x8c, 0x5b, 0x70, 0xdb, 0xb3, 0x80, 0x8e, 0x9f,
	0x60, 0x17, 0x8e, 0xf6, 0x63, 0x57, 0x3a, 0xf4, 0x83, 0xce, 0xc0, 0xc8, 0x1c, 0xc2, 0xb1, 0x47,
	0xb7, 0x3d, 0x63, 0x74, 0x12, 0xcb, 0x4a, 0x86, 0x93, 0x39, 0x59, 0xcc, 0x92, 0x7d, 0xcd, 0xef,
	0xe8, 0x69, 0x8c, 0x5b, 0xf3, 0xef, 0x1f, 0xf2, 0x15, 0x0d, 0x7a, 0x82, 0xde, 0x5f, 0x27, 0x82,
	0xfc, 0x22, 0x62, 0xd4, 0x8b, 0xb8, 0xfa, 0x22, 0x34, 0x58, 0xb9, 0x90, 0x13, 0xb0, 0x78, 0xef,
	0x43, 0x66, 0x37, 0x74, 0xea, 0x83, 0x60, 0x67, 0x62, 0x70, 0x99, 0x1f, 0x11, 0x45, 0x33, 0xd1,
	0xc4, 0xfd, 0x86, 0x5a, 0x2d, 0x08, 0x7b, 0x71, 0x0e, 0xbc, 0x26, 0x76, 0x3e, 0x5c, 0x3e, 0x30,
	0x1c, 0xf1, 0xbf, 0x20, 0xde, 0xd2, 0x25, 0x59, 0x71, 0x3a, 0x87, 0xba, 0x7b, 0x44, 0xee, 0xd6,
	0x83, 0xb5, 0xf5, 0x74, 0x7f, 0xef, 0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x01, 0x24,
	0x4c, 0x73, 0x02, 0x00, 0x00,
}
