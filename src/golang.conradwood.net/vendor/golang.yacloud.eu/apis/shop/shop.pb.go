// Code generated by protoc-gen-go.
// source: golang.yacloud.eu/apis/shop/shop.proto
// DO NOT EDIT!

/*
Package shop is a generated protocol buffer package.

It is generated from these files:
	golang.yacloud.eu/apis/shop/shop.proto

It has these top-level messages:
	ShopSettings
	ShoppingBasket
	BasketItem
	LineItem
	LineItemID
	HTMLPage
	HTTPPageRequest
	PageRequest
	CurrentBasket
	UpdateBasketResponse
	UpdateBasketRequest
	Address
	SavedAddress
	DeleteAddressRequest
	DeleteAddressResponse
	EditAddressRequest
	EditAddressResponse
	AddAddressRequest
	AddAddressResponse
	AddressList
	SelectDeliveryAddressRequest
	PrepPaymentRequest
	ShopReference
	ShopReferenceLog
	LoadShopRequest
	ShopResponse
	LogLine
	LogRequest
*/
package shop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"
import payments "golang.yacloud.eu/apis/payments"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShopSettings struct {
	ShowVat bool `protobuf:"varint,1,opt,name=ShowVat" json:"ShowVat,omitempty"`
}

func (m *ShopSettings) Reset()                    { *m = ShopSettings{} }
func (m *ShopSettings) String() string            { return proto.CompactTextString(m) }
func (*ShopSettings) ProtoMessage()               {}
func (*ShopSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ShopSettings) GetShowVat() bool {
	if m != nil {
		return m.ShowVat
	}
	return false
}

type ShoppingBasket struct {
	ID              uint64        `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Items           []*BasketItem `protobuf:"bytes,2,rep,name=Items" json:"Items,omitempty"`
	NetTotal        uint64        `protobuf:"varint,3,opt,name=NetTotal" json:"NetTotal,omitempty"`
	TotalVat        uint64        `protobuf:"varint,4,opt,name=TotalVat" json:"TotalVat,omitempty"`
	GrosTotal       uint64        `protobuf:"varint,5,opt,name=GrosTotal" json:"GrosTotal,omitempty"`
	Currency        string        `protobuf:"bytes,6,opt,name=Currency" json:"Currency,omitempty"`
	CurrencyPrefix  string        `protobuf:"bytes,7,opt,name=CurrencyPrefix" json:"CurrencyPrefix,omitempty"`
	CurrencySuffix  string        `protobuf:"bytes,8,opt,name=CurrencySuffix" json:"CurrencySuffix,omitempty"`
	SessionID       string        `protobuf:"bytes,9,opt,name=SessionID" json:"SessionID,omitempty"`
	UserID          string        `protobuf:"bytes,10,opt,name=UserID" json:"UserID,omitempty"`
	Created         uint32        `protobuf:"varint,11,opt,name=Created" json:"Created,omitempty"`
	LastUsed        uint32        `protobuf:"varint,12,opt,name=LastUsed" json:"LastUsed,omitempty"`
	NetTotalString  string        `protobuf:"bytes,13,opt,name=NetTotalString" json:"NetTotalString,omitempty"`
	TotalVatString  string        `protobuf:"bytes,14,opt,name=TotalVatString" json:"TotalVatString,omitempty"`
	GrosTotalString string        `protobuf:"bytes,15,opt,name=GrosTotalString" json:"GrosTotalString,omitempty"`
	Ordered         bool          `protobuf:"varint,16,opt,name=Ordered" json:"Ordered,omitempty"`
}

func (m *ShoppingBasket) Reset()                    { *m = ShoppingBasket{} }
func (m *ShoppingBasket) String() string            { return proto.CompactTextString(m) }
func (*ShoppingBasket) ProtoMessage()               {}
func (*ShoppingBasket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShoppingBasket) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ShoppingBasket) GetItems() []*BasketItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ShoppingBasket) GetNetTotal() uint64 {
	if m != nil {
		return m.NetTotal
	}
	return 0
}

func (m *ShoppingBasket) GetTotalVat() uint64 {
	if m != nil {
		return m.TotalVat
	}
	return 0
}

func (m *ShoppingBasket) GetGrosTotal() uint64 {
	if m != nil {
		return m.GrosTotal
	}
	return 0
}

func (m *ShoppingBasket) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *ShoppingBasket) GetCurrencyPrefix() string {
	if m != nil {
		return m.CurrencyPrefix
	}
	return ""
}

func (m *ShoppingBasket) GetCurrencySuffix() string {
	if m != nil {
		return m.CurrencySuffix
	}
	return ""
}

func (m *ShoppingBasket) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *ShoppingBasket) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ShoppingBasket) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ShoppingBasket) GetLastUsed() uint32 {
	if m != nil {
		return m.LastUsed
	}
	return 0
}

func (m *ShoppingBasket) GetNetTotalString() string {
	if m != nil {
		return m.NetTotalString
	}
	return ""
}

func (m *ShoppingBasket) GetTotalVatString() string {
	if m != nil {
		return m.TotalVatString
	}
	return ""
}

func (m *ShoppingBasket) GetGrosTotalString() string {
	if m != nil {
		return m.GrosTotalString
	}
	return ""
}

func (m *ShoppingBasket) GetOrdered() bool {
	if m != nil {
		return m.Ordered
	}
	return false
}

type BasketItem struct {
	ID              uint64          `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Item            *LineItem       `protobuf:"bytes,2,opt,name=Item" json:"Item,omitempty"`
	Quantity        uint32          `protobuf:"varint,3,opt,name=Quantity" json:"Quantity,omitempty"`
	Basket          *ShoppingBasket `protobuf:"bytes,4,opt,name=Basket" json:"Basket,omitempty"`
	NetTotal        uint64          `protobuf:"varint,5,opt,name=NetTotal" json:"NetTotal,omitempty"`
	TotalVat        uint64          `protobuf:"varint,6,opt,name=TotalVat" json:"TotalVat,omitempty"`
	GrosTotal       uint64          `protobuf:"varint,7,opt,name=GrosTotal" json:"GrosTotal,omitempty"`
	NetTotalString  string          `protobuf:"bytes,8,opt,name=NetTotalString" json:"NetTotalString,omitempty"`
	TotalVatString  string          `protobuf:"bytes,9,opt,name=TotalVatString" json:"TotalVatString,omitempty"`
	GrosTotalString string          `protobuf:"bytes,10,opt,name=GrosTotalString" json:"GrosTotalString,omitempty"`
}

func (m *BasketItem) Reset()                    { *m = BasketItem{} }
func (m *BasketItem) String() string            { return proto.CompactTextString(m) }
func (*BasketItem) ProtoMessage()               {}
func (*BasketItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BasketItem) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BasketItem) GetItem() *LineItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *BasketItem) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *BasketItem) GetBasket() *ShoppingBasket {
	if m != nil {
		return m.Basket
	}
	return nil
}

func (m *BasketItem) GetNetTotal() uint64 {
	if m != nil {
		return m.NetTotal
	}
	return 0
}

func (m *BasketItem) GetTotalVat() uint64 {
	if m != nil {
		return m.TotalVat
	}
	return 0
}

func (m *BasketItem) GetGrosTotal() uint64 {
	if m != nil {
		return m.GrosTotal
	}
	return 0
}

func (m *BasketItem) GetNetTotalString() string {
	if m != nil {
		return m.NetTotalString
	}
	return ""
}

func (m *BasketItem) GetTotalVatString() string {
	if m != nil {
		return m.TotalVatString
	}
	return ""
}

func (m *BasketItem) GetGrosTotalString() string {
	if m != nil {
		return m.GrosTotalString
	}
	return ""
}

type LineItem struct {
	ID               uint64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	TechnicalName    string  `protobuf:"bytes,2,opt,name=TechnicalName" json:"TechnicalName,omitempty"`
	MarketingName    string  `protobuf:"bytes,3,opt,name=MarketingName" json:"MarketingName,omitempty"`
	ShortDescription string  `protobuf:"bytes,4,opt,name=ShortDescription" json:"ShortDescription,omitempty"`
	LongDescription  string  `protobuf:"bytes,5,opt,name=LongDescription" json:"LongDescription,omitempty"`
	NetAmount        uint64  `protobuf:"varint,6,opt,name=NetAmount" json:"NetAmount,omitempty"`
	Vat              uint64  `protobuf:"varint,7,opt,name=Vat" json:"Vat,omitempty"`
	GrosAmount       uint64  `protobuf:"varint,8,opt,name=GrosAmount" json:"GrosAmount,omitempty"`
	GrosAmountText   string  `protobuf:"bytes,9,opt,name=GrosAmountText" json:"GrosAmountText,omitempty"`
	VatRate          float64 `protobuf:"fixed64,10,opt,name=VatRate" json:"VatRate,omitempty"`
	StockLevel       uint64  `protobuf:"varint,11,opt,name=StockLevel" json:"StockLevel,omitempty"`
	Partition        string  `protobuf:"bytes,12,opt,name=Partition" json:"Partition,omitempty"`
	Public           bool    `protobuf:"varint,13,opt,name=Public" json:"Public,omitempty"`
}

func (m *LineItem) Reset()                    { *m = LineItem{} }
func (m *LineItem) String() string            { return proto.CompactTextString(m) }
func (*LineItem) ProtoMessage()               {}
func (*LineItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LineItem) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LineItem) GetTechnicalName() string {
	if m != nil {
		return m.TechnicalName
	}
	return ""
}

func (m *LineItem) GetMarketingName() string {
	if m != nil {
		return m.MarketingName
	}
	return ""
}

func (m *LineItem) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *LineItem) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *LineItem) GetNetAmount() uint64 {
	if m != nil {
		return m.NetAmount
	}
	return 0
}

func (m *LineItem) GetVat() uint64 {
	if m != nil {
		return m.Vat
	}
	return 0
}

func (m *LineItem) GetGrosAmount() uint64 {
	if m != nil {
		return m.GrosAmount
	}
	return 0
}

func (m *LineItem) GetGrosAmountText() string {
	if m != nil {
		return m.GrosAmountText
	}
	return ""
}

func (m *LineItem) GetVatRate() float64 {
	if m != nil {
		return m.VatRate
	}
	return 0
}

func (m *LineItem) GetStockLevel() uint64 {
	if m != nil {
		return m.StockLevel
	}
	return 0
}

func (m *LineItem) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *LineItem) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

type LineItemID struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *LineItemID) Reset()                    { *m = LineItemID{} }
func (m *LineItemID) String() string            { return proto.CompactTextString(m) }
func (*LineItemID) ProtoMessage()               {}
func (*LineItemID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LineItemID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type HTMLPage struct {
	Path        string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Body        []byte `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	IsEmpty     bool   `protobuf:"varint,3,opt,name=IsEmpty" json:"IsEmpty,omitempty"`
	DoNotModify bool   `protobuf:"varint,4,opt,name=DoNotModify" json:"DoNotModify,omitempty"`
	MimeType    string `protobuf:"bytes,5,opt,name=MimeType" json:"MimeType,omitempty"`
}

func (m *HTMLPage) Reset()                    { *m = HTMLPage{} }
func (m *HTMLPage) String() string            { return proto.CompactTextString(m) }
func (*HTMLPage) ProtoMessage()               {}
func (*HTMLPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HTMLPage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTMLPage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *HTMLPage) GetIsEmpty() bool {
	if m != nil {
		return m.IsEmpty
	}
	return false
}

func (m *HTMLPage) GetDoNotModify() bool {
	if m != nil {
		return m.DoNotModify
	}
	return false
}

func (m *HTMLPage) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

type HTTPPageRequest struct {
	PageRequest  *PageRequest           `protobuf:"bytes,1,opt,name=PageRequest" json:"PageRequest,omitempty"`
	ServeRequest *h2gproxy.ServeRequest `protobuf:"bytes,2,opt,name=ServeRequest" json:"ServeRequest,omitempty"`
}

func (m *HTTPPageRequest) Reset()                    { *m = HTTPPageRequest{} }
func (m *HTTPPageRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPPageRequest) ProtoMessage()               {}
func (*HTTPPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HTTPPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

func (m *HTTPPageRequest) GetServeRequest() *h2gproxy.ServeRequest {
	if m != nil {
		return m.ServeRequest
	}
	return nil
}

type PageRequest struct {
	WikiPath   string `protobuf:"bytes,1,opt,name=WikiPath" json:"WikiPath,omitempty"`
	Partition  string `protobuf:"bytes,2,opt,name=Partition" json:"Partition,omitempty"`
	LinkPrefix string `protobuf:"bytes,3,opt,name=LinkPrefix" json:"LinkPrefix,omitempty"`
}

func (m *PageRequest) Reset()                    { *m = PageRequest{} }
func (m *PageRequest) String() string            { return proto.CompactTextString(m) }
func (*PageRequest) ProtoMessage()               {}
func (*PageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PageRequest) GetWikiPath() string {
	if m != nil {
		return m.WikiPath
	}
	return ""
}

func (m *PageRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *PageRequest) GetLinkPrefix() string {
	if m != nil {
		return m.LinkPrefix
	}
	return ""
}

type CurrentBasket struct {
	Basket       *ShoppingBasket `protobuf:"bytes,1,opt,name=Basket" json:"Basket,omitempty"`
	ShopSettings *ShopSettings   `protobuf:"bytes,2,opt,name=ShopSettings" json:"ShopSettings,omitempty"`
}

func (m *CurrentBasket) Reset()                    { *m = CurrentBasket{} }
func (m *CurrentBasket) String() string            { return proto.CompactTextString(m) }
func (*CurrentBasket) ProtoMessage()               {}
func (*CurrentBasket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CurrentBasket) GetBasket() *ShoppingBasket {
	if m != nil {
		return m.Basket
	}
	return nil
}

func (m *CurrentBasket) GetShopSettings() *ShopSettings {
	if m != nil {
		return m.ShopSettings
	}
	return nil
}

type UpdateBasketResponse struct {
	Item       *BasketItem     `protobuf:"bytes,1,opt,name=Item" json:"Item,omitempty"`
	TotalItems uint32          `protobuf:"varint,2,opt,name=TotalItems" json:"TotalItems,omitempty"`
	Basket     *ShoppingBasket `protobuf:"bytes,3,opt,name=Basket" json:"Basket,omitempty"`
}

func (m *UpdateBasketResponse) Reset()                    { *m = UpdateBasketResponse{} }
func (m *UpdateBasketResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateBasketResponse) ProtoMessage()               {}
func (*UpdateBasketResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateBasketResponse) GetItem() *BasketItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *UpdateBasketResponse) GetTotalItems() uint32 {
	if m != nil {
		return m.TotalItems
	}
	return 0
}

func (m *UpdateBasketResponse) GetBasket() *ShoppingBasket {
	if m != nil {
		return m.Basket
	}
	return nil
}

type UpdateBasketRequest struct {
	LineItemID              uint64 `protobuf:"varint,1,opt,name=LineItemID" json:"LineItemID,omitempty"`
	IncludeBasketInResponse bool   `protobuf:"varint,2,opt,name=IncludeBasketInResponse" json:"IncludeBasketInResponse,omitempty"`
}

func (m *UpdateBasketRequest) Reset()                    { *m = UpdateBasketRequest{} }
func (m *UpdateBasketRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateBasketRequest) ProtoMessage()               {}
func (*UpdateBasketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateBasketRequest) GetLineItemID() uint64 {
	if m != nil {
		return m.LineItemID
	}
	return 0
}

func (m *UpdateBasketRequest) GetIncludeBasketInResponse() bool {
	if m != nil {
		return m.IncludeBasketInResponse
	}
	return false
}

type Address struct {
	ID          uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Line1       string `protobuf:"bytes,2,opt,name=Line1" json:"Line1,omitempty"`
	Line2       string `protobuf:"bytes,3,opt,name=Line2" json:"Line2,omitempty"`
	PostCode    string `protobuf:"bytes,4,opt,name=PostCode" json:"PostCode,omitempty"`
	City        string `protobuf:"bytes,5,opt,name=City" json:"City,omitempty"`
	Name        string `protobuf:"bytes,6,opt,name=Name" json:"Name,omitempty"`
	CountryCode string `protobuf:"bytes,7,opt,name=CountryCode" json:"CountryCode,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Address) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Address) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *Address) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *Address) GetPostCode() string {
	if m != nil {
		return m.PostCode
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Address) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type SavedAddress struct {
	ID          uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Line1       string `protobuf:"bytes,3,opt,name=Line1" json:"Line1,omitempty"`
	Line2       string `protobuf:"bytes,4,opt,name=Line2" json:"Line2,omitempty"`
	Line3       string `protobuf:"bytes,5,opt,name=Line3" json:"Line3,omitempty"`
	PostCode    string `protobuf:"bytes,6,opt,name=PostCode" json:"PostCode,omitempty"`
	City        string `protobuf:"bytes,7,opt,name=City" json:"City,omitempty"`
	CountryCode string `protobuf:"bytes,8,opt,name=CountryCode" json:"CountryCode,omitempty"`
	Name        string `protobuf:"bytes,9,opt,name=Name" json:"Name,omitempty"`
}

func (m *SavedAddress) Reset()                    { *m = SavedAddress{} }
func (m *SavedAddress) String() string            { return proto.CompactTextString(m) }
func (*SavedAddress) ProtoMessage()               {}
func (*SavedAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SavedAddress) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SavedAddress) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SavedAddress) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *SavedAddress) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *SavedAddress) GetLine3() string {
	if m != nil {
		return m.Line3
	}
	return ""
}

func (m *SavedAddress) GetPostCode() string {
	if m != nil {
		return m.PostCode
	}
	return ""
}

func (m *SavedAddress) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *SavedAddress) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SavedAddress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteAddressRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *DeleteAddressRequest) Reset()                    { *m = DeleteAddressRequest{} }
func (m *DeleteAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAddressRequest) ProtoMessage()               {}
func (*DeleteAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteAddressRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type DeleteAddressResponse struct {
	AddressList *AddressList `protobuf:"bytes,1,opt,name=AddressList" json:"AddressList,omitempty"`
}

func (m *DeleteAddressResponse) Reset()                    { *m = DeleteAddressResponse{} }
func (m *DeleteAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAddressResponse) ProtoMessage()               {}
func (*DeleteAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteAddressResponse) GetAddressList() *AddressList {
	if m != nil {
		return m.AddressList
	}
	return nil
}

type EditAddressRequest struct {
	Address *Address `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
}

func (m *EditAddressRequest) Reset()                    { *m = EditAddressRequest{} }
func (m *EditAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*EditAddressRequest) ProtoMessage()               {}
func (*EditAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EditAddressRequest) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type EditAddressResponse struct {
	AddressList *AddressList `protobuf:"bytes,1,opt,name=AddressList" json:"AddressList,omitempty"`
}

func (m *EditAddressResponse) Reset()                    { *m = EditAddressResponse{} }
func (m *EditAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*EditAddressResponse) ProtoMessage()               {}
func (*EditAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EditAddressResponse) GetAddressList() *AddressList {
	if m != nil {
		return m.AddressList
	}
	return nil
}

type AddAddressRequest struct {
	Address *Address `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
}

func (m *AddAddressRequest) Reset()                    { *m = AddAddressRequest{} }
func (m *AddAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AddAddressRequest) ProtoMessage()               {}
func (*AddAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AddAddressRequest) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type AddAddressResponse struct {
	AddressList *AddressList `protobuf:"bytes,1,opt,name=AddressList" json:"AddressList,omitempty"`
}

func (m *AddAddressResponse) Reset()                    { *m = AddAddressResponse{} }
func (m *AddAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*AddAddressResponse) ProtoMessage()               {}
func (*AddAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AddAddressResponse) GetAddressList() *AddressList {
	if m != nil {
		return m.AddressList
	}
	return nil
}

type AddressList struct {
	Addresses         []*Address `protobuf:"bytes,1,rep,name=Addresses" json:"Addresses,omitempty"`
	DeliveryAddressID uint64     `protobuf:"varint,2,opt,name=DeliveryAddressID" json:"DeliveryAddressID,omitempty"`
	InvoiceAddressID  uint64     `protobuf:"varint,3,opt,name=InvoiceAddressID" json:"InvoiceAddressID,omitempty"`
}

func (m *AddressList) Reset()                    { *m = AddressList{} }
func (m *AddressList) String() string            { return proto.CompactTextString(m) }
func (*AddressList) ProtoMessage()               {}
func (*AddressList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AddressList) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AddressList) GetDeliveryAddressID() uint64 {
	if m != nil {
		return m.DeliveryAddressID
	}
	return 0
}

func (m *AddressList) GetInvoiceAddressID() uint64 {
	if m != nil {
		return m.InvoiceAddressID
	}
	return 0
}

type SelectDeliveryAddressRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *SelectDeliveryAddressRequest) Reset()                    { *m = SelectDeliveryAddressRequest{} }
func (m *SelectDeliveryAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectDeliveryAddressRequest) ProtoMessage()               {}
func (*SelectDeliveryAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SelectDeliveryAddressRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type PrepPaymentRequest struct {
	DeliveryAddress *Address        `protobuf:"bytes,1,opt,name=DeliveryAddress" json:"DeliveryAddress,omitempty"`
	Basket          *ShoppingBasket `protobuf:"bytes,2,opt,name=Basket" json:"Basket,omitempty"`
	ShopSettings    *ShopSettings   `protobuf:"bytes,3,opt,name=ShopSettings" json:"ShopSettings,omitempty"`
}

func (m *PrepPaymentRequest) Reset()                    { *m = PrepPaymentRequest{} }
func (m *PrepPaymentRequest) String() string            { return proto.CompactTextString(m) }
func (*PrepPaymentRequest) ProtoMessage()               {}
func (*PrepPaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PrepPaymentRequest) GetDeliveryAddress() *Address {
	if m != nil {
		return m.DeliveryAddress
	}
	return nil
}

func (m *PrepPaymentRequest) GetBasket() *ShoppingBasket {
	if m != nil {
		return m.Basket
	}
	return nil
}

func (m *PrepPaymentRequest) GetShopSettings() *ShopSettings {
	if m != nil {
		return m.ShopSettings
	}
	return nil
}

type ShopReference struct {
	Reference string `protobuf:"bytes,1,opt,name=Reference" json:"Reference,omitempty"`
}

func (m *ShopReference) Reset()                    { *m = ShopReference{} }
func (m *ShopReference) String() string            { return proto.CompactTextString(m) }
func (*ShopReference) ProtoMessage()               {}
func (*ShopReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ShopReference) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

type ShopReferenceLog struct {
	ID                  uint64          `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Reference           string          `protobuf:"bytes,2,opt,name=Reference" json:"Reference,omitempty"`
	UserID              string          `protobuf:"bytes,3,opt,name=UserID" json:"UserID,omitempty"`
	Created             uint32          `protobuf:"varint,4,opt,name=Created" json:"Created,omitempty"`
	Expiry              uint32          `protobuf:"varint,5,opt,name=Expiry" json:"Expiry,omitempty"`
	ObjectKey           string          `protobuf:"bytes,6,opt,name=ObjectKey" json:"ObjectKey,omitempty"`
	Basket              *ShoppingBasket `protobuf:"bytes,7,opt,name=Basket" json:"Basket,omitempty"`
	TotalAmountToCharge uint64          `protobuf:"varint,8,opt,name=TotalAmountToCharge" json:"TotalAmountToCharge,omitempty"`
	Currency            string          `protobuf:"bytes,9,opt,name=Currency" json:"Currency,omitempty"`
	Ordered             bool            `protobuf:"varint,10,opt,name=Ordered" json:"Ordered,omitempty"`
}

func (m *ShopReferenceLog) Reset()                    { *m = ShopReferenceLog{} }
func (m *ShopReferenceLog) String() string            { return proto.CompactTextString(m) }
func (*ShopReferenceLog) ProtoMessage()               {}
func (*ShopReferenceLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ShopReferenceLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ShopReferenceLog) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *ShopReferenceLog) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ShopReferenceLog) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ShopReferenceLog) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *ShopReferenceLog) GetObjectKey() string {
	if m != nil {
		return m.ObjectKey
	}
	return ""
}

func (m *ShopReferenceLog) GetBasket() *ShoppingBasket {
	if m != nil {
		return m.Basket
	}
	return nil
}

func (m *ShopReferenceLog) GetTotalAmountToCharge() uint64 {
	if m != nil {
		return m.TotalAmountToCharge
	}
	return 0
}

func (m *ShopReferenceLog) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *ShopReferenceLog) GetOrdered() bool {
	if m != nil {
		return m.Ordered
	}
	return false
}

type LoadShopRequest struct {
	Partition string `protobuf:"bytes,1,opt,name=Partition" json:"Partition,omitempty"`
}

func (m *LoadShopRequest) Reset()                    { *m = LoadShopRequest{} }
func (m *LoadShopRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadShopRequest) ProtoMessage()               {}
func (*LoadShopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *LoadShopRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

type ShopResponse struct {
	Items        []*LineItem   `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
	IsOwner      bool          `protobuf:"varint,2,opt,name=IsOwner" json:"IsOwner,omitempty"`
	ShopSettings *ShopSettings `protobuf:"bytes,3,opt,name=ShopSettings" json:"ShopSettings,omitempty"`
	Partition    string        `protobuf:"bytes,4,opt,name=Partition" json:"Partition,omitempty"`
}

func (m *ShopResponse) Reset()                    { *m = ShopResponse{} }
func (m *ShopResponse) String() string            { return proto.CompactTextString(m) }
func (*ShopResponse) ProtoMessage()               {}
func (*ShopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ShopResponse) GetItems() []*LineItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ShopResponse) GetIsOwner() bool {
	if m != nil {
		return m.IsOwner
	}
	return false
}

func (m *ShopResponse) GetShopSettings() *ShopSettings {
	if m != nil {
		return m.ShopSettings
	}
	return nil
}

func (m *ShopResponse) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

type LogLine struct {
	Occured uint32 `protobuf:"varint,1,opt,name=Occured" json:"Occured,omitempty"`
	Line    string `protobuf:"bytes,2,opt,name=Line" json:"Line,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *LogLine) GetOccured() uint32 {
	if m != nil {
		return m.Occured
	}
	return 0
}

func (m *LogLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type LogRequest struct {
	Lines []*LogLine `protobuf:"bytes,1,rep,name=Lines" json:"Lines,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *LogRequest) GetLines() []*LogLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

func init() {
	proto.RegisterType((*ShopSettings)(nil), "shop.ShopSettings")
	proto.RegisterType((*ShoppingBasket)(nil), "shop.ShoppingBasket")
	proto.RegisterType((*BasketItem)(nil), "shop.BasketItem")
	proto.RegisterType((*LineItem)(nil), "shop.LineItem")
	proto.RegisterType((*LineItemID)(nil), "shop.LineItemID")
	proto.RegisterType((*HTMLPage)(nil), "shop.HTMLPage")
	proto.RegisterType((*HTTPPageRequest)(nil), "shop.HTTPPageRequest")
	proto.RegisterType((*PageRequest)(nil), "shop.PageRequest")
	proto.RegisterType((*CurrentBasket)(nil), "shop.CurrentBasket")
	proto.RegisterType((*UpdateBasketResponse)(nil), "shop.UpdateBasketResponse")
	proto.RegisterType((*UpdateBasketRequest)(nil), "shop.UpdateBasketRequest")
	proto.RegisterType((*Address)(nil), "shop.Address")
	proto.RegisterType((*SavedAddress)(nil), "shop.SavedAddress")
	proto.RegisterType((*DeleteAddressRequest)(nil), "shop.DeleteAddressRequest")
	proto.RegisterType((*DeleteAddressResponse)(nil), "shop.DeleteAddressResponse")
	proto.RegisterType((*EditAddressRequest)(nil), "shop.EditAddressRequest")
	proto.RegisterType((*EditAddressResponse)(nil), "shop.EditAddressResponse")
	proto.RegisterType((*AddAddressRequest)(nil), "shop.AddAddressRequest")
	proto.RegisterType((*AddAddressResponse)(nil), "shop.AddAddressResponse")
	proto.RegisterType((*AddressList)(nil), "shop.AddressList")
	proto.RegisterType((*SelectDeliveryAddressRequest)(nil), "shop.SelectDeliveryAddressRequest")
	proto.RegisterType((*PrepPaymentRequest)(nil), "shop.PrepPaymentRequest")
	proto.RegisterType((*ShopReference)(nil), "shop.ShopReference")
	proto.RegisterType((*ShopReferenceLog)(nil), "shop.ShopReferenceLog")
	proto.RegisterType((*LoadShopRequest)(nil), "shop.LoadShopRequest")
	proto.RegisterType((*ShopResponse)(nil), "shop.ShopResponse")
	proto.RegisterType((*LogLine)(nil), "shop.LogLine")
	proto.RegisterType((*LogRequest)(nil), "shop.LogRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Shop service

type ShopClient interface {
	// load a shop -that is, list its items
	LoadShop(ctx context.Context, in *LoadShopRequest, opts ...grpc.CallOption) (*ShopResponse, error)
	// add an item to the basket
	AddItemToBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*UpdateBasketResponse, error)
	// remove an item from the basket (remove ONE - if multiple are in basket, keep the others)
	RemoveItemFromBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*UpdateBasketResponse, error)
	// update a line item
	UpdateLineItem(ctx context.Context, in *LineItem, opts ...grpc.CallOption) (*LineItem, error)
	// update a line item
	AddLineItem(ctx context.Context, in *LineItem, opts ...grpc.CallOption) (*LineItem, error)
	// retrieve a lineitem
	LoadItem(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*LineItem, error)
	// retrieve a basketitem by Lineitemid, create shopping basket on-the-fly if required
	LoadBasketItem(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*BasketItem, error)
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// get Basket for a given session (items not loaded)
	GetBasketOverview(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*CurrentBasket, error)
	// get Basket for a given session (all items eagerly loaded)
	GetBasketFull(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*CurrentBasket, error)
	// get delivery addresses
	GetAddresses(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AddressList, error)
	// add a delivery address
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
	// delete an address
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error)
	// modify an address
	EditAddress(ctx context.Context, in *EditAddressRequest, opts ...grpc.CallOption) (*EditAddressResponse, error)
	// select a delivery address
	SelectDeliveryAddress(ctx context.Context, in *SelectDeliveryAddressRequest, opts ...grpc.CallOption) (*common.Void, error)
	// prepare for payment, return a reference that uniquely identifies items, price, address (and everything we need for payment)
	PrepareForPayment(ctx context.Context, in *PrepPaymentRequest, opts ...grpc.CallOption) (*ShopReference, error)
	// get details for a shopreference
	GetPaymentDetailsByReference(ctx context.Context, in *ShopReference, opts ...grpc.CallOption) (*payments.Payment, error)
	// remote log
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*common.Void, error)
	// confirm order/sale (reduces stock levels)
	ConfirmOrder(ctx context.Context, in *ShopReference, opts ...grpc.CallOption) (*common.Void, error)
}

type shopClient struct {
	cc *grpc.ClientConn
}

func NewShopClient(cc *grpc.ClientConn) ShopClient {
	return &shopClient{cc}
}

func (c *shopClient) LoadShop(ctx context.Context, in *LoadShopRequest, opts ...grpc.CallOption) (*ShopResponse, error) {
	out := new(ShopResponse)
	err := grpc.Invoke(ctx, "/shop.Shop/LoadShop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddItemToBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*UpdateBasketResponse, error) {
	out := new(UpdateBasketResponse)
	err := grpc.Invoke(ctx, "/shop.Shop/AddItemToBasket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) RemoveItemFromBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*UpdateBasketResponse, error) {
	out := new(UpdateBasketResponse)
	err := grpc.Invoke(ctx, "/shop.Shop/RemoveItemFromBasket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateLineItem(ctx context.Context, in *LineItem, opts ...grpc.CallOption) (*LineItem, error) {
	out := new(LineItem)
	err := grpc.Invoke(ctx, "/shop.Shop/UpdateLineItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddLineItem(ctx context.Context, in *LineItem, opts ...grpc.CallOption) (*LineItem, error) {
	out := new(LineItem)
	err := grpc.Invoke(ctx, "/shop.Shop/AddLineItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) LoadItem(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*LineItem, error) {
	out := new(LineItem)
	err := grpc.Invoke(ctx, "/shop.Shop/LoadItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) LoadBasketItem(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*BasketItem, error) {
	out := new(BasketItem)
	err := grpc.Invoke(ctx, "/shop.Shop/LoadBasketItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/shop.Shop/HandleHTTPRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBasketOverview(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*CurrentBasket, error) {
	out := new(CurrentBasket)
	err := grpc.Invoke(ctx, "/shop.Shop/GetBasketOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBasketFull(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*CurrentBasket, error) {
	out := new(CurrentBasket)
	err := grpc.Invoke(ctx, "/shop.Shop/GetBasketFull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetAddresses(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AddressList, error) {
	out := new(AddressList)
	err := grpc.Invoke(ctx, "/shop.Shop/GetAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	out := new(AddAddressResponse)
	err := grpc.Invoke(ctx, "/shop.Shop/AddAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error) {
	out := new(DeleteAddressResponse)
	err := grpc.Invoke(ctx, "/shop.Shop/DeleteAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) EditAddress(ctx context.Context, in *EditAddressRequest, opts ...grpc.CallOption) (*EditAddressResponse, error) {
	out := new(EditAddressResponse)
	err := grpc.Invoke(ctx, "/shop.Shop/EditAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SelectDeliveryAddress(ctx context.Context, in *SelectDeliveryAddressRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/shop.Shop/SelectDeliveryAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PrepareForPayment(ctx context.Context, in *PrepPaymentRequest, opts ...grpc.CallOption) (*ShopReference, error) {
	out := new(ShopReference)
	err := grpc.Invoke(ctx, "/shop.Shop/PrepareForPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetPaymentDetailsByReference(ctx context.Context, in *ShopReference, opts ...grpc.CallOption) (*payments.Payment, error) {
	out := new(payments.Payment)
	err := grpc.Invoke(ctx, "/shop.Shop/GetPaymentDetailsByReference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/shop.Shop/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ConfirmOrder(ctx context.Context, in *ShopReference, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/shop.Shop/ConfirmOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Shop service

type ShopServer interface {
	// load a shop -that is, list its items
	LoadShop(context.Context, *LoadShopRequest) (*ShopResponse, error)
	// add an item to the basket
	AddItemToBasket(context.Context, *UpdateBasketRequest) (*UpdateBasketResponse, error)
	// remove an item from the basket (remove ONE - if multiple are in basket, keep the others)
	RemoveItemFromBasket(context.Context, *UpdateBasketRequest) (*UpdateBasketResponse, error)
	// update a line item
	UpdateLineItem(context.Context, *LineItem) (*LineItem, error)
	// update a line item
	AddLineItem(context.Context, *LineItem) (*LineItem, error)
	// retrieve a lineitem
	LoadItem(context.Context, *LineItemID) (*LineItem, error)
	// retrieve a basketitem by Lineitemid, create shopping basket on-the-fly if required
	LoadBasketItem(context.Context, *LineItemID) (*BasketItem, error)
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(context.Context, *HTTPPageRequest) (*HTMLPage, error)
	// get Basket for a given session (items not loaded)
	GetBasketOverview(context.Context, *common.Void) (*CurrentBasket, error)
	// get Basket for a given session (all items eagerly loaded)
	GetBasketFull(context.Context, *common.Void) (*CurrentBasket, error)
	// get delivery addresses
	GetAddresses(context.Context, *common.Void) (*AddressList, error)
	// add a delivery address
	AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error)
	// delete an address
	DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressResponse, error)
	// modify an address
	EditAddress(context.Context, *EditAddressRequest) (*EditAddressResponse, error)
	// select a delivery address
	SelectDeliveryAddress(context.Context, *SelectDeliveryAddressRequest) (*common.Void, error)
	// prepare for payment, return a reference that uniquely identifies items, price, address (and everything we need for payment)
	PrepareForPayment(context.Context, *PrepPaymentRequest) (*ShopReference, error)
	// get details for a shopreference
	GetPaymentDetailsByReference(context.Context, *ShopReference) (*payments.Payment, error)
	// remote log
	Log(context.Context, *LogRequest) (*common.Void, error)
	// confirm order/sale (reduces stock levels)
	ConfirmOrder(context.Context, *ShopReference) (*common.Void, error)
}

func RegisterShopServer(s *grpc.Server, srv ShopServer) {
	s.RegisterService(&_Shop_serviceDesc, srv)
}

func _Shop_LoadShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).LoadShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/LoadShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).LoadShop(ctx, req.(*LoadShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddItemToBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddItemToBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/AddItemToBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddItemToBasket(ctx, req.(*UpdateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_RemoveItemFromBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).RemoveItemFromBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/RemoveItemFromBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).RemoveItemFromBasket(ctx, req.(*UpdateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/UpdateLineItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateLineItem(ctx, req.(*LineItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/AddLineItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddLineItem(ctx, req.(*LineItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_LoadItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).LoadItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/LoadItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).LoadItem(ctx, req.(*LineItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_LoadBasketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).LoadBasketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/LoadBasketItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).LoadBasketItem(ctx, req.(*LineItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_HandleHTTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).HandleHTTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/HandleHTTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).HandleHTTPRequest(ctx, req.(*HTTPPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBasketOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBasketOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/GetBasketOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBasketOverview(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBasketFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBasketFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/GetBasketFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBasketFull(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/GetAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetAddresses(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_EditAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).EditAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/EditAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).EditAddress(ctx, req.(*EditAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SelectDeliveryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDeliveryAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SelectDeliveryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/SelectDeliveryAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SelectDeliveryAddress(ctx, req.(*SelectDeliveryAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PrepareForPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PrepareForPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/PrepareForPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PrepareForPayment(ctx, req.(*PrepPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetPaymentDetailsByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetPaymentDetailsByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/GetPaymentDetailsByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetPaymentDetailsByReference(ctx, req.(*ShopReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ConfirmOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ConfirmOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/ConfirmOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ConfirmOrder(ctx, req.(*ShopReference))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shop.Shop",
	HandlerType: (*ShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadShop",
			Handler:    _Shop_LoadShop_Handler,
		},
		{
			MethodName: "AddItemToBasket",
			Handler:    _Shop_AddItemToBasket_Handler,
		},
		{
			MethodName: "RemoveItemFromBasket",
			Handler:    _Shop_RemoveItemFromBasket_Handler,
		},
		{
			MethodName: "UpdateLineItem",
			Handler:    _Shop_UpdateLineItem_Handler,
		},
		{
			MethodName: "AddLineItem",
			Handler:    _Shop_AddLineItem_Handler,
		},
		{
			MethodName: "LoadItem",
			Handler:    _Shop_LoadItem_Handler,
		},
		{
			MethodName: "LoadBasketItem",
			Handler:    _Shop_LoadBasketItem_Handler,
		},
		{
			MethodName: "HandleHTTPRequest",
			Handler:    _Shop_HandleHTTPRequest_Handler,
		},
		{
			MethodName: "GetBasketOverview",
			Handler:    _Shop_GetBasketOverview_Handler,
		},
		{
			MethodName: "GetBasketFull",
			Handler:    _Shop_GetBasketFull_Handler,
		},
		{
			MethodName: "GetAddresses",
			Handler:    _Shop_GetAddresses_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _Shop_AddAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _Shop_DeleteAddress_Handler,
		},
		{
			MethodName: "EditAddress",
			Handler:    _Shop_EditAddress_Handler,
		},
		{
			MethodName: "SelectDeliveryAddress",
			Handler:    _Shop_SelectDeliveryAddress_Handler,
		},
		{
			MethodName: "PrepareForPayment",
			Handler:    _Shop_PrepareForPayment_Handler,
		},
		{
			MethodName: "GetPaymentDetailsByReference",
			Handler:    _Shop_GetPaymentDetailsByReference_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Shop_Log_Handler,
		},
		{
			MethodName: "ConfirmOrder",
			Handler:    _Shop_ConfirmOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.yacloud.eu/apis/shop/shop.proto",
}

func init() { proto.RegisterFile("golang.yacloud.eu/apis/shop/shop.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x73, 0x1a, 0xcb,
	0x11, 0xaf, 0x05, 0x84, 0xa0, 0x01, 0x49, 0x8c, 0x65, 0x3f, 0x44, 0x5c, 0x8e, 0x6a, 0x93, 0x38,
	0xaa, 0xc4, 0x0f, 0x3f, 0xe3, 0x17, 0xbf, 0xd4, 0xab, 0xbc, 0x4a, 0x19, 0xe1, 0x0f, 0x12, 0x64,
	0x91, 0x05, 0x3b, 0xe7, 0x15, 0xdb, 0x82, 0x8d, 0x60, 0x87, 0xec, 0x0e, 0x48, 0x5c, 0x75, 0x7c,
	0xe7, 0x54, 0x0e, 0x39, 0xa6, 0x7c, 0x4a, 0x8e, 0xf9, 0x7f, 0x72, 0xcf, 0x3d, 0x7f, 0x40, 0x6a,
	0x3e, 0xf6, 0x63, 0x76, 0x91, 0xa2, 0xb2, 0xdf, 0x45, 0x9a, 0xee, 0xfe, 0xf5, 0x4c, 0x4f, 0x77,
	0x6f, 0x77, 0x0f, 0xf0, 0x78, 0x42, 0x67, 0xb6, 0x37, 0x69, 0xad, 0xed, 0xf1, 0x8c, 0x2e, 0x9d,
	0x16, 0x2e, 0x9f, 0xda, 0x0b, 0x37, 0x78, 0x1a, 0x4c, 0xe9, 0x42, 0xfc, 0x69, 0x2d, 0x7c, 0xca,
	0x28, 0x29, 0xf0, 0x75, 0xb3, 0xa5, 0xd0, 0x63, 0xea, 0xf9, 0xb6, 0x73, 0x49, 0xa9, 0xd3, 0xf2,
	0x90, 0x49, 0x8d, 0x31, 0x9d, 0xcf, 0xa9, 0xa7, 0xfe, 0x49, 0xad, 0x66, 0xfb, 0x16, 0xfc, 0xb4,
	0x3d, 0x59, 0xf8, 0xf4, 0x6a, 0x1d, 0x2d, 0x94, 0x4e, 0xeb, 0x06, 0x8b, 0x16, 0xf6, 0x7a, 0x8e,
	0x1e, 0x8b, 0x17, 0x12, 0x6f, 0x1e, 0x41, 0x75, 0x38, 0xa5, 0x8b, 0x21, 0x32, 0xe6, 0x7a, 0x93,
	0x80, 0x34, 0x60, 0x7b, 0x38, 0xa5, 0x97, 0x1f, 0x6c, 0xd6, 0x30, 0x0e, 0x8d, 0xa3, 0x92, 0x15,
	0x92, 0xe6, 0xf7, 0x05, 0xd8, 0xe1, 0xd0, 0x85, 0xeb, 0x4d, 0x3a, 0x76, 0x70, 0x81, 0x8c, 0xec,
	0x40, 0xae, 0xd7, 0x15, 0xb8, 0x82, 0x95, 0xeb, 0x75, 0xc9, 0x63, 0xd8, 0xea, 0x31, 0x9c, 0x07,
	0x8d, 0xdc, 0x61, 0xfe, 0xa8, 0xd2, 0xde, 0x6b, 0x09, 0x17, 0x48, 0x30, 0x17, 0x58, 0x52, 0x4c,
	0x9a, 0x50, 0x7a, 0x87, 0x6c, 0x44, 0x99, 0x3d, 0x6b, 0xe4, 0x85, 0x76, 0x44, 0x73, 0x99, 0x58,
	0x70, 0x0b, 0x0a, 0x52, 0x16, 0xd2, 0xe4, 0x21, 0x94, 0xdf, 0xf8, 0x34, 0x90, 0x8a, 0x5b, 0x42,
	0x18, 0x33, 0xb8, 0xe6, 0xf1, 0xd2, 0xf7, 0xd1, 0x1b, 0xaf, 0x1b, 0xc5, 0x43, 0xe3, 0xa8, 0x6c,
	0x45, 0x34, 0x79, 0x0c, 0x3b, 0xe1, 0x7a, 0xe0, 0xe3, 0xb9, 0x7b, 0xd5, 0xd8, 0x16, 0x88, 0x14,
	0x37, 0x89, 0x1b, 0x2e, 0xcf, 0x39, 0xae, 0xa4, 0xe3, 0x24, 0x97, 0x5b, 0x32, 0xc4, 0x20, 0x70,
	0xa9, 0xd7, 0xeb, 0x36, 0xca, 0x02, 0x12, 0x33, 0xc8, 0x03, 0x28, 0xbe, 0x0f, 0xd0, 0xef, 0x75,
	0x1b, 0x20, 0x44, 0x8a, 0xe2, 0xce, 0x3d, 0xf6, 0xd1, 0x66, 0xe8, 0x34, 0x2a, 0x87, 0xc6, 0x51,
	0xcd, 0x0a, 0x49, 0x6e, 0x7b, 0xdf, 0x0e, 0xd8, 0xfb, 0x00, 0x9d, 0x46, 0x55, 0x88, 0x22, 0x9a,
	0xdb, 0x14, 0x7a, 0x67, 0xc8, 0x7c, 0xd7, 0x9b, 0x34, 0x6a, 0xd2, 0x26, 0x9d, 0xcb, 0x71, 0xa1,
	0xa7, 0x14, 0x6e, 0x47, 0xe2, 0x74, 0x2e, 0x39, 0x82, 0xdd, 0xc8, 0x69, 0x0a, 0xb8, 0x2b, 0x80,
	0x69, 0x36, 0xb7, 0xf7, 0xd4, 0x77, 0xd0, 0x47, 0xa7, 0xb1, 0x27, 0x93, 0x41, 0x91, 0xe6, 0x5f,
	0xf3, 0x00, 0x71, 0x5c, 0x33, 0x89, 0xf0, 0x1d, 0x14, 0x38, 0xbf, 0x91, 0x3b, 0x34, 0x8e, 0x2a,
	0xed, 0x1d, 0x99, 0x07, 0x7d, 0xd7, 0x43, 0xce, 0xed, 0x1c, 0xfc, 0xed, 0xfa, 0xa0, 0xb8, 0x74,
	0x3d, 0xf6, 0xe2, 0xeb, 0xbf, 0x5f, 0x1f, 0x54, 0x66, 0xae, 0x87, 0x2e, 0xc3, 0x79, 0xcb, 0x75,
	0x2c, 0xa1, 0xc6, 0xbd, 0xf1, 0x87, 0xa5, 0xed, 0x31, 0x97, 0xad, 0x45, 0x7e, 0xd4, 0xac, 0x88,
	0x26, 0x27, 0x50, 0x94, 0x07, 0x8b, 0xec, 0xa8, 0xb4, 0xf7, 0xe5, 0xe6, 0x7a, 0x66, 0x76, 0x7e,
	0xac, 0x1d, 0x51, 0x0f, 0x94, 0xf4, 0x4c, 0x48, 0xf9, 0x41, 0x6a, 0x13, 0x2d, 0x15, 0xb7, 0x6e,
	0x49, 0xc5, 0xe2, 0x6d, 0xa9, 0xb8, 0x9d, 0x4e, 0xc5, 0x6c, 0xc8, 0x4a, 0x77, 0x0c, 0x59, 0xf9,
	0xae, 0x21, 0x83, 0x8d, 0x21, 0x33, 0x3f, 0xe6, 0xa1, 0x14, 0x3a, 0x3a, 0x13, 0x96, 0x9f, 0x42,
	0x6d, 0x84, 0xe3, 0xa9, 0xe7, 0x8e, 0xed, 0xd9, 0x3b, 0x7b, 0x8e, 0x22, 0x3e, 0x65, 0x4b, 0x67,
	0x72, 0xd4, 0x89, 0xed, 0x5f, 0x20, 0x2f, 0x08, 0x02, 0x95, 0x97, 0x28, 0x8d, 0x49, 0x7e, 0x01,
	0x7b, 0xc3, 0x29, 0xf5, 0x59, 0x17, 0x83, 0xb1, 0xef, 0x2e, 0x98, 0x4b, 0x3d, 0x11, 0x91, 0xb2,
	0x95, 0xe1, 0x73, 0xf3, 0xfb, 0xd4, 0x9b, 0x24, 0xa1, 0x5b, 0xd2, 0xfc, 0x14, 0x9b, 0xbb, 0xf5,
	0x1d, 0xb2, 0x97, 0x73, 0xba, 0xf4, 0x42, 0x9f, 0xc7, 0x0c, 0xb2, 0x07, 0x79, 0x1e, 0x0b, 0xe9,
	0x6e, 0xbe, 0x24, 0x8f, 0x00, 0xb8, 0x07, 0x94, 0x42, 0x49, 0x08, 0x12, 0x1c, 0xee, 0xe0, 0x98,
	0x1a, 0xe1, 0x15, 0x0b, 0x1d, 0xac, 0x73, 0x79, 0xa6, 0x7f, 0xb0, 0x99, 0x65, 0x33, 0x14, 0x8e,
	0x35, 0xac, 0x90, 0xe4, 0x27, 0x0c, 0x19, 0x1d, 0x5f, 0xf4, 0x71, 0x85, 0x33, 0xf1, 0xd9, 0x16,
	0xac, 0x04, 0x87, 0x5b, 0x3c, 0xb0, 0x7d, 0xe6, 0x8a, 0x5b, 0x55, 0x65, 0x25, 0x88, 0x18, 0xbc,
	0x12, 0x0c, 0x96, 0x67, 0x33, 0x77, 0x2c, 0xbe, 0xd9, 0x92, 0xa5, 0x28, 0xf3, 0x21, 0x40, 0x18,
	0xa5, 0x5e, 0x37, 0x1d, 0x27, 0xf3, 0x7b, 0x03, 0x4a, 0x6f, 0x47, 0x27, 0xfd, 0x81, 0x3d, 0x41,
	0x42, 0xa0, 0x30, 0xb0, 0xd9, 0x54, 0x88, 0xcb, 0x96, 0x58, 0x73, 0x5e, 0x87, 0x3a, 0x6b, 0x11,
	0xbf, 0xaa, 0x25, 0xd6, 0xfc, 0x0a, 0xbd, 0xe0, 0xd5, 0x7c, 0xa1, 0xbe, 0x99, 0x92, 0x15, 0x92,
	0xe4, 0x10, 0x2a, 0x5d, 0xfa, 0x8e, 0xb2, 0x13, 0xea, 0xb8, 0xe7, 0x6b, 0x11, 0xa5, 0x92, 0x95,
	0x64, 0xf1, 0x4c, 0x3f, 0x71, 0xe7, 0x38, 0x5a, 0x2f, 0x50, 0x45, 0x26, 0xa2, 0xcd, 0x6b, 0x03,
	0x76, 0xdf, 0x8e, 0x46, 0x03, 0x6e, 0x8c, 0x85, 0x7f, 0x5e, 0x62, 0xc0, 0xc8, 0x73, 0xa8, 0x24,
	0x48, 0x61, 0x5a, 0xa5, 0x5d, 0x97, 0x5f, 0x62, 0x42, 0x60, 0x25, 0x51, 0xe4, 0x5b, 0xa8, 0x0e,
	0xd1, 0x5f, 0x45, 0x5a, 0xb2, 0x38, 0x3c, 0x68, 0x45, 0x1d, 0x2c, 0x29, 0xb5, 0x34, 0xac, 0x39,
	0xd1, 0x0e, 0xe4, 0xf6, 0xfe, 0xd1, 0xbd, 0x70, 0x13, 0x7e, 0x89, 0x68, 0x3d, 0x20, 0xb9, 0x74,
	0x40, 0x1e, 0x09, 0xc7, 0x5f, 0xa8, 0x26, 0x20, 0x33, 0x3b, 0xc1, 0x31, 0x97, 0x50, 0x93, 0xa5,
	0x9e, 0xa9, 0x02, 0xf1, 0x24, 0xaa, 0x37, 0xc6, 0xcd, 0xf5, 0x26, 0x2a, 0x27, 0x2f, 0xf4, 0x76,
	0xaa, 0xee, 0x48, 0x62, 0x9d, 0x50, 0x62, 0x69, 0x38, 0x1e, 0xf1, 0xfd, 0xf7, 0x0b, 0xc7, 0x66,
	0xa8, 0x36, 0xc4, 0x60, 0x41, 0xbd, 0x80, 0x7f, 0x8c, 0xb2, 0x92, 0xca, 0xc3, 0xb3, 0x1d, 0x55,
	0x16, 0xcc, 0x47, 0x00, 0xa2, 0x08, 0x84, 0xdd, 0x97, 0x97, 0xcc, 0x04, 0x27, 0x71, 0x89, 0xfc,
	0xff, 0xbf, 0x84, 0x49, 0xe1, 0x9e, 0x6e, 0x8b, 0x74, 0xfa, 0xa3, 0x64, 0xce, 0xaa, 0x6c, 0x4d,
	0x66, 0xf1, 0xaf, 0xe1, 0x8b, 0x9e, 0x37, 0x9e, 0x2d, 0x1d, 0xa5, 0xd7, 0xf3, 0xc2, 0x5b, 0x08,
	0x8b, 0x4a, 0xd6, 0x4d, 0x62, 0xf3, 0x9f, 0x06, 0x6c, 0xbf, 0x74, 0x1c, 0x1f, 0x83, 0x20, 0x53,
	0xb3, 0xf6, 0x61, 0x8b, 0x9f, 0xf1, 0x4c, 0x85, 0x52, 0x12, 0x21, 0xb7, 0xad, 0x22, 0x28, 0x09,
	0x9e, 0x16, 0x03, 0x1a, 0xb0, 0x63, 0xea, 0xa0, 0xaa, 0x45, 0x11, 0xcd, 0x3f, 0x99, 0x63, 0xde,
	0x4f, 0x64, 0x7a, 0x8b, 0x35, 0xe7, 0x89, 0x02, 0x27, 0xa7, 0x05, 0xb1, 0xe6, 0x1f, 0xcb, 0x31,
	0x2f, 0x0b, 0xfe, 0x5a, 0x6c, 0x23, 0xc7, 0x84, 0x24, 0xcb, 0xfc, 0xb7, 0x01, 0xd5, 0xa1, 0xbd,
	0x42, 0xe7, 0x26, 0x93, 0xe3, 0xf6, 0x9f, 0xd3, 0xda, 0x7f, 0x74, 0x95, 0xfc, 0xc6, 0xab, 0x14,
	0x92, 0x57, 0x51, 0xdc, 0xe7, 0xca, 0x5e, 0x49, 0x68, 0x17, 0x2c, 0xde, 0x70, 0xc1, 0xed, 0xc4,
	0x05, 0x53, 0x97, 0x29, 0x65, 0x2e, 0x13, 0xb9, 0xa0, 0x1c, 0xbb, 0xc0, 0x7c, 0x0c, 0xfb, 0x5d,
	0x9c, 0x21, 0x43, 0x75, 0xc1, 0x30, 0x01, 0xd2, 0x65, 0xaa, 0x0f, 0xf7, 0x53, 0x38, 0x95, 0xb4,
	0xcf, 0xa1, 0xa2, 0x58, 0x7d, 0x37, 0x5d, 0x1e, 0x12, 0x02, 0x2b, 0x89, 0x32, 0xbf, 0x03, 0xf2,
	0xca, 0x71, 0x59, 0xea, 0xcc, 0x9f, 0x47, 0x99, 0xa1, 0xb6, 0xa9, 0x69, 0xdb, 0x58, 0xa1, 0xd4,
	0xfc, 0x1d, 0xdc, 0xd3, 0xd4, 0x3f, 0xc7, 0x94, 0xdf, 0x40, 0xfd, 0xa5, 0xe3, 0x7c, 0xaa, 0x25,
	0x3d, 0x20, 0x49, 0xed, 0xcf, 0x31, 0xe4, 0x2f, 0x86, 0xa6, 0x45, 0x7e, 0x09, 0x65, 0x45, 0x22,
	0xb7, 0x22, 0x9f, 0xb5, 0x22, 0x96, 0x93, 0x27, 0x50, 0xef, 0xe2, 0xcc, 0x5d, 0xa1, 0xbf, 0x56,
	0x4c, 0x95, 0x91, 0x05, 0x2b, 0x2b, 0xe0, 0xfd, 0xbc, 0xe7, 0xad, 0xa8, 0x3b, 0xc6, 0x18, 0x2c,
	0x67, 0xf3, 0x0c, 0xdf, 0x6c, 0xc1, 0xc3, 0x21, 0xce, 0x70, 0xcc, 0x52, 0xdb, 0xdc, 0x94, 0x28,
	0xff, 0x32, 0x80, 0x0c, 0x7c, 0x5c, 0x0c, 0xe4, 0xdb, 0x23, 0x84, 0x7d, 0x03, 0xbb, 0xa9, 0x0d,
	0x36, 0x7b, 0x36, 0x8d, 0x4a, 0x94, 0xb3, 0xdc, 0x27, 0xd4, 0xe4, 0xfc, 0x1d, 0x6b, 0xf2, 0x97,
	0x50, 0xe3, 0xb4, 0x85, 0xe7, 0xc8, 0x47, 0x7f, 0xe4, 0x9d, 0x25, 0x22, 0x54, 0xdb, 0x89, 0x19,
	0xe6, 0x7f, 0x72, 0x62, 0x22, 0x8a, 0xf1, 0x7d, 0x3a, 0xd9, 0xf0, 0x42, 0x4a, 0x6c, 0x21, 0xaa,
	0x43, 0xa7, 0xf4, 0x8f, 0xeb, 0x83, 0x02, 0xf3, 0x97, 0x98, 0xd8, 0x2c, 0x51, 0x42, 0xf2, 0x37,
	0xbd, 0x20, 0x0a, 0xfa, 0x0b, 0xe2, 0x01, 0x14, 0x5f, 0x5d, 0x2d, 0x5c, 0x5f, 0x56, 0xb8, 0x9a,
	0xa5, 0x28, 0x6e, 0xf4, 0xe9, 0xd9, 0x9f, 0x70, 0xcc, 0x7e, 0x8f, 0xe1, 0xb3, 0x28, 0x66, 0x24,
	0xa6, 0xe9, 0xed, 0x1f, 0x62, 0x9a, 0xfe, 0x0a, 0xee, 0x89, 0xae, 0xa3, 0x26, 0x2b, 0x7a, 0x3c,
	0xb5, 0xfd, 0x09, 0xaa, 0xb9, 0x6c, 0x93, 0x48, 0x7b, 0xb4, 0x95, 0x53, 0x8f, 0xb6, 0xc4, 0xf3,
	0x03, 0xf4, 0xe7, 0xc7, 0x53, 0x3e, 0x50, 0xda, 0x8e, 0x74, 0xb7, 0x4c, 0x26, 0xad, 0xed, 0x1b,
	0xa9, 0xb6, 0x6f, 0x7e, 0x34, 0x64, 0x12, 0x24, 0xfa, 0xaa, 0x7a, 0xaa, 0xca, 0xaf, 0x28, 0xf5,
	0x44, 0x09, 0x1f, 0xaa, 0x62, 0xa6, 0x3a, 0xbd, 0xf4, 0xd0, 0x57, 0x2d, 0x2c, 0x24, 0x3f, 0x35,
	0xa9, 0x74, 0x33, 0x0b, 0x69, 0x33, 0xbf, 0x81, 0xed, 0x3e, 0x9d, 0x70, 0x2b, 0xc4, 0xe5, 0xc7,
	0xe3, 0x25, 0xbf, 0xbc, 0x21, 0x23, 0xad, 0x48, 0x5e, 0xb2, 0x39, 0x42, 0x35, 0x17, 0xb1, 0x36,
	0x9f, 0x01, 0xf4, 0xe9, 0x24, 0xf4, 0xc5, 0x4f, 0x64, 0xf3, 0x48, 0x95, 0x08, 0xb5, 0xb3, 0xec,
	0x25, 0x41, 0xfb, 0xbf, 0x25, 0x28, 0x70, 0xd3, 0xc8, 0xaf, 0xa0, 0x14, 0x3a, 0x93, 0xdc, 0x0f,
	0xa1, 0x9a, 0x73, 0x9b, 0x89, 0x7b, 0x45, 0x1e, 0x7c, 0x0b, 0xbb, 0x2f, 0x1d, 0x87, 0xfb, 0x69,
	0x44, 0x55, 0xf8, 0x0f, 0x24, 0x6c, 0xc3, 0xf0, 0xd0, 0x6c, 0x6e, 0x12, 0xa9, 0x9d, 0x4e, 0x60,
	0xdf, 0xc2, 0x39, 0x5d, 0x09, 0xd7, 0xbf, 0xf6, 0xe9, 0xfc, 0xf3, 0xb6, 0xfb, 0x0a, 0x76, 0x24,
	0x3f, 0x7e, 0x07, 0xe9, 0xd1, 0x6d, 0xa6, 0x68, 0xf2, 0xa5, 0xa8, 0xb2, 0x77, 0x86, 0x3f, 0x91,
	0x0e, 0x13, 0xeb, 0x3d, 0x5d, 0xd6, 0xeb, 0x66, 0xd0, 0x5f, 0xc3, 0x0e, 0x47, 0x27, 0x5e, 0xcb,
	0x59, 0x9d, 0xcc, 0x5c, 0x47, 0xbe, 0x85, 0xfa, 0x5b, 0xdb, 0x73, 0x66, 0xc8, 0x47, 0xef, 0x30,
	0xae, 0x2a, 0x3a, 0xa9, 0x69, 0x3c, 0x3c, 0x31, 0x7a, 0x31, 0xbc, 0x80, 0xfa, 0x1b, 0x54, 0xf3,
	0xeb, 0xe9, 0x0a, 0xfd, 0x95, 0x8b, 0x97, 0xa4, 0xda, 0x52, 0xbf, 0x2d, 0x7d, 0xa0, 0xae, 0xd3,
	0xbc, 0x27, 0x55, 0xf4, 0x51, 0xb7, 0x0d, 0xb5, 0x48, 0xef, 0xf5, 0x72, 0x36, 0xbb, 0x8b, 0xce,
	0x53, 0xa8, 0xbe, 0x41, 0x16, 0x37, 0x1d, 0x5d, 0x25, 0xdb, 0xdf, 0xc8, 0x6f, 0x01, 0xe2, 0xee,
	0x48, 0xbe, 0x88, 0x00, 0x7a, 0x0b, 0x69, 0x36, 0xb2, 0x82, 0x28, 0xef, 0x6a, 0xda, 0xd4, 0x41,
	0x54, 0x2e, 0x6c, 0x1a, 0x59, 0x9a, 0x3f, 0xda, 0x28, 0x53, 0x3b, 0x75, 0xa0, 0x92, 0x18, 0x19,
	0x88, 0x3a, 0x32, 0x3b, 0x84, 0x34, 0x0f, 0x36, 0x48, 0xd4, 0x1e, 0x3d, 0xb8, 0xbf, 0xb1, 0x15,
	0x12, 0x53, 0x7d, 0x32, 0xb7, 0xf4, 0xc9, 0xa6, 0xe6, 0x2c, 0xd2, 0x81, 0x3a, 0x6f, 0x92, 0xb6,
	0x8f, 0xaf, 0xa9, 0xaf, 0x5a, 0x65, 0x68, 0x54, 0xb6, 0x7b, 0x86, 0xe1, 0xd0, 0x5b, 0xd4, 0x6b,
	0x78, 0xf8, 0x06, 0x99, 0x42, 0x76, 0x91, 0xd9, 0xee, 0x2c, 0xe8, 0xac, 0x63, 0xf9, 0x26, 0xa5,
	0x66, 0xbd, 0x15, 0xfd, 0x28, 0x18, 0x1e, 0xfb, 0x33, 0xc8, 0xf3, 0xf6, 0xb5, 0x17, 0x55, 0x8e,
	0xcd, 0x26, 0x3f, 0x83, 0xea, 0x31, 0xf5, 0xce, 0x5d, 0x7f, 0x2e, 0x2a, 0xf3, 0xe6, 0xed, 0x35,
	0x95, 0xce, 0x03, 0xd8, 0xc7, 0x65, 0xf4, 0xf3, 0xa4, 0xbd, 0x70, 0x03, 0xa1, 0x73, 0x56, 0x14,
	0xbf, 0x47, 0x3e, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x7b, 0x5d, 0x46, 0x53, 0x15,
	0x00, 0x00,
}
