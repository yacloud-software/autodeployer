// Code generated by protoc-gen-go.
// source: conradwood.net/apis/marantz/marantz.proto
// DO NOT EDIT!

/*
Package marantz is a generated protocol buffer package.

It is generated from these files:
	conradwood.net/apis/marantz/marantz.proto

It has these top-level messages:
	SendMessage
*/
package marantz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendMessage struct {
	COMMAND string `protobuf:"bytes,1,opt,name=COMMAND" json:"COMMAND,omitempty"`
}

func (m *SendMessage) Reset()                    { *m = SendMessage{} }
func (m *SendMessage) String() string            { return proto.CompactTextString(m) }
func (*SendMessage) ProtoMessage()               {}
func (*SendMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendMessage) GetCOMMAND() string {
	if m != nil {
		return m.COMMAND
	}
	return ""
}

func init() {
	proto.RegisterType((*SendMessage)(nil), "marantz.SendMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Marantz service

type MarantzClient interface {
	Off(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	On(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	Send(ctx context.Context, in *SendMessage, opts ...grpc.CallOption) (*common.Void, error)
}

type marantzClient struct {
	cc *grpc.ClientConn
}

func NewMarantzClient(cc *grpc.ClientConn) MarantzClient {
	return &marantzClient{cc}
}

func (c *marantzClient) Off(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/marantz.Marantz/Off", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marantzClient) On(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/marantz.Marantz/On", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marantzClient) Send(ctx context.Context, in *SendMessage, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/marantz.Marantz/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Marantz service

type MarantzServer interface {
	Off(context.Context, *common.Void) (*common.Void, error)
	On(context.Context, *common.Void) (*common.Void, error)
	Send(context.Context, *SendMessage) (*common.Void, error)
}

func RegisterMarantzServer(s *grpc.Server, srv MarantzServer) {
	s.RegisterService(&_Marantz_serviceDesc, srv)
}

func _Marantz_Off_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarantzServer).Off(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marantz.Marantz/Off",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarantzServer).Off(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marantz_On_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarantzServer).On(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marantz.Marantz/On",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarantzServer).On(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marantz_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarantzServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marantz.Marantz/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarantzServer).Send(ctx, req.(*SendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Marantz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marantz.Marantz",
	HandlerType: (*MarantzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Off",
			Handler:    _Marantz_Off_Handler,
		},
		{
			MethodName: "On",
			Handler:    _Marantz_On_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Marantz_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conradwood.net/apis/marantz/marantz.proto",
}

func init() { proto.RegisterFile("conradwood.net/apis/marantz/marantz.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xd2, 0x4c, 0xce, 0xcf, 0x2b,
	0x4a, 0x4c, 0x29, 0xcf, 0xcf, 0x4f, 0xd1, 0xcb, 0x4b, 0x2d, 0xd1, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6,
	0xcf, 0x4d, 0x2c, 0x4a, 0xcc, 0x2b, 0xa9, 0x82, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0xec, 0x50, 0xae, 0x94, 0x5e, 0x7a, 0x7e, 0x4e, 0x62, 0x5e, 0xba, 0x1e, 0x36, 0xad, 0xc9, 0xf9,
	0xb9, 0xb9, 0xf9, 0x79, 0x50, 0x0a, 0xa2, 0x51, 0x49, 0x9d, 0x8b, 0x3b, 0x38, 0x35, 0x2f, 0xc5,
	0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x48, 0x82, 0x8b, 0xdd, 0xd9, 0xdf, 0xd7, 0xd7, 0xd1,
	0xcf, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc6, 0x35, 0xaa, 0xe2, 0x62, 0xf7, 0x85,
	0xd8, 0x21, 0xa4, 0xc8, 0xc5, 0xec, 0x9f, 0x96, 0x26, 0xc4, 0xa3, 0x07, 0x35, 0x29, 0x2c, 0x3f,
	0x33, 0x45, 0x0a, 0x85, 0x27, 0xa4, 0xc0, 0xc5, 0xe4, 0x9f, 0x87, 0x57, 0x85, 0x16, 0x17, 0x0b,
	0xc8, 0x62, 0x21, 0x11, 0x3d, 0x98, 0x4f, 0x90, 0xdc, 0x81, 0xaa, 0xd6, 0x49, 0x96, 0x4b, 0x3a,
	0x2f, 0xb5, 0x04, 0xd9, 0x4f, 0x20, 0xff, 0xc0, 0x34, 0x26, 0xb1, 0x81, 0xbd, 0x62, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x76, 0xbb, 0xcd, 0x77, 0x30, 0x01, 0x00, 0x00,
}
