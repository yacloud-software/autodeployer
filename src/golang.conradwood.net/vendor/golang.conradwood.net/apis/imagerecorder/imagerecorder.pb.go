// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/imagerecorder/imagerecorder.proto
// DO NOT EDIT!

/*
Package imagerecorder is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/imagerecorder/imagerecorder.proto

It has these top-level messages:
	PingResponse
	RecordRequest
	RecordResponse
	Recording
*/
package imagerecorder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type RecordRequest struct {
	DurationSecs uint32 `protobuf:"varint,1,opt,name=DurationSecs" json:"DurationSecs,omitempty"`
	Stream       string `protobuf:"bytes,2,opt,name=Stream" json:"Stream,omitempty"`
}

func (m *RecordRequest) Reset()                    { *m = RecordRequest{} }
func (m *RecordRequest) String() string            { return proto.CompactTextString(m) }
func (*RecordRequest) ProtoMessage()               {}
func (*RecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecordRequest) GetDurationSecs() uint32 {
	if m != nil {
		return m.DurationSecs
	}
	return 0
}

func (m *RecordRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

type RecordResponse struct {
	RecordingID string `protobuf:"bytes,1,opt,name=RecordingID" json:"RecordingID,omitempty"`
}

func (m *RecordResponse) Reset()                    { *m = RecordResponse{} }
func (m *RecordResponse) String() string            { return proto.CompactTextString(m) }
func (*RecordResponse) ProtoMessage()               {}
func (*RecordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RecordResponse) GetRecordingID() string {
	if m != nil {
		return m.RecordingID
	}
	return ""
}

type Recording struct {
	ID          uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Started     uint32 `protobuf:"varint,2,opt,name=Started" json:"Started,omitempty"`
	Finished    uint32 `protobuf:"varint,3,opt,name=Finished" json:"Finished,omitempty"`
	RecordingID string `protobuf:"bytes,4,opt,name=RecordingID" json:"RecordingID,omitempty"`
	Stream      string `protobuf:"bytes,5,opt,name=Stream" json:"Stream,omitempty"`
}

func (m *Recording) Reset()                    { *m = Recording{} }
func (m *Recording) String() string            { return proto.CompactTextString(m) }
func (*Recording) ProtoMessage()               {}
func (*Recording) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Recording) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Recording) GetStarted() uint32 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Recording) GetFinished() uint32 {
	if m != nil {
		return m.Finished
	}
	return 0
}

func (m *Recording) GetRecordingID() string {
	if m != nil {
		return m.RecordingID
	}
	return ""
}

func (m *Recording) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "imagerecorder.PingResponse")
	proto.RegisterType((*RecordRequest)(nil), "imagerecorder.RecordRequest")
	proto.RegisterType((*RecordResponse)(nil), "imagerecorder.RecordResponse")
	proto.RegisterType((*Recording)(nil), "imagerecorder.Recording")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImageRecorder service

type ImageRecorderClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// start recording an image
	RecordStream(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type imageRecorderClient struct {
	cc *grpc.ClientConn
}

func NewImageRecorderClient(cc *grpc.ClientConn) ImageRecorderClient {
	return &imageRecorderClient{cc}
}

func (c *imageRecorderClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/imagerecorder.ImageRecorder/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRecorderClient) RecordStream(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := grpc.Invoke(ctx, "/imagerecorder.ImageRecorder/RecordStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageRecorder service

type ImageRecorderServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// start recording an image
	RecordStream(context.Context, *RecordRequest) (*RecordResponse, error)
}

func RegisterImageRecorderServer(s *grpc.Server, srv ImageRecorderServer) {
	s.RegisterService(&_ImageRecorder_serviceDesc, srv)
}

func _ImageRecorder_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecorderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagerecorder.ImageRecorder/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecorderServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRecorder_RecordStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecorderServer).RecordStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagerecorder.ImageRecorder/RecordStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecorderServer).RecordStream(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageRecorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imagerecorder.ImageRecorder",
	HandlerType: (*ImageRecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ImageRecorder_Ping_Handler,
		},
		{
			MethodName: "RecordStream",
			Handler:    _ImageRecorder_RecordStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/imagerecorder/imagerecorder.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/imagerecorder/imagerecorder.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x25, 0xfd, 0xf2, 0xd5, 0x76, 0x4c, 0x7a, 0xd8, 0x83, 0xc4, 0xa8, 0x50, 0xe3, 0x45, 0x7a,
	0x48, 0xb1, 0x5e, 0x3d, 0x95, 0x22, 0x94, 0x5e, 0x64, 0x0b, 0xde, 0xd7, 0x64, 0x88, 0x0b, 0x66,
	0xa7, 0x6e, 0xb6, 0x78, 0xf7, 0x0f, 0x78, 0xf2, 0x4f, 0xf8, 0x2b, 0x25, 0xc9, 0x36, 0x64, 0x05,
	0x3d, 0x25, 0x6f, 0x76, 0xde, 0x7b, 0xcc, 0x9b, 0x81, 0xbb, 0x82, 0x5e, 0x84, 0x2a, 0xd2, 0x8c,
	0x94, 0x16, 0xf9, 0x1b, 0x51, 0x9e, 0x2a, 0x34, 0x73, 0xb1, 0x93, 0xd5, 0x5c, 0x96, 0xa2, 0x40,
	0x8d, 0x19, 0xe9, 0x1c, 0xb5, 0x8b, 0xd2, 0x9d, 0x26, 0x43, 0x2c, 0x74, 0x8a, 0x71, 0xfa, 0x87,
	0x58, 0x46, 0x65, 0x49, 0xca, 0x7e, 0x5a, 0x7a, 0x32, 0x83, 0xe0, 0x41, 0xaa, 0x82, 0x63, 0xb5,
	0x23, 0x55, 0x21, 0x8b, 0x61, 0x74, 0xf8, 0x8f, 0xbc, 0xa9, 0x77, 0x3d, 0xe6, 0x1d, 0x4e, 0x36,
	0x10, 0xf2, 0xc6, 0x87, 0xe3, 0xeb, 0x1e, 0x2b, 0xc3, 0x12, 0x08, 0x56, 0x7b, 0x2d, 0x8c, 0x24,
	0xb5, 0xc5, 0xac, 0x6a, 0x08, 0x21, 0x77, 0x6a, 0xec, 0x04, 0x86, 0x5b, 0xa3, 0x51, 0x94, 0xd1,
	0xa0, 0x91, 0xb3, 0x28, 0x59, 0xc0, 0xe4, 0x20, 0x66, 0xad, 0xa7, 0x70, 0xdc, 0x56, 0xa4, 0x2a,
	0xd6, 0x2b, 0xeb, 0xde, 0x2f, 0x25, 0x9f, 0x1e, 0x8c, 0x3b, 0xcc, 0x26, 0x30, 0xb0, 0x6d, 0x3e,
	0x1f, 0xac, 0x57, 0x2c, 0x82, 0xa3, 0xad, 0x11, 0xda, 0x60, 0xde, 0x58, 0x85, 0xfc, 0x00, 0xeb,
	0xa1, 0xee, 0xa5, 0x92, 0xd5, 0x33, 0xe6, 0xd1, 0xbf, 0xe6, 0xa9, 0xc3, 0x6c, 0xe6, 0xba, 0xfa,
	0xb5, 0xeb, 0x72, 0xf4, 0xf5, 0x7e, 0xea, 0x1b, 0xbd, 0x47, 0xc7, 0xbf, 0x37, 0xcb, 0xff, 0xfe,
	0x2c, 0x8b, 0x0f, 0x0f, 0xc2, 0x75, 0xbd, 0x06, 0x6e, 0xd7, 0xc0, 0x6e, 0xc0, 0xaf, 0x63, 0x65,
	0x41, 0x6a, 0xd3, 0x7e, 0x24, 0x99, 0xc7, 0x67, 0xa9, 0xbb, 0x41, 0x27, 0xf9, 0x0d, 0x04, 0x2d,
	0xbd, 0x15, 0x65, 0xe7, 0x3f, 0x9a, 0x9d, 0xe8, 0xe3, 0x8b, 0x5f, 0x5e, 0x5b, 0xb1, 0xe5, 0x15,
	0x5c, 0x2a, 0x34, 0xfd, 0x2b, 0xa8, 0x2f, 0xc0, 0xe5, 0x3c, 0x0d, 0x9b, 0x13, 0xb8, 0xfd, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x50, 0xdf, 0xde, 0x45, 0x81, 0x02, 0x00, 0x00,
}
