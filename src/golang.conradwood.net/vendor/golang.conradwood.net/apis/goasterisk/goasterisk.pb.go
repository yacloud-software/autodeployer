// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/goasterisk/goasterisk.proto
// DO NOT EDIT!

/*
Package goasterisk is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/goasterisk/goasterisk.proto

It has these top-level messages:
	IP
	Result
	Calllog
	RawRecording
	Contact
	ContactCategory
	RecordingNotification
	CallLogRequest
	CallLogResponse
	PlaceCallRequest
	FindContactRequest
	ContactList
	DialThroughResponse
	PeerStatusList
	Peer
	RegistrationList
	Registration
	Number
	ResolvedNumber
	Route
	FindRouteRequest
	CallWithExtensionRequest
*/
package goasterisk

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IP struct {
	IP string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
}

func (m *IP) Reset()                    { *m = IP{} }
func (m *IP) String() string            { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()               {}
func (*IP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IP) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type Result struct {
	Result bool `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// a recent call record
type Calllog struct {
	ID                uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AccountCode       string `protobuf:"bytes,2,opt,name=AccountCode" json:"AccountCode,omitempty"`
	Started           uint32 `protobuf:"varint,3,opt,name=Started" json:"Started,omitempty"`
	Finished          uint32 `protobuf:"varint,4,opt,name=Finished" json:"Finished,omitempty"`
	CallerName        string `protobuf:"bytes,5,opt,name=CallerName" json:"CallerName,omitempty"`
	CallerNumber      string `protobuf:"bytes,6,opt,name=CallerNumber" json:"CallerNumber,omitempty"`
	CalleeName        string `protobuf:"bytes,7,opt,name=CalleeName" json:"CalleeName,omitempty"`
	CalleeNumber      string `protobuf:"bytes,8,opt,name=CalleeNumber" json:"CalleeNumber,omitempty"`
	Direction         bool   `protobuf:"varint,9,opt,name=Direction" json:"Direction,omitempty"`
	DstChannel        string `protobuf:"bytes,10,opt,name=DstChannel" json:"DstChannel,omitempty"`
	SrcChannel        string `protobuf:"bytes,11,opt,name=SrcChannel" json:"SrcChannel,omitempty"`
	Line              string `protobuf:"bytes,12,opt,name=Line" json:"Line,omitempty"`
	UniqueID          string `protobuf:"bytes,13,opt,name=UniqueID" json:"UniqueID,omitempty"`
	Voicemail         bool   `protobuf:"varint,14,opt,name=Voicemail" json:"Voicemail,omitempty"`
	RecordingFilename string `protobuf:"bytes,15,opt,name=RecordingFilename" json:"RecordingFilename,omitempty"`
}

func (m *Calllog) Reset()                    { *m = Calllog{} }
func (m *Calllog) String() string            { return proto.CompactTextString(m) }
func (*Calllog) ProtoMessage()               {}
func (*Calllog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Calllog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Calllog) GetAccountCode() string {
	if m != nil {
		return m.AccountCode
	}
	return ""
}

func (m *Calllog) GetStarted() uint32 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Calllog) GetFinished() uint32 {
	if m != nil {
		return m.Finished
	}
	return 0
}

func (m *Calllog) GetCallerName() string {
	if m != nil {
		return m.CallerName
	}
	return ""
}

func (m *Calllog) GetCallerNumber() string {
	if m != nil {
		return m.CallerNumber
	}
	return ""
}

func (m *Calllog) GetCalleeName() string {
	if m != nil {
		return m.CalleeName
	}
	return ""
}

func (m *Calllog) GetCalleeNumber() string {
	if m != nil {
		return m.CalleeNumber
	}
	return ""
}

func (m *Calllog) GetDirection() bool {
	if m != nil {
		return m.Direction
	}
	return false
}

func (m *Calllog) GetDstChannel() string {
	if m != nil {
		return m.DstChannel
	}
	return ""
}

func (m *Calllog) GetSrcChannel() string {
	if m != nil {
		return m.SrcChannel
	}
	return ""
}

func (m *Calllog) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *Calllog) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *Calllog) GetVoicemail() bool {
	if m != nil {
		return m.Voicemail
	}
	return false
}

func (m *Calllog) GetRecordingFilename() string {
	if m != nil {
		return m.RecordingFilename
	}
	return ""
}

// a yet to be processed raw wav recording
type RawRecording struct {
	ID          uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	RawName     string `protobuf:"bytes,2,opt,name=RawName" json:"RawName,omitempty"`
	LastAttempt uint32 `protobuf:"varint,3,opt,name=LastAttempt" json:"LastAttempt,omitempty"`
	CalllogID   uint64 `protobuf:"varint,4,opt,name=CalllogID" json:"CalllogID,omitempty"`
	Created     uint32 `protobuf:"varint,5,opt,name=Created" json:"Created,omitempty"`
}

func (m *RawRecording) Reset()                    { *m = RawRecording{} }
func (m *RawRecording) String() string            { return proto.CompactTextString(m) }
func (*RawRecording) ProtoMessage()               {}
func (*RawRecording) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RawRecording) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RawRecording) GetRawName() string {
	if m != nil {
		return m.RawName
	}
	return ""
}

func (m *RawRecording) GetLastAttempt() uint32 {
	if m != nil {
		return m.LastAttempt
	}
	return 0
}

func (m *RawRecording) GetCalllogID() uint64 {
	if m != nil {
		return m.CalllogID
	}
	return 0
}

func (m *RawRecording) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

type Contact struct {
	ID                uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Number            string `protobuf:"bytes,3,opt,name=Number" json:"Number,omitempty"`
	ContactCategoryID uint64 `protobuf:"varint,4,opt,name=ContactCategoryID" json:"ContactCategoryID,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Contact) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contact) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Contact) GetContactCategoryID() uint64 {
	if m != nil {
		return m.ContactCategoryID
	}
	return 0
}

type ContactCategory struct {
	ID   uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *ContactCategory) Reset()                    { *m = ContactCategory{} }
func (m *ContactCategory) String() string            { return proto.CompactTextString(m) }
func (*ContactCategory) ProtoMessage()               {}
func (*ContactCategory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ContactCategory) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContactCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RecordingNotification struct {
	CalllogID uint64 `protobuf:"varint,1,opt,name=CalllogID" json:"CalllogID,omitempty"`
	AuthToken string `protobuf:"bytes,2,opt,name=AuthToken" json:"AuthToken,omitempty"`
	Filename  string `protobuf:"bytes,3,opt,name=Filename" json:"Filename,omitempty"`
}

func (m *RecordingNotification) Reset()                    { *m = RecordingNotification{} }
func (m *RecordingNotification) String() string            { return proto.CompactTextString(m) }
func (*RecordingNotification) ProtoMessage()               {}
func (*RecordingNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RecordingNotification) GetCalllogID() uint64 {
	if m != nil {
		return m.CalllogID
	}
	return 0
}

func (m *RecordingNotification) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *RecordingNotification) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type CallLogRequest struct {
	Start uint32 `protobuf:"varint,1,opt,name=Start" json:"Start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=End" json:"End,omitempty"`
}

func (m *CallLogRequest) Reset()                    { *m = CallLogRequest{} }
func (m *CallLogRequest) String() string            { return proto.CompactTextString(m) }
func (*CallLogRequest) ProtoMessage()               {}
func (*CallLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CallLogRequest) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CallLogRequest) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

type CallLogResponse struct {
	Logs []*Calllog `protobuf:"bytes,1,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *CallLogResponse) Reset()                    { *m = CallLogResponse{} }
func (m *CallLogResponse) String() string            { return proto.CompactTextString(m) }
func (*CallLogResponse) ProtoMessage()               {}
func (*CallLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CallLogResponse) GetLogs() []*Calllog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type PlaceCallRequest struct {
	ContactID uint64 `protobuf:"varint,1,opt,name=ContactID" json:"ContactID,omitempty"`
	Number    string `protobuf:"bytes,2,opt,name=Number" json:"Number,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *PlaceCallRequest) Reset()                    { *m = PlaceCallRequest{} }
func (m *PlaceCallRequest) String() string            { return proto.CompactTextString(m) }
func (*PlaceCallRequest) ProtoMessage()               {}
func (*PlaceCallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PlaceCallRequest) GetContactID() uint64 {
	if m != nil {
		return m.ContactID
	}
	return 0
}

func (m *PlaceCallRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *PlaceCallRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FindContactRequest struct {
	Pattern string `protobuf:"bytes,1,opt,name=Pattern" json:"Pattern,omitempty"`
}

func (m *FindContactRequest) Reset()                    { *m = FindContactRequest{} }
func (m *FindContactRequest) String() string            { return proto.CompactTextString(m) }
func (*FindContactRequest) ProtoMessage()               {}
func (*FindContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FindContactRequest) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type ContactList struct {
	Contacts []*Contact `protobuf:"bytes,1,rep,name=Contacts" json:"Contacts,omitempty"`
}

func (m *ContactList) Reset()                    { *m = ContactList{} }
func (m *ContactList) String() string            { return proto.CompactTextString(m) }
func (*ContactList) ProtoMessage()               {}
func (*ContactList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ContactList) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

type DialThroughResponse struct {
	Number           string `protobuf:"bytes,1,opt,name=Number" json:"Number,omitempty"`
	NormalizedNumber string `protobuf:"bytes,2,opt,name=NormalizedNumber" json:"NormalizedNumber,omitempty"`
}

func (m *DialThroughResponse) Reset()                    { *m = DialThroughResponse{} }
func (m *DialThroughResponse) String() string            { return proto.CompactTextString(m) }
func (*DialThroughResponse) ProtoMessage()               {}
func (*DialThroughResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DialThroughResponse) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *DialThroughResponse) GetNormalizedNumber() string {
	if m != nil {
		return m.NormalizedNumber
	}
	return ""
}

type PeerStatusList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=Peers" json:"Peers,omitempty"`
}

func (m *PeerStatusList) Reset()                    { *m = PeerStatusList{} }
func (m *PeerStatusList) String() string            { return proto.CompactTextString(m) }
func (*PeerStatusList) ProtoMessage()               {}
func (*PeerStatusList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PeerStatusList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	Name     string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	LastSeen uint32 `protobuf:"varint,2,opt,name=LastSeen" json:"LastSeen,omitempty"`
	LastIP   string `protobuf:"bytes,3,opt,name=LastIP" json:"LastIP,omitempty"`
	Online   bool   `protobuf:"varint,4,opt,name=Online" json:"Online,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetLastSeen() uint32 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *Peer) GetLastIP() string {
	if m != nil {
		return m.LastIP
	}
	return ""
}

func (m *Peer) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type RegistrationList struct {
	Registrations []*Registration `protobuf:"bytes,1,rep,name=Registrations" json:"Registrations,omitempty"`
}

func (m *RegistrationList) Reset()                    { *m = RegistrationList{} }
func (m *RegistrationList) String() string            { return proto.CompactTextString(m) }
func (*RegistrationList) ProtoMessage()               {}
func (*RegistrationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RegistrationList) GetRegistrations() []*Registration {
	if m != nil {
		return m.Registrations
	}
	return nil
}

type Registration struct {
	Target     string `protobuf:"bytes,1,opt,name=Target" json:"Target,omitempty"`
	LastSeen   uint32 `protobuf:"varint,2,opt,name=LastSeen" json:"LastSeen,omitempty"`
	Registered bool   `protobuf:"varint,3,opt,name=Registered" json:"Registered,omitempty"`
}

func (m *Registration) Reset()                    { *m = Registration{} }
func (m *Registration) String() string            { return proto.CompactTextString(m) }
func (*Registration) ProtoMessage()               {}
func (*Registration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Registration) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Registration) GetLastSeen() uint32 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *Registration) GetRegistered() bool {
	if m != nil {
		return m.Registered
	}
	return false
}

type Number struct {
	Number string `protobuf:"bytes,1,opt,name=Number" json:"Number,omitempty"`
}

func (m *Number) Reset()                    { *m = Number{} }
func (m *Number) String() string            { return proto.CompactTextString(m) }
func (*Number) ProtoMessage()               {}
func (*Number) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Number) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type ResolvedNumber struct {
	Resolved bool     `protobuf:"varint,1,opt,name=Resolved" json:"Resolved,omitempty"`
	Contact  *Contact `protobuf:"bytes,2,opt,name=Contact" json:"Contact,omitempty"`
}

func (m *ResolvedNumber) Reset()                    { *m = ResolvedNumber{} }
func (m *ResolvedNumber) String() string            { return proto.CompactTextString(m) }
func (*ResolvedNumber) ProtoMessage()               {}
func (*ResolvedNumber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ResolvedNumber) GetResolved() bool {
	if m != nil {
		return m.Resolved
	}
	return false
}

func (m *ResolvedNumber) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type Route struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=Prefix" json:"Prefix,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=Provider" json:"Provider,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Route) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Route) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Route) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type FindRouteRequest struct {
	// exclude these providers
	Exclude []string `protobuf:"bytes,1,rep,name=Exclude" json:"Exclude,omitempty"`
	Number  string   `protobuf:"bytes,2,opt,name=Number" json:"Number,omitempty"`
}

func (m *FindRouteRequest) Reset()                    { *m = FindRouteRequest{} }
func (m *FindRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*FindRouteRequest) ProtoMessage()               {}
func (*FindRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FindRouteRequest) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *FindRouteRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type CallWithExtensionRequest struct {
	Number    string `protobuf:"bytes,1,opt,name=Number" json:"Number,omitempty"`
	Context   string `protobuf:"bytes,2,opt,name=Context" json:"Context,omitempty"`
	Extension string `protobuf:"bytes,3,opt,name=Extension" json:"Extension,omitempty"`
}

func (m *CallWithExtensionRequest) Reset()                    { *m = CallWithExtensionRequest{} }
func (m *CallWithExtensionRequest) String() string            { return proto.CompactTextString(m) }
func (*CallWithExtensionRequest) ProtoMessage()               {}
func (*CallWithExtensionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CallWithExtensionRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *CallWithExtensionRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CallWithExtensionRequest) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func init() {
	proto.RegisterType((*IP)(nil), "goasterisk.IP")
	proto.RegisterType((*Result)(nil), "goasterisk.Result")
	proto.RegisterType((*Calllog)(nil), "goasterisk.Calllog")
	proto.RegisterType((*RawRecording)(nil), "goasterisk.RawRecording")
	proto.RegisterType((*Contact)(nil), "goasterisk.Contact")
	proto.RegisterType((*ContactCategory)(nil), "goasterisk.ContactCategory")
	proto.RegisterType((*RecordingNotification)(nil), "goasterisk.RecordingNotification")
	proto.RegisterType((*CallLogRequest)(nil), "goasterisk.CallLogRequest")
	proto.RegisterType((*CallLogResponse)(nil), "goasterisk.CallLogResponse")
	proto.RegisterType((*PlaceCallRequest)(nil), "goasterisk.PlaceCallRequest")
	proto.RegisterType((*FindContactRequest)(nil), "goasterisk.FindContactRequest")
	proto.RegisterType((*ContactList)(nil), "goasterisk.ContactList")
	proto.RegisterType((*DialThroughResponse)(nil), "goasterisk.DialThroughResponse")
	proto.RegisterType((*PeerStatusList)(nil), "goasterisk.PeerStatusList")
	proto.RegisterType((*Peer)(nil), "goasterisk.Peer")
	proto.RegisterType((*RegistrationList)(nil), "goasterisk.RegistrationList")
	proto.RegisterType((*Registration)(nil), "goasterisk.Registration")
	proto.RegisterType((*Number)(nil), "goasterisk.Number")
	proto.RegisterType((*ResolvedNumber)(nil), "goasterisk.ResolvedNumber")
	proto.RegisterType((*Route)(nil), "goasterisk.Route")
	proto.RegisterType((*FindRouteRequest)(nil), "goasterisk.FindRouteRequest")
	proto.RegisterType((*CallWithExtensionRequest)(nil), "goasterisk.CallWithExtensionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoAsteriskService service

type GoAsteriskServiceClient interface {
	// get all currently (and recent past) registered peers
	PeerStatus(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PeerStatusList, error)
	// apply all known IPs to iptables
	Apply(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// ban an ip from accessing asterisk
	Ban(ctx context.Context, in *IP, opts ...grpc.CallOption) (*common.Void, error)
	// allow an ip to access asterisk
	Unban(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Result, error)
	// tell server that a recording is finished
	RecordingDone(ctx context.Context, in *RecordingNotification, opts ...grpc.CallOption) (*common.Void, error)
	// get most recent calllogs
	GetCalls(ctx context.Context, in *CallLogRequest, opts ...grpc.CallOption) (*CallLogResponse, error)
	// dial a contact or number
	PlaceCall(ctx context.Context, in *PlaceCallRequest, opts ...grpc.CallOption) (*common.Void, error)
	// search for contacts...
	FindContact(ctx context.Context, in *FindContactRequest, opts ...grpc.CallOption) (*ContactList, error)
	// get all contacts
	GetPhonebook(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ContactList, error)
	// update or create (returns the contact, possibly with the ID modified
	UpdateOrCreate(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	// download a recording...
	StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (GoAsteriskService_StreamHTTPClient, error)
	// initiate a "dialthrough" (which means, next one who dials number in DialThroughResponse will be connected to contact)
	Dialthrough(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*DialThroughResponse, error)
	// resolve name to number
	ResolveNumber(ctx context.Context, in *Number, opts ...grpc.CallOption) (*ResolvedNumber, error)
	// add a route
	AddRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*common.Void, error)
	// remove a route
	RemoveRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*common.Void, error)
	// find a route for a number
	FindRoute(ctx context.Context, in *FindRouteRequest, opts ...grpc.CallOption) (*Route, error)
	// get a registrations
	GetRegistrations(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*RegistrationList, error)
	// trigger testcalls
	TriggerTestCalls(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// "normalize" a number (so it comes back like +44207...)
	NormalizeNumber(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Number, error)
	// make a call to a number and dump the caller to a certain extension
	CallWithExtension(ctx context.Context, in *CallWithExtensionRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type goAsteriskServiceClient struct {
	cc *grpc.ClientConn
}

func NewGoAsteriskServiceClient(cc *grpc.ClientConn) GoAsteriskServiceClient {
	return &goAsteriskServiceClient{cc}
}

func (c *goAsteriskServiceClient) PeerStatus(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PeerStatusList, error) {
	out := new(PeerStatusList)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/PeerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) Apply(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) Ban(ctx context.Context, in *IP, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/Ban", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) Unban(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/Unban", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) RecordingDone(ctx context.Context, in *RecordingNotification, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/RecordingDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) GetCalls(ctx context.Context, in *CallLogRequest, opts ...grpc.CallOption) (*CallLogResponse, error) {
	out := new(CallLogResponse)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/GetCalls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) PlaceCall(ctx context.Context, in *PlaceCallRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/PlaceCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) FindContact(ctx context.Context, in *FindContactRequest, opts ...grpc.CallOption) (*ContactList, error) {
	out := new(ContactList)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/FindContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) GetPhonebook(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ContactList, error) {
	out := new(ContactList)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/GetPhonebook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) UpdateOrCreate(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/UpdateOrCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (GoAsteriskService_StreamHTTPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GoAsteriskService_serviceDesc.Streams[0], c.cc, "/goasterisk.GoAsteriskService/StreamHTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &goAsteriskServiceStreamHTTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoAsteriskService_StreamHTTPClient interface {
	Recv() (*h2gproxy.StreamDataResponse, error)
	grpc.ClientStream
}

type goAsteriskServiceStreamHTTPClient struct {
	grpc.ClientStream
}

func (x *goAsteriskServiceStreamHTTPClient) Recv() (*h2gproxy.StreamDataResponse, error) {
	m := new(h2gproxy.StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goAsteriskServiceClient) Dialthrough(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*DialThroughResponse, error) {
	out := new(DialThroughResponse)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/Dialthrough", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) ResolveNumber(ctx context.Context, in *Number, opts ...grpc.CallOption) (*ResolvedNumber, error) {
	out := new(ResolvedNumber)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/ResolveNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) AddRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/AddRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) RemoveRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/RemoveRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) FindRoute(ctx context.Context, in *FindRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/FindRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) GetRegistrations(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*RegistrationList, error) {
	out := new(RegistrationList)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/GetRegistrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) TriggerTestCalls(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/TriggerTestCalls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) NormalizeNumber(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/NormalizeNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAsteriskServiceClient) CallWithExtension(ctx context.Context, in *CallWithExtensionRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goasterisk.GoAsteriskService/CallWithExtension", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoAsteriskService service

type GoAsteriskServiceServer interface {
	// get all currently (and recent past) registered peers
	PeerStatus(context.Context, *common.Void) (*PeerStatusList, error)
	// apply all known IPs to iptables
	Apply(context.Context, *common.Void) (*common.Void, error)
	// ban an ip from accessing asterisk
	Ban(context.Context, *IP) (*common.Void, error)
	// allow an ip to access asterisk
	Unban(context.Context, *IP) (*Result, error)
	// tell server that a recording is finished
	RecordingDone(context.Context, *RecordingNotification) (*common.Void, error)
	// get most recent calllogs
	GetCalls(context.Context, *CallLogRequest) (*CallLogResponse, error)
	// dial a contact or number
	PlaceCall(context.Context, *PlaceCallRequest) (*common.Void, error)
	// search for contacts...
	FindContact(context.Context, *FindContactRequest) (*ContactList, error)
	// get all contacts
	GetPhonebook(context.Context, *common.Void) (*ContactList, error)
	// update or create (returns the contact, possibly with the ID modified
	UpdateOrCreate(context.Context, *Contact) (*Contact, error)
	// download a recording...
	StreamHTTP(*h2gproxy.StreamRequest, GoAsteriskService_StreamHTTPServer) error
	// initiate a "dialthrough" (which means, next one who dials number in DialThroughResponse will be connected to contact)
	Dialthrough(context.Context, *Contact) (*DialThroughResponse, error)
	// resolve name to number
	ResolveNumber(context.Context, *Number) (*ResolvedNumber, error)
	// add a route
	AddRoute(context.Context, *Route) (*common.Void, error)
	// remove a route
	RemoveRoute(context.Context, *Route) (*common.Void, error)
	// find a route for a number
	FindRoute(context.Context, *FindRouteRequest) (*Route, error)
	// get a registrations
	GetRegistrations(context.Context, *common.Void) (*RegistrationList, error)
	// trigger testcalls
	TriggerTestCalls(context.Context, *common.Void) (*common.Void, error)
	// "normalize" a number (so it comes back like +44207...)
	NormalizeNumber(context.Context, *Number) (*Number, error)
	// make a call to a number and dump the caller to a certain extension
	CallWithExtension(context.Context, *CallWithExtensionRequest) (*common.Void, error)
}

func RegisterGoAsteriskServiceServer(s *grpc.Server, srv GoAsteriskServiceServer) {
	s.RegisterService(&_GoAsteriskService_serviceDesc, srv)
}

func _GoAsteriskService_PeerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).PeerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/PeerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).PeerStatus(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).Apply(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).Ban(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/Unban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).Unban(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_RecordingDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordingNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).RecordingDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/RecordingDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).RecordingDone(ctx, req.(*RecordingNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_GetCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).GetCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/GetCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).GetCalls(ctx, req.(*CallLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_PlaceCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).PlaceCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/PlaceCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).PlaceCall(ctx, req.(*PlaceCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_FindContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).FindContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/FindContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).FindContact(ctx, req.(*FindContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_GetPhonebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).GetPhonebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/GetPhonebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).GetPhonebook(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_UpdateOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).UpdateOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/UpdateOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).UpdateOrCreate(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_StreamHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(h2gproxy.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoAsteriskServiceServer).StreamHTTP(m, &goAsteriskServiceStreamHTTPServer{stream})
}

type GoAsteriskService_StreamHTTPServer interface {
	Send(*h2gproxy.StreamDataResponse) error
	grpc.ServerStream
}

type goAsteriskServiceStreamHTTPServer struct {
	grpc.ServerStream
}

func (x *goAsteriskServiceStreamHTTPServer) Send(m *h2gproxy.StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GoAsteriskService_Dialthrough_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).Dialthrough(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/Dialthrough",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).Dialthrough(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_ResolveNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).ResolveNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/ResolveNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).ResolveNumber(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).AddRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_RemoveRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).RemoveRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/RemoveRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).RemoveRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_FindRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).FindRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/FindRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).FindRoute(ctx, req.(*FindRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_GetRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).GetRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/GetRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).GetRegistrations(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_TriggerTestCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).TriggerTestCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/TriggerTestCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).TriggerTestCalls(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_NormalizeNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).NormalizeNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/NormalizeNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).NormalizeNumber(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAsteriskService_CallWithExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallWithExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAsteriskServiceServer).CallWithExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goasterisk.GoAsteriskService/CallWithExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAsteriskServiceServer).CallWithExtension(ctx, req.(*CallWithExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoAsteriskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goasterisk.GoAsteriskService",
	HandlerType: (*GoAsteriskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerStatus",
			Handler:    _GoAsteriskService_PeerStatus_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _GoAsteriskService_Apply_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _GoAsteriskService_Ban_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _GoAsteriskService_Unban_Handler,
		},
		{
			MethodName: "RecordingDone",
			Handler:    _GoAsteriskService_RecordingDone_Handler,
		},
		{
			MethodName: "GetCalls",
			Handler:    _GoAsteriskService_GetCalls_Handler,
		},
		{
			MethodName: "PlaceCall",
			Handler:    _GoAsteriskService_PlaceCall_Handler,
		},
		{
			MethodName: "FindContact",
			Handler:    _GoAsteriskService_FindContact_Handler,
		},
		{
			MethodName: "GetPhonebook",
			Handler:    _GoAsteriskService_GetPhonebook_Handler,
		},
		{
			MethodName: "UpdateOrCreate",
			Handler:    _GoAsteriskService_UpdateOrCreate_Handler,
		},
		{
			MethodName: "Dialthrough",
			Handler:    _GoAsteriskService_Dialthrough_Handler,
		},
		{
			MethodName: "ResolveNumber",
			Handler:    _GoAsteriskService_ResolveNumber_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _GoAsteriskService_AddRoute_Handler,
		},
		{
			MethodName: "RemoveRoute",
			Handler:    _GoAsteriskService_RemoveRoute_Handler,
		},
		{
			MethodName: "FindRoute",
			Handler:    _GoAsteriskService_FindRoute_Handler,
		},
		{
			MethodName: "GetRegistrations",
			Handler:    _GoAsteriskService_GetRegistrations_Handler,
		},
		{
			MethodName: "TriggerTestCalls",
			Handler:    _GoAsteriskService_TriggerTestCalls_Handler,
		},
		{
			MethodName: "NormalizeNumber",
			Handler:    _GoAsteriskService_NormalizeNumber_Handler,
		},
		{
			MethodName: "CallWithExtension",
			Handler:    _GoAsteriskService_CallWithExtension_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHTTP",
			Handler:       _GoAsteriskService_StreamHTTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/goasterisk/goasterisk.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/goasterisk/goasterisk.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x57, 0xef, 0x72, 0x1b, 0x35,
	0x10, 0x1f, 0xc7, 0x76, 0x62, 0xaf, 0xf3, 0xc7, 0x51, 0x4b, 0x7b, 0x63, 0x32, 0x25, 0x5c, 0x81,
	0x76, 0x28, 0xb8, 0x4c, 0x98, 0x16, 0xe8, 0x30, 0x85, 0xd4, 0x4e, 0x82, 0x87, 0x4c, 0xeb, 0xb9,
	0xb8, 0x65, 0x18, 0xf8, 0xa2, 0xf8, 0xb6, 0x67, 0xd1, 0xb3, 0xe4, 0xea, 0xe4, 0x34, 0xe5, 0x31,
	0xf8, 0xc6, 0x73, 0xf1, 0x42, 0x8c, 0x74, 0xba, 0xb3, 0xee, 0xec, 0x64, 0xfa, 0x25, 0xd1, 0xfe,
	0x76, 0xb5, 0xbb, 0xda, 0x5d, 0xfd, 0xe4, 0x83, 0xc7, 0x91, 0x88, 0x29, 0x8f, 0xba, 0x63, 0xc1,
	0x25, 0x0d, 0xdf, 0x09, 0x11, 0x76, 0x39, 0xaa, 0x87, 0x74, 0xc6, 0x92, 0x87, 0x91, 0xa0, 0x89,
	0x42, 0xc9, 0x92, 0x37, 0xce, 0xb2, 0x3b, 0x93, 0x42, 0x09, 0x02, 0x0b, 0xa4, 0xd3, 0xbd, 0xc6,
	0xc7, 0x58, 0x4c, 0xa7, 0x82, 0xdb, 0x7f, 0xe9, 0xde, 0xce, 0xc1, 0x35, 0xf6, 0x93, 0x83, 0x68,
	0x26, 0xc5, 0xe5, 0xfb, 0x7c, 0x91, 0xee, 0xf1, 0x6f, 0xc2, 0xda, 0x60, 0x48, 0xb6, 0xf5, 0x5f,
	0xaf, 0xb2, 0x5f, 0xb9, 0xdf, 0x0c, 0xd6, 0x06, 0x43, 0x7f, 0x1f, 0xd6, 0x03, 0x4c, 0xe6, 0xb1,
	0x22, 0xb7, 0xb2, 0x95, 0xd1, 0x36, 0x02, 0x2b, 0xf9, 0xff, 0x55, 0x61, 0xa3, 0x47, 0xe3, 0x38,
	0x16, 0x91, 0xd9, 0xdd, 0x37, 0xfa, 0x5a, 0xb0, 0x36, 0xe8, 0x93, 0x7d, 0x68, 0x1d, 0x8e, 0xc7,
	0x62, 0xce, 0x55, 0x4f, 0x84, 0xe8, 0xad, 0x19, 0xb7, 0x2e, 0x44, 0x3c, 0xd8, 0x38, 0x53, 0x54,
	0x2a, 0x0c, 0xbd, 0xea, 0x7e, 0xe5, 0xfe, 0x56, 0x90, 0x89, 0xa4, 0x03, 0x8d, 0x63, 0xc6, 0x59,
	0x32, 0xc1, 0xd0, 0xab, 0x19, 0x55, 0x2e, 0x93, 0x3b, 0x00, 0x3a, 0x24, 0xca, 0xe7, 0x74, 0x8a,
	0x5e, 0xdd, 0xb8, 0x75, 0x10, 0xe2, 0xc3, 0xa6, 0x95, 0xe6, 0xd3, 0x73, 0x94, 0xde, 0xba, 0xb1,
	0x28, 0x60, 0xb9, 0x0f, 0x34, 0x3e, 0x36, 0x1c, 0x1f, 0x58, 0xf0, 0x81, 0xd6, 0x47, 0xc3, 0xf1,
	0x61, 0x31, 0xb2, 0x07, 0xcd, 0x3e, 0x93, 0x38, 0x56, 0x4c, 0x70, 0xaf, 0x69, 0xca, 0xb2, 0x00,
	0x74, 0x84, 0x7e, 0xa2, 0x7a, 0x13, 0xca, 0x39, 0xc6, 0x1e, 0xa4, 0x11, 0x16, 0x88, 0xd6, 0x9f,
	0xc9, 0x71, 0xa6, 0x6f, 0xa5, 0xfa, 0x05, 0x42, 0x08, 0xd4, 0x4e, 0x19, 0x47, 0x6f, 0xd3, 0x68,
	0xcc, 0x5a, 0x57, 0xe5, 0x25, 0x67, 0x6f, 0xe7, 0x38, 0xe8, 0x7b, 0x5b, 0x06, 0xcf, 0x65, 0x9d,
	0xcd, 0x2b, 0xc1, 0xc6, 0x38, 0xa5, 0x2c, 0xf6, 0xb6, 0xd3, 0x6c, 0x72, 0x80, 0x7c, 0x05, 0xbb,
	0x01, 0x8e, 0x85, 0x0c, 0x19, 0x8f, 0x8e, 0x59, 0x8c, 0x5c, 0x1f, 0x7b, 0xc7, 0xb8, 0x58, 0x56,
	0xf8, 0xff, 0x54, 0x60, 0x33, 0xa0, 0xef, 0x72, 0xc5, 0x52, 0x6b, 0x3d, 0xd8, 0x08, 0xe8, 0x3b,
	0x53, 0xbb, 0xb4, 0xad, 0x99, 0xa8, 0x9b, 0x7e, 0x4a, 0x13, 0x75, 0xa8, 0x14, 0x4e, 0x67, 0xca,
	0xb6, 0xd5, 0x85, 0x74, 0xa2, 0x76, 0x62, 0x06, 0x7d, 0xd3, 0xdb, 0x5a, 0xb0, 0x00, 0xb4, 0xe7,
	0x9e, 0x44, 0xaa, 0x47, 0xa2, 0x9e, 0x8e, 0x84, 0x15, 0xfd, 0x04, 0x36, 0x7a, 0x82, 0x2b, 0x3a,
	0x56, 0x4b, 0xe9, 0x10, 0xa8, 0x39, 0xb9, 0x98, 0xb5, 0x9e, 0x58, 0xdb, 0xbb, 0xaa, 0x41, 0xad,
	0xa4, 0x2b, 0x61, 0xdd, 0xf4, 0xa8, 0xc2, 0x48, 0xc8, 0xf7, 0x79, 0x1a, 0xcb, 0x0a, 0xff, 0x11,
	0xec, 0x94, 0xc0, 0x0f, 0x09, 0xee, 0x0b, 0xf8, 0x28, 0x2f, 0xde, 0x73, 0xa1, 0xd8, 0x6b, 0x36,
	0xa6, 0x66, 0x2a, 0x0a, 0x87, 0xaf, 0x94, 0x0f, 0xbf, 0x07, 0xcd, 0xc3, 0xb9, 0x9a, 0x8c, 0xc4,
	0x1b, 0xe4, 0xd6, 0xdf, 0x02, 0x48, 0xef, 0x84, 0x6d, 0x5d, 0x7a, 0xa6, 0x5c, 0xf6, 0xbf, 0x87,
	0x6d, 0xed, 0xe6, 0x54, 0x44, 0x01, 0xbe, 0x9d, 0x63, 0xa2, 0xc8, 0x4d, 0xa8, 0x9b, 0xcb, 0x64,
	0xa2, 0x6c, 0x05, 0xa9, 0x40, 0xda, 0x50, 0x3d, 0xe2, 0xa1, 0xf1, 0xbd, 0x15, 0xe8, 0xa5, 0xff,
	0x04, 0x76, 0xf2, 0x9d, 0xc9, 0x4c, 0xf0, 0x04, 0xc9, 0x3d, 0xa8, 0x9d, 0x8a, 0x28, 0xf1, 0x2a,
	0xfb, 0xd5, 0xfb, 0xad, 0x83, 0x1b, 0x5d, 0x87, 0x9d, 0x6c, 0xae, 0x81, 0x31, 0xf0, 0xff, 0x84,
	0xf6, 0x30, 0xa6, 0x63, 0xd4, 0x68, 0x16, 0x57, 0x9f, 0x30, 0xad, 0x98, 0x73, 0xc2, 0x0c, 0x70,
	0xba, 0xb2, 0x56, 0xe8, 0x4a, 0x56, 0xc4, 0xaa, 0x53, 0xc4, 0x2e, 0x90, 0x63, 0xc6, 0x43, 0xbb,
	0x39, 0xf3, 0xef, 0xc1, 0xc6, 0x90, 0x2a, 0x85, 0x92, 0x5b, 0xa2, 0xca, 0x44, 0xff, 0x29, 0xb4,
	0xac, 0xed, 0x29, 0x4b, 0x14, 0x79, 0x08, 0x0d, 0x2b, 0xae, 0x3e, 0x89, 0x75, 0x9b, 0x1b, 0xf9,
	0xbf, 0xc3, 0x8d, 0x3e, 0xa3, 0xf1, 0x68, 0x22, 0xc5, 0x3c, 0x9a, 0xe4, 0xd5, 0x58, 0xa4, 0x5c,
	0x29, 0xa4, 0xfc, 0x25, 0xb4, 0x9f, 0x0b, 0x39, 0xa5, 0x31, 0xfb, 0x1b, 0xc3, 0xc2, 0xa1, 0x96,
	0x70, 0xdd, 0x9e, 0x21, 0xa2, 0x3c, 0x53, 0x54, 0xcd, 0x13, 0x93, 0xdd, 0x17, 0x50, 0xd7, 0x48,
	0x96, 0x5a, 0xdb, 0x4d, 0x4d, 0x2b, 0x82, 0x54, 0xed, 0xbf, 0x86, 0x9a, 0x5e, 0xe4, 0x05, 0xaa,
	0x38, 0x23, 0xde, 0x81, 0x86, 0xbe, 0x58, 0x67, 0x68, 0xa7, 0x65, 0x2b, 0xc8, 0x65, 0x9d, 0xb5,
	0x5e, 0x0f, 0x86, 0xd9, 0xf8, 0xa7, 0x92, 0xc6, 0x5f, 0xf0, 0x58, 0x13, 0x4b, 0x2d, 0x25, 0xf2,
	0x54, 0xf2, 0x03, 0x68, 0x07, 0x18, 0xb1, 0x44, 0x49, 0x33, 0xa8, 0x26, 0xc7, 0xa7, 0xb0, 0xe5,
	0x62, 0x59, 0xae, 0x9e, 0x9b, 0xab, 0x6b, 0x10, 0x14, 0xcd, 0xfd, 0x73, 0xd8, 0x74, 0x01, 0x1d,
	0x7b, 0x44, 0x65, 0x84, 0x2a, 0xab, 0x64, 0x2a, 0x5d, 0x7b, 0x8e, 0x3b, 0x00, 0xa9, 0x0f, 0x94,
	0xf6, 0x95, 0x68, 0x04, 0x0e, 0xa2, 0x9f, 0x28, 0xdb, 0x8f, 0x2b, 0xfa, 0xe4, 0xff, 0x01, 0xdb,
	0x01, 0x26, 0x22, 0xbe, 0xc8, 0xba, 0xa1, 0xe3, 0x65, 0x88, 0x7d, 0xce, 0x72, 0x99, 0x7c, 0x9d,
	0xb3, 0x8c, 0x49, 0xe5, 0x8a, 0xa1, 0xc9, 0x6c, 0xfc, 0x5f, 0xa1, 0x1e, 0x88, 0xb9, 0xc2, 0x25,
	0x56, 0xb8, 0x05, 0xeb, 0x43, 0x89, 0xaf, 0xd9, 0x65, 0x36, 0xe8, 0xa9, 0xa4, 0x63, 0x0f, 0xa5,
	0xb8, 0x60, 0x61, 0x4e, 0x4c, 0xb9, 0xec, 0xf7, 0xa1, 0xad, 0x07, 0xde, 0x38, 0x74, 0xc6, 0xfd,
	0xe8, 0x72, 0x1c, 0xcf, 0x43, 0x34, 0xd5, 0x6f, 0x06, 0x99, 0x78, 0xd5, 0x55, 0xf2, 0xff, 0x02,
	0x4f, 0xdf, 0xc7, 0xdf, 0x98, 0x9a, 0x1c, 0x5d, 0x2a, 0xe4, 0x89, 0xee, 0x8c, 0xf5, 0x76, 0xd5,
	0x2c, 0x7b, 0xe9, 0xa9, 0xf1, 0x52, 0x65, 0x7c, 0x6e, 0x45, 0x7d, 0x9d, 0x73, 0x2f, 0x36, 0xe1,
	0x05, 0x70, 0xf0, 0x6f, 0x13, 0x76, 0x4f, 0xc4, 0xa1, 0x2d, 0xcf, 0x19, 0xca, 0x0b, 0x36, 0x46,
	0xf2, 0x18, 0x60, 0x31, 0xed, 0x64, 0xb3, 0x6b, 0x7f, 0x9d, 0xbc, 0x12, 0x2c, 0xec, 0x74, 0xca,
	0x83, 0xee, 0xdc, 0x89, 0xbb, 0x50, 0x3f, 0x9c, 0xcd, 0xe2, 0xf7, 0xa5, 0x2d, 0x05, 0x89, 0xdc,
	0x85, 0xea, 0x33, 0xca, 0xc9, 0xb6, 0xeb, 0x67, 0x30, 0x2c, 0x19, 0x3d, 0x80, 0xfa, 0x4b, 0x7e,
	0xbe, 0xc2, 0x8c, 0x14, 0x67, 0xd7, 0xfc, 0xb6, 0xf9, 0x59, 0x8f, 0xb9, 0x25, 0xeb, 0xbe, 0xe0,
	0x48, 0x3e, 0x2d, 0x1a, 0xad, 0xe0, 0xf1, 0x52, 0xb8, 0x1e, 0x34, 0x4e, 0x50, 0xe9, 0xaa, 0x27,
	0xa4, 0x53, 0xa6, 0xcb, 0x05, 0x27, 0x77, 0x3e, 0x5e, 0xa9, 0xb3, 0x3c, 0xf3, 0x1d, 0x34, 0x73,
	0x32, 0x25, 0x7b, 0x85, 0x32, 0x95, 0x38, 0xb6, 0x14, 0xfd, 0x18, 0x5a, 0x0e, 0x4f, 0x92, 0x3b,
	0xee, 0xd6, 0x65, 0x02, 0xed, 0xdc, 0x5e, 0x31, 0xd0, 0xa6, 0xfc, 0x8f, 0x60, 0xf3, 0x04, 0xd5,
	0x70, 0x22, 0x38, 0x9e, 0x0b, 0xf1, 0xa6, 0xd4, 0x85, 0x2b, 0xb7, 0x3d, 0x81, 0xed, 0x97, 0xb3,
	0x90, 0x2a, 0x7c, 0x21, 0xd3, 0xa7, 0x9a, 0xac, 0xba, 0x32, 0x9d, 0x55, 0x20, 0x39, 0x02, 0x38,
	0x53, 0x12, 0xe9, 0xf4, 0x97, 0xd1, 0x68, 0x48, 0x6e, 0x77, 0xf3, 0x5f, 0xa5, 0x29, 0x9a, 0xa5,
	0xbc, 0x57, 0x56, 0xf4, 0xa9, 0xa2, 0x59, 0xe1, 0xbe, 0xa9, 0x90, 0x1e, 0xb4, 0x34, 0x73, 0xab,
	0x94, 0xb9, 0x57, 0xc7, 0xff, 0xc4, 0x05, 0x57, 0xf1, 0xfc, 0x4f, 0x7a, 0x0c, 0x0c, 0x0b, 0x64,
	0x6f, 0x92, 0xbb, 0x23, 0xc5, 0x8a, 0xe3, 0x5b, 0xa2, 0x95, 0x07, 0xd0, 0x38, 0x0c, 0xd3, 0xdb,
	0x4b, 0x76, 0x0b, 0x76, 0x1a, 0x2a, 0x35, 0xad, 0x0b, 0xad, 0x00, 0xa7, 0xe2, 0x02, 0x3f, 0xd0,
	0xfe, 0x47, 0x68, 0xe6, 0xdc, 0x50, 0x9c, 0x8e, 0x32, 0x65, 0x74, 0x96, 0x7d, 0x91, 0xa7, 0xd0,
	0x3e, 0x41, 0x55, 0x60, 0xe7, 0x52, 0x7b, 0xf7, 0xae, 0x22, 0x75, 0xd3, 0xe3, 0x2e, 0xb4, 0x47,
	0x92, 0x45, 0x11, 0xca, 0x11, 0x26, 0x76, 0xd0, 0xaf, 0xbb, 0xa4, 0x3f, 0xc0, 0x4e, 0xfe, 0x06,
	0x5e, 0x53, 0xcd, 0x15, 0x18, 0x39, 0x81, 0xdd, 0x25, 0xfa, 0x22, 0x9f, 0x95, 0x2f, 0xce, 0x2a,
	0x76, 0x2b, 0xe6, 0xf0, 0xec, 0x1e, 0x7c, 0xce, 0x51, 0xb9, 0x5f, 0x41, 0xf6, 0xbb, 0x48, 0x7f,
	0x08, 0x39, 0xfe, 0xce, 0xd7, 0xcd, 0x27, 0xd0, 0xb7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa1,
	0x2f, 0x10, 0x4f, 0xac, 0x0d, 0x00, 0x00,
}
