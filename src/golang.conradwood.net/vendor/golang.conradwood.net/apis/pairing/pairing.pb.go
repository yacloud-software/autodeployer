// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/pairing/pairing.proto
// DO NOT EDIT!

/*
Package pairing is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/pairing/pairing.proto

It has these top-level messages:
	PairResponse
	PairStatusRequest
	PairResult
	GrantRequest
	TransferModuleRequest
	TransferModuleResponse
	CompleteTransferModuleRequest
	LinkID
	TransferModuleInfoRequest
	TransferModuleInfo
*/
package pairing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestStatus int32

const (
	RequestStatus_ACTIVE   RequestStatus = 0
	RequestStatus_SUCCESS  RequestStatus = 1
	RequestStatus_DENIED   RequestStatus = 2
	RequestStatus_EXPIRED  RequestStatus = 3
	RequestStatus_NOTFOUND RequestStatus = 4
)

var RequestStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "SUCCESS",
	2: "DENIED",
	3: "EXPIRED",
	4: "NOTFOUND",
}
var RequestStatus_value = map[string]int32{
	"ACTIVE":   0,
	"SUCCESS":  1,
	"DENIED":   2,
	"EXPIRED":  3,
	"NOTFOUND": 4,
}

func (x RequestStatus) String() string {
	return proto.EnumName(RequestStatus_name, int32(x))
}
func (RequestStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LinkType int32

const (
	LinkType_UNDEFINED      LinkType = 0
	LinkType_TRANSFERMODULE LinkType = 1
)

var LinkType_name = map[int32]string{
	0: "UNDEFINED",
	1: "TRANSFERMODULE",
}
var LinkType_value = map[string]int32{
	"UNDEFINED":      0,
	"TRANSFERMODULE": 1,
}

func (x LinkType) String() string {
	return proto.EnumName(LinkType_name, int32(x))
}
func (LinkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PairResponse struct {
	PairID           string `protobuf:"bytes,1,opt,name=PairID" json:"PairID,omitempty"`
	UserVerification string `protobuf:"bytes,2,opt,name=UserVerification" json:"UserVerification,omitempty"`
}

func (m *PairResponse) Reset()                    { *m = PairResponse{} }
func (m *PairResponse) String() string            { return proto.CompactTextString(m) }
func (*PairResponse) ProtoMessage()               {}
func (*PairResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PairResponse) GetPairID() string {
	if m != nil {
		return m.PairID
	}
	return ""
}

func (m *PairResponse) GetUserVerification() string {
	if m != nil {
		return m.UserVerification
	}
	return ""
}

type PairStatusRequest struct {
	PairID string `protobuf:"bytes,1,opt,name=PairID" json:"PairID,omitempty"`
}

func (m *PairStatusRequest) Reset()                    { *m = PairStatusRequest{} }
func (m *PairStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*PairStatusRequest) ProtoMessage()               {}
func (*PairStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PairStatusRequest) GetPairID() string {
	if m != nil {
		return m.PairID
	}
	return ""
}

type PairResult struct {
	Token      string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	StatusText string `protobuf:"bytes,4,opt,name=StatusText" json:"StatusText,omitempty"`
	StatusCode uint32 `protobuf:"varint,5,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *PairResult) Reset()                    { *m = PairResult{} }
func (m *PairResult) String() string            { return proto.CompactTextString(m) }
func (*PairResult) ProtoMessage()               {}
func (*PairResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PairResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PairResult) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *PairResult) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PairResult) GetStatusText() string {
	if m != nil {
		return m.StatusText
	}
	return ""
}

func (m *PairResult) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

type GrantRequest struct {
	PairID           string `protobuf:"bytes,1,opt,name=PairID" json:"PairID,omitempty"`
	UserVerification string `protobuf:"bytes,2,opt,name=UserVerification" json:"UserVerification,omitempty"`
}

func (m *GrantRequest) Reset()                    { *m = GrantRequest{} }
func (m *GrantRequest) String() string            { return proto.CompactTextString(m) }
func (*GrantRequest) ProtoMessage()               {}
func (*GrantRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GrantRequest) GetPairID() string {
	if m != nil {
		return m.PairID
	}
	return ""
}

func (m *GrantRequest) GetUserVerification() string {
	if m != nil {
		return m.UserVerification
	}
	return ""
}

type TransferModuleRequest struct {
	ModuleID uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
}

func (m *TransferModuleRequest) Reset()                    { *m = TransferModuleRequest{} }
func (m *TransferModuleRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferModuleRequest) ProtoMessage()               {}
func (*TransferModuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransferModuleRequest) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

type TransferModuleResponse struct {
	LinkToken string `protobuf:"bytes,1,opt,name=LinkToken" json:"LinkToken,omitempty"`
}

func (m *TransferModuleResponse) Reset()                    { *m = TransferModuleResponse{} }
func (m *TransferModuleResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferModuleResponse) ProtoMessage()               {}
func (*TransferModuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransferModuleResponse) GetLinkToken() string {
	if m != nil {
		return m.LinkToken
	}
	return ""
}

type CompleteTransferModuleRequest struct {
	LinkToken string `protobuf:"bytes,1,opt,name=LinkToken" json:"LinkToken,omitempty"`
	Grant     bool   `protobuf:"varint,2,opt,name=Grant" json:"Grant,omitempty"`
}

func (m *CompleteTransferModuleRequest) Reset()                    { *m = CompleteTransferModuleRequest{} }
func (m *CompleteTransferModuleRequest) String() string            { return proto.CompactTextString(m) }
func (*CompleteTransferModuleRequest) ProtoMessage()               {}
func (*CompleteTransferModuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CompleteTransferModuleRequest) GetLinkToken() string {
	if m != nil {
		return m.LinkToken
	}
	return ""
}

func (m *CompleteTransferModuleRequest) GetGrant() bool {
	if m != nil {
		return m.Grant
	}
	return false
}

type LinkID struct {
	ID               uint64   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Created          uint32   `protobuf:"varint,2,opt,name=Created" json:"Created,omitempty"`
	Creator          string   `protobuf:"bytes,3,opt,name=Creator" json:"Creator,omitempty"`
	LinkType         LinkType `protobuf:"varint,4,opt,name=LinkType,enum=pairing.LinkType" json:"LinkType,omitempty"`
	Expiry           uint32   `protobuf:"varint,5,opt,name=Expiry" json:"Expiry,omitempty"`
	ResponseReceived uint32   `protobuf:"varint,6,opt,name=ResponseReceived" json:"ResponseReceived,omitempty"`
	Accepted         bool     `protobuf:"varint,7,opt,name=Accepted" json:"Accepted,omitempty"`
	LinkToken        string   `protobuf:"bytes,8,opt,name=LinkToken" json:"LinkToken,omitempty"`
	ModuleID         uint64   `protobuf:"varint,9,opt,name=ModuleID" json:"ModuleID,omitempty"`
}

func (m *LinkID) Reset()                    { *m = LinkID{} }
func (m *LinkID) String() string            { return proto.CompactTextString(m) }
func (*LinkID) ProtoMessage()               {}
func (*LinkID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LinkID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LinkID) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *LinkID) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *LinkID) GetLinkType() LinkType {
	if m != nil {
		return m.LinkType
	}
	return LinkType_UNDEFINED
}

func (m *LinkID) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *LinkID) GetResponseReceived() uint32 {
	if m != nil {
		return m.ResponseReceived
	}
	return 0
}

func (m *LinkID) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func (m *LinkID) GetLinkToken() string {
	if m != nil {
		return m.LinkToken
	}
	return ""
}

func (m *LinkID) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

type TransferModuleInfoRequest struct {
	LinkToken string `protobuf:"bytes,1,opt,name=LinkToken" json:"LinkToken,omitempty"`
}

func (m *TransferModuleInfoRequest) Reset()                    { *m = TransferModuleInfoRequest{} }
func (m *TransferModuleInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferModuleInfoRequest) ProtoMessage()               {}
func (*TransferModuleInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TransferModuleInfoRequest) GetLinkToken() string {
	if m != nil {
		return m.LinkToken
	}
	return ""
}

type TransferModuleInfo struct {
	Exists bool    `protobuf:"varint,1,opt,name=Exists" json:"Exists,omitempty"`
	LinkID *LinkID `protobuf:"bytes,2,opt,name=LinkID" json:"LinkID,omitempty"`
}

func (m *TransferModuleInfo) Reset()                    { *m = TransferModuleInfo{} }
func (m *TransferModuleInfo) String() string            { return proto.CompactTextString(m) }
func (*TransferModuleInfo) ProtoMessage()               {}
func (*TransferModuleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TransferModuleInfo) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *TransferModuleInfo) GetLinkID() *LinkID {
	if m != nil {
		return m.LinkID
	}
	return nil
}

func init() {
	proto.RegisterType((*PairResponse)(nil), "pairing.PairResponse")
	proto.RegisterType((*PairStatusRequest)(nil), "pairing.PairStatusRequest")
	proto.RegisterType((*PairResult)(nil), "pairing.PairResult")
	proto.RegisterType((*GrantRequest)(nil), "pairing.GrantRequest")
	proto.RegisterType((*TransferModuleRequest)(nil), "pairing.TransferModuleRequest")
	proto.RegisterType((*TransferModuleResponse)(nil), "pairing.TransferModuleResponse")
	proto.RegisterType((*CompleteTransferModuleRequest)(nil), "pairing.CompleteTransferModuleRequest")
	proto.RegisterType((*LinkID)(nil), "pairing.LinkID")
	proto.RegisterType((*TransferModuleInfoRequest)(nil), "pairing.TransferModuleInfoRequest")
	proto.RegisterType((*TransferModuleInfo)(nil), "pairing.TransferModuleInfo")
	proto.RegisterEnum("pairing.RequestStatus", RequestStatus_name, RequestStatus_value)
	proto.RegisterEnum("pairing.LinkType", LinkType_name, LinkType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PairingService service

type PairingServiceClient interface {
	// sent initially by the app or device (no auth required)
	PairRequest(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PairResponse, error)
	PairStatus(ctx context.Context, in *PairStatusRequest, opts ...grpc.CallOption) (*PairResult, error)
	// called by an authenticated user to grant a pairing request
	Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*common.Void, error)
	// called by an authenticated user to decline a pairing request
	Deny(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*common.Void, error)
	// cause a nil pointer..
	Panic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// starts the transfer of a module. Returns a link which needs to be used complete the response. The link is safe and suitable to send to the current owner
	StartTransferModuleToMe(ctx context.Context, in *TransferModuleRequest, opts ...grpc.CallOption) (*TransferModuleResponse, error)
	// given a linkid it will return the transfermoduleinfo
	GetTransferModuleInfo(ctx context.Context, in *TransferModuleInfoRequest, opts ...grpc.CallOption) (*TransferModuleInfo, error)
	// this completes a transfer
	CompleteTransferModule(ctx context.Context, in *CompleteTransferModuleRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type pairingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPairingServiceClient(cc *grpc.ClientConn) PairingServiceClient {
	return &pairingServiceClient{cc}
}

func (c *pairingServiceClient) PairRequest(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PairResponse, error) {
	out := new(PairResponse)
	err := grpc.Invoke(ctx, "/pairing.PairingService/PairRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingServiceClient) PairStatus(ctx context.Context, in *PairStatusRequest, opts ...grpc.CallOption) (*PairResult, error) {
	out := new(PairResult)
	err := grpc.Invoke(ctx, "/pairing.PairingService/PairStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingServiceClient) Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/pairing.PairingService/Grant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingServiceClient) Deny(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/pairing.PairingService/Deny", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingServiceClient) Panic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/pairing.PairingService/Panic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingServiceClient) StartTransferModuleToMe(ctx context.Context, in *TransferModuleRequest, opts ...grpc.CallOption) (*TransferModuleResponse, error) {
	out := new(TransferModuleResponse)
	err := grpc.Invoke(ctx, "/pairing.PairingService/StartTransferModuleToMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingServiceClient) GetTransferModuleInfo(ctx context.Context, in *TransferModuleInfoRequest, opts ...grpc.CallOption) (*TransferModuleInfo, error) {
	out := new(TransferModuleInfo)
	err := grpc.Invoke(ctx, "/pairing.PairingService/GetTransferModuleInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingServiceClient) CompleteTransferModule(ctx context.Context, in *CompleteTransferModuleRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/pairing.PairingService/CompleteTransferModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PairingService service

type PairingServiceServer interface {
	// sent initially by the app or device (no auth required)
	PairRequest(context.Context, *common.Void) (*PairResponse, error)
	PairStatus(context.Context, *PairStatusRequest) (*PairResult, error)
	// called by an authenticated user to grant a pairing request
	Grant(context.Context, *GrantRequest) (*common.Void, error)
	// called by an authenticated user to decline a pairing request
	Deny(context.Context, *GrantRequest) (*common.Void, error)
	// cause a nil pointer..
	Panic(context.Context, *common.Void) (*common.Void, error)
	// starts the transfer of a module. Returns a link which needs to be used complete the response. The link is safe and suitable to send to the current owner
	StartTransferModuleToMe(context.Context, *TransferModuleRequest) (*TransferModuleResponse, error)
	// given a linkid it will return the transfermoduleinfo
	GetTransferModuleInfo(context.Context, *TransferModuleInfoRequest) (*TransferModuleInfo, error)
	// this completes a transfer
	CompleteTransferModule(context.Context, *CompleteTransferModuleRequest) (*common.Void, error)
}

func RegisterPairingServiceServer(s *grpc.Server, srv PairingServiceServer) {
	s.RegisterService(&_PairingService_serviceDesc, srv)
}

func _PairingService_PairRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).PairRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/PairRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).PairRequest(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairingService_PairStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).PairStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/PairStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).PairStatus(ctx, req.(*PairStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairingService_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).Grant(ctx, req.(*GrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairingService_Deny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).Deny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/Deny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).Deny(ctx, req.(*GrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairingService_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/Panic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).Panic(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairingService_StartTransferModuleToMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).StartTransferModuleToMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/StartTransferModuleToMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).StartTransferModuleToMe(ctx, req.(*TransferModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairingService_GetTransferModuleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferModuleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).GetTransferModuleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/GetTransferModuleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).GetTransferModuleInfo(ctx, req.(*TransferModuleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairingService_CompleteTransferModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTransferModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServiceServer).CompleteTransferModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairing.PairingService/CompleteTransferModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServiceServer).CompleteTransferModule(ctx, req.(*CompleteTransferModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PairingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pairing.PairingService",
	HandlerType: (*PairingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PairRequest",
			Handler:    _PairingService_PairRequest_Handler,
		},
		{
			MethodName: "PairStatus",
			Handler:    _PairingService_PairStatus_Handler,
		},
		{
			MethodName: "Grant",
			Handler:    _PairingService_Grant_Handler,
		},
		{
			MethodName: "Deny",
			Handler:    _PairingService_Deny_Handler,
		},
		{
			MethodName: "Panic",
			Handler:    _PairingService_Panic_Handler,
		},
		{
			MethodName: "StartTransferModuleToMe",
			Handler:    _PairingService_StartTransferModuleToMe_Handler,
		},
		{
			MethodName: "GetTransferModuleInfo",
			Handler:    _PairingService_GetTransferModuleInfo_Handler,
		},
		{
			MethodName: "CompleteTransferModule",
			Handler:    _PairingService_CompleteTransferModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/pairing/pairing.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/pairing/pairing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0x26, 0x21, 0xe4, 0xe3, 0x85, 0x64, 0xcd, 0xec, 0xc2, 0x06, 0xef, 0x2e, 0x8b, 0xdc, 0x8a,
	0x22, 0x68, 0x43, 0x15, 0xa4, 0x4a, 0x1c, 0x7a, 0x80, 0xd8, 0x20, 0x4b, 0x90, 0x44, 0x76, 0x82,
	0x50, 0x6f, 0xae, 0x33, 0xa0, 0x11, 0xc9, 0x8c, 0x6b, 0x4f, 0x28, 0x5c, 0xb9, 0xf5, 0xd6, 0x73,
	0x7f, 0x42, 0xfb, 0x27, 0xab, 0xb1, 0xc7, 0x8e, 0x1d, 0x42, 0x4a, 0x4f, 0xd6, 0x33, 0xef, 0xf7,
	0xf3, 0x8c, 0xdf, 0x81, 0xb7, 0xd7, 0x6c, 0xe8, 0xd0, 0xeb, 0x86, 0xcb, 0xa8, 0xef, 0x0c, 0x3e,
	0x33, 0x36, 0x68, 0x50, 0xcc, 0xf7, 0x1d, 0x8f, 0x04, 0xfb, 0x9e, 0x43, 0x7c, 0x42, 0xaf, 0xe3,
	0x6f, 0xc3, 0xf3, 0x19, 0x67, 0xa8, 0x24, 0xa1, 0xda, 0x98, 0x13, 0xea, 0xb2, 0xd1, 0x88, 0x51,
	0xf9, 0x89, 0x02, 0x35, 0x0b, 0x56, 0xba, 0x0e, 0xf1, 0x2d, 0x1c, 0x78, 0x8c, 0x06, 0x18, 0xad,
	0x43, 0x51, 0x60, 0x53, 0xaf, 0xe7, 0xb6, 0x72, 0x3b, 0x15, 0x4b, 0x22, 0xb4, 0x0b, 0x4a, 0x3f,
	0xc0, 0xfe, 0x05, 0xf6, 0xc9, 0x15, 0x71, 0x1d, 0x4e, 0x18, 0xad, 0xe7, 0x43, 0x8f, 0x47, 0xe7,
	0xda, 0x1e, 0xac, 0x8a, 0x28, 0x9b, 0x3b, 0x7c, 0x1c, 0x58, 0xf8, 0xd3, 0x18, 0x07, 0xfc, 0xa9,
	0xc4, 0xda, 0xd7, 0x1c, 0x80, 0xec, 0x60, 0x3c, 0xe4, 0xe8, 0x2f, 0x58, 0xea, 0xb1, 0x1b, 0x4c,
	0xa5, 0x57, 0x04, 0x44, 0xb0, 0xa8, 0x62, 0xea, 0xb2, 0xa6, 0x44, 0xc2, 0xdb, 0x18, 0x39, 0x64,
	0x58, 0x5f, 0x8c, 0xbc, 0x43, 0x80, 0x36, 0x01, 0xa2, 0xda, 0x3d, 0x7c, 0xc7, 0xeb, 0x85, 0xd0,
	0x94, 0x3a, 0x99, 0xd8, 0x5b, 0x6c, 0x80, 0xeb, 0x4b, 0x5b, 0xb9, 0x9d, 0xaa, 0x95, 0x3a, 0x11,
	0x9c, 0x9c, 0xfa, 0x0e, 0xe5, 0xbf, 0x68, 0xfd, 0xb7, 0x38, 0x39, 0x80, 0xb5, 0x9e, 0xef, 0xd0,
	0xe0, 0x0a, 0xfb, 0xe7, 0x6c, 0x30, 0x1e, 0xe2, 0x38, 0xb9, 0x0a, 0xe5, 0xe8, 0x40, 0xa6, 0x2f,
	0x58, 0x09, 0xd6, 0xde, 0xc1, 0xfa, 0x74, 0x90, 0x94, 0xe9, 0x5f, 0xa8, 0x9c, 0x11, 0x7a, 0x93,
	0xa6, 0x6a, 0x72, 0xa0, 0xd9, 0xf0, 0x5f, 0x8b, 0x8d, 0xbc, 0x21, 0xe6, 0x78, 0x76, 0xd1, 0xb9,
	0xe1, 0x82, 0xd5, 0x70, 0xfe, 0x70, 0x98, 0xb2, 0x15, 0x01, 0xed, 0x47, 0x1e, 0x8a, 0xc2, 0xc7,
	0xd4, 0x51, 0x0d, 0xf2, 0x49, 0xb7, 0x79, 0x53, 0x47, 0x75, 0x28, 0xb5, 0x7c, 0xec, 0x70, 0x3c,
	0x08, 0x43, 0xaa, 0x56, 0x0c, 0x13, 0x0b, 0xf3, 0xa5, 0x44, 0x31, 0x44, 0x87, 0x50, 0x0e, 0x2b,
	0xde, 0x7b, 0x38, 0x94, 0xa8, 0xd6, 0x5c, 0x6d, 0xc4, 0x77, 0x3a, 0x36, 0x1c, 0xc3, 0xb7, 0x87,
	0x8d, 0xe2, 0x98, 0x50, 0x7e, 0xd0, 0xb4, 0x12, 0x77, 0xa1, 0x87, 0x71, 0xe7, 0x11, 0xff, 0x5e,
	0x6a, 0x27, 0x91, 0xd0, 0x23, 0x26, 0xc8, 0xc2, 0x2e, 0x26, 0xb7, 0x78, 0x50, 0x2f, 0x86, 0x1e,
	0x8f, 0xce, 0x05, 0xed, 0x47, 0xae, 0x8b, 0x3d, 0xd1, 0x73, 0x29, 0x1c, 0x33, 0xc1, 0x68, 0x3b,
	0xcd, 0x4e, 0x59, 0xb4, 0x7d, 0x5c, 0xfe, 0xfe, 0xb0, 0x51, 0xe0, 0xfe, 0x18, 0xa7, 0x79, 0x4a,
	0x4b, 0x57, 0x99, 0x92, 0xee, 0x10, 0x36, 0xb2, 0xd4, 0x9b, 0xf4, 0x8a, 0x3d, 0x8b, 0x7e, 0xad,
	0x0f, 0xe8, 0x71, 0x68, 0x34, 0x34, 0x09, 0x78, 0x10, 0x06, 0x94, 0x2d, 0x89, 0xd0, 0xab, 0x58,
	0x95, 0x90, 0xfa, 0xe5, 0xe6, 0x1f, 0x19, 0x16, 0x4d, 0xdd, 0x92, 0xe6, 0xdd, 0x0e, 0x54, 0x65,
	0xfd, 0xe8, 0xaa, 0x23, 0x80, 0xe2, 0x51, 0xab, 0x67, 0x5e, 0x18, 0xca, 0x02, 0x5a, 0x86, 0x92,
	0xdd, 0x6f, 0xb5, 0x0c, 0xdb, 0x56, 0x72, 0xc2, 0xa0, 0x1b, 0x6d, 0xd3, 0xd0, 0x95, 0xbc, 0x30,
	0x18, 0x97, 0x5d, 0xd3, 0x32, 0x74, 0x65, 0x11, 0xad, 0x40, 0xb9, 0xdd, 0xe9, 0x9d, 0x74, 0xfa,
	0x6d, 0x5d, 0x29, 0xec, 0xbe, 0x99, 0x28, 0x88, 0xaa, 0x50, 0xe9, 0xb7, 0x75, 0xe3, 0xc4, 0x6c,
	0x1b, 0xba, 0xb2, 0x80, 0x10, 0xd4, 0x7a, 0xd6, 0x51, 0xdb, 0x3e, 0x31, 0xac, 0xf3, 0x8e, 0xde,
	0x3f, 0x33, 0x94, 0x5c, 0xf3, 0x4b, 0x01, 0x6a, 0xdd, 0xa8, 0x35, 0x1b, 0xfb, 0xb7, 0xc4, 0xc5,
	0xa8, 0x09, 0xcb, 0xd1, 0xaf, 0x1f, 0xd1, 0xb2, 0xd2, 0x90, 0xab, 0xe9, 0x82, 0x91, 0x81, 0xba,
	0x96, 0x0c, 0x92, 0x59, 0x50, 0xef, 0xa3, 0x75, 0x21, 0x67, 0x50, 0x33, 0x4e, 0x99, 0x8d, 0xa3,
	0xfe, 0x39, 0x9d, 0x40, 0xec, 0x97, 0xd7, 0xf2, 0x6e, 0xa3, 0x49, 0xfa, 0xf4, 0xbf, 0xae, 0x66,
	0x7a, 0x40, 0x7b, 0x50, 0xd0, 0x31, 0xbd, 0x7f, 0x9e, 0xf3, 0x0b, 0x58, 0xea, 0x3a, 0x94, 0xb8,
	0x53, 0x73, 0x64, 0x9d, 0x3e, 0xc0, 0xdf, 0x36, 0x77, 0x7c, 0x9e, 0x55, 0xb8, 0xc7, 0xce, 0x31,
	0xda, 0x4c, 0x8a, 0xcc, 0xfc, 0x69, 0xd5, 0xff, 0x9f, 0xb4, 0x4b, 0x6a, 0x2e, 0x61, 0xed, 0x14,
	0xf3, 0x19, 0x77, 0x47, 0x7b, 0x22, 0x32, 0x75, 0x27, 0xd5, 0x7f, 0xe6, 0xf8, 0xa0, 0x36, 0xac,
	0xcf, 0x5e, 0x28, 0x68, 0x3b, 0x09, 0x9b, 0xbb, 0x71, 0xb2, 0x2c, 0x1c, 0xbf, 0x04, 0x8d, 0x62,
	0x9e, 0x7e, 0xa4, 0xe4, 0xb3, 0x25, 0xde, 0xa9, 0x38, 0xe3, 0xc7, 0x62, 0xf8, 0x44, 0x1d, 0xfc,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0x26, 0x20, 0xc9, 0x15, 0x0f, 0x07, 0x00, 0x00,
}
