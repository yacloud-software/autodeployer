// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/standardgraphs/standardgraphs.proto
// DO NOT EDIT!

/*
Package stdgraphs is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/standardgraphs/standardgraphs.proto

It has these top-level messages:
	PromMetricDef
	PromMetrics
*/
package stdgraphs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FLAGS int32

const (
	FLAGS_FLAG_INVALID FLAGS = 0
	FLAGS_FLAG_RATE5M  FLAGS = 1
)

var FLAGS_name = map[int32]string{
	0: "FLAG_INVALID",
	1: "FLAG_RATE5M",
}
var FLAGS_value = map[string]int32{
	"FLAG_INVALID": 0,
	"FLAG_RATE5M":  1,
}

func (x FLAGS) String() string {
	return proto.EnumName(FLAGS_name, int32(x))
}
func (FLAGS) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PromMetricDef struct {
	ServiceName string   `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Internal    bool     `protobuf:"varint,2,opt,name=Internal" json:"Internal,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Desc        string   `protobuf:"bytes,4,opt,name=Desc" json:"Desc,omitempty"`
	GrafanaUnit string   `protobuf:"bytes,5,opt,name=GrafanaUnit" json:"GrafanaUnit,omitempty"`
	Labels      []string `protobuf:"bytes,6,rep,name=Labels" json:"Labels,omitempty"`
	MetricType  int32    `protobuf:"varint,7,opt,name=MetricType" json:"MetricType,omitempty"`
}

func (m *PromMetricDef) Reset()                    { *m = PromMetricDef{} }
func (m *PromMetricDef) String() string            { return proto.CompactTextString(m) }
func (*PromMetricDef) ProtoMessage()               {}
func (*PromMetricDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PromMetricDef) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *PromMetricDef) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *PromMetricDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PromMetricDef) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *PromMetricDef) GetGrafanaUnit() string {
	if m != nil {
		return m.GrafanaUnit
	}
	return ""
}

func (m *PromMetricDef) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PromMetricDef) GetMetricType() int32 {
	if m != nil {
		return m.MetricType
	}
	return 0
}

type PromMetrics struct {
	Metrics []*PromMetricDef `protobuf:"bytes,1,rep,name=Metrics" json:"Metrics,omitempty"`
}

func (m *PromMetrics) Reset()                    { *m = PromMetrics{} }
func (m *PromMetrics) String() string            { return proto.CompactTextString(m) }
func (*PromMetrics) ProtoMessage()               {}
func (*PromMetrics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PromMetrics) GetMetrics() []*PromMetricDef {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*PromMetricDef)(nil), "stdgraphs.PromMetricDef")
	proto.RegisterType((*PromMetrics)(nil), "stdgraphs.PromMetrics")
	proto.RegisterEnum("stdgraphs.FLAGS", FLAGS_name, FLAGS_value)
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/standardgraphs/standardgraphs.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0x8d, 0xfd, 0x3f, 0xab, 0x58, 0x72, 0x90, 0xe0, 0x41, 0x42, 0xf1, 0xb0, 0xf4, 0x90,
	0x42, 0xc5, 0xab, 0xb0, 0x52, 0x2d, 0x85, 0xb6, 0x48, 0x5a, 0xbd, 0xca, 0x74, 0x37, 0xad, 0x0b,
	0x6d, 0xb2, 0x24, 0x41, 0xf1, 0x53, 0xfa, 0x95, 0x64, 0xb7, 0x6b, 0xdd, 0x7a, 0x7b, 0xef, 0x47,
	0x86, 0xc9, 0x9b, 0x07, 0xf7, 0x1b, 0xb3, 0x45, 0xbd, 0x11, 0xb1, 0xd1, 0x16, 0x93, 0x4f, 0x63,
	0x12, 0xa1, 0x95, 0x1f, 0x60, 0x96, 0xba, 0x81, 0xf3, 0xa8, 0x13, 0xb4, 0xc9, 0xc6, 0x62, 0xf6,
	0xfe, 0xdf, 0x8a, 0xcc, 0x1a, 0x6f, 0x68, 0xc7, 0xf9, 0x12, 0xf4, 0xbe, 0x09, 0x9c, 0x3f, 0x5b,
	0xb3, 0x9b, 0x29, 0x6f, 0xd3, 0x78, 0xa4, 0xd6, 0x94, 0x43, 0xb0, 0x50, 0xf6, 0x23, 0x8d, 0xd5,
	0x1c, 0x77, 0x8a, 0x11, 0x4e, 0xc2, 0x8e, 0xac, 0x22, 0x7a, 0x05, 0xed, 0x89, 0xf6, 0xca, 0x6a,
	0xdc, 0xb2, 0x53, 0x4e, 0xc2, 0xb6, 0x3c, 0x78, 0x4a, 0xa1, 0x5e, 0x8c, 0xd5, 0x8a, 0xb1, 0x42,
	0xe7, 0x6c, 0xa4, 0x5c, 0xcc, 0xea, 0x7b, 0x96, 0xeb, 0x7c, 0xcb, 0xd8, 0xe2, 0x1a, 0x35, 0xbe,
	0xe8, 0xd4, 0xb3, 0xc6, 0x7e, 0x4b, 0x05, 0xd1, 0x4b, 0x68, 0x4e, 0x71, 0xa5, 0xb6, 0x8e, 0x35,
	0x79, 0x2d, 0xec, 0xc8, 0xd2, 0xd1, 0x6b, 0x80, 0xfd, 0x67, 0x97, 0x5f, 0x99, 0x62, 0x2d, 0x4e,
	0xc2, 0x86, 0xac, 0x90, 0x5e, 0x04, 0xc1, 0x5f, 0x20, 0x47, 0x87, 0xd0, 0x2a, 0x25, 0x23, 0xbc,
	0x16, 0x06, 0x43, 0x26, 0x0e, 0xe9, 0xc5, 0x51, 0x72, 0xf9, 0xfb, 0xb0, 0xdf, 0x87, 0xc6, 0xd3,
	0x34, 0x1a, 0x2f, 0x68, 0x17, 0xce, 0x72, 0xf1, 0x36, 0x99, 0xbf, 0x46, 0xd3, 0xc9, 0xa8, 0x7b,
	0x42, 0x2f, 0x20, 0x28, 0x88, 0x8c, 0x96, 0x8f, 0x77, 0xb3, 0x2e, 0x79, 0xb8, 0x81, 0x9e, 0x56,
	0xbe, 0x5a, 0x45, 0x5e, 0x83, 0x38, 0xbe, 0xfb, 0xaa, 0x59, 0x1c, 0xfe, 0xf6, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x48, 0x7a, 0x2b, 0x91, 0xba, 0x01, 0x00, 0x00,
}
