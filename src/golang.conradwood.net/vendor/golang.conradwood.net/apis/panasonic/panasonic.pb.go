// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/panasonic/panasonic.proto
// DO NOT EDIT!

/*
Package panasonic is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/panasonic/panasonic.proto

It has these top-level messages:
	PingRequest
	PingResponse
	OnState
*/
package panasonic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingrequest
type PingRequest struct {
	// comment: payload
	Payload string `protobuf:"bytes,2,opt,name=Payload" json:"Payload,omitempty"`
	// comment: sequencenumber
	SequenceNumber uint32 `protobuf:"varint,1,opt,name=SequenceNumber" json:"SequenceNumber,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *PingRequest) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type OnState struct {
	IsOn bool `protobuf:"varint,1,opt,name=IsOn" json:"IsOn,omitempty"`
}

func (m *OnState) Reset()                    { *m = OnState{} }
func (m *OnState) String() string            { return proto.CompactTextString(m) }
func (*OnState) ProtoMessage()               {}
func (*OnState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OnState) GetIsOn() bool {
	if m != nil {
		return m.IsOn
	}
	return false
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "panasonic.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "panasonic.PingResponse")
	proto.RegisterType((*OnState)(nil), "panasonic.OnState")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PanasonicService service

type PanasonicServiceClient interface {
	// turn off
	Off(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// turn on
	On(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// check if tv is on
	IsOn(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*OnState, error)
}

type panasonicServiceClient struct {
	cc *grpc.ClientConn
}

func NewPanasonicServiceClient(cc *grpc.ClientConn) PanasonicServiceClient {
	return &panasonicServiceClient{cc}
}

func (c *panasonicServiceClient) Off(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/panasonic.PanasonicService/Off", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panasonicServiceClient) On(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/panasonic.PanasonicService/On", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panasonicServiceClient) IsOn(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*OnState, error) {
	out := new(OnState)
	err := grpc.Invoke(ctx, "/panasonic.PanasonicService/IsOn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PanasonicService service

type PanasonicServiceServer interface {
	// turn off
	Off(context.Context, *common.Void) (*common.Void, error)
	// turn on
	On(context.Context, *common.Void) (*common.Void, error)
	// check if tv is on
	IsOn(context.Context, *common.Void) (*OnState, error)
}

func RegisterPanasonicServiceServer(s *grpc.Server, srv PanasonicServiceServer) {
	s.RegisterService(&_PanasonicService_serviceDesc, srv)
}

func _PanasonicService_Off_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanasonicServiceServer).Off(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panasonic.PanasonicService/Off",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanasonicServiceServer).Off(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanasonicService_On_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanasonicServiceServer).On(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panasonic.PanasonicService/On",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanasonicServiceServer).On(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanasonicService_IsOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanasonicServiceServer).IsOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panasonic.PanasonicService/IsOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanasonicServiceServer).IsOn(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _PanasonicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panasonic.PanasonicService",
	HandlerType: (*PanasonicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Off",
			Handler:    _PanasonicService_Off_Handler,
		},
		{
			MethodName: "On",
			Handler:    _PanasonicService_On_Handler,
		},
		{
			MethodName: "IsOn",
			Handler:    _PanasonicService_IsOn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/panasonic/panasonic.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/panasonic/panasonic.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x49, 0x15, 0xdb, 0x8e, 0x55, 0x64, 0x4e, 0x21, 0x20, 0xc4, 0x20, 0x25, 0x78, 0xd8,
	0x82, 0xfa, 0x09, 0xbc, 0x79, 0x31, 0x21, 0x01, 0xef, 0xdb, 0x64, 0x1a, 0x02, 0xcd, 0x4c, 0xcc,
	0x6e, 0x15, 0x8f, 0x7e, 0x73, 0x69, 0xfe, 0x34, 0xda, 0x43, 0x4f, 0xfb, 0xde, 0xf0, 0x66, 0x76,
	0xe6, 0x07, 0xcf, 0x85, 0x6c, 0x35, 0x17, 0x2a, 0x13, 0x6e, 0x74, 0xfe, 0x25, 0x92, 0x2b, 0x26,
	0xbb, 0xd2, 0x75, 0x69, 0x56, 0xb5, 0x66, 0x6d, 0x84, 0xcb, 0x6c, 0x54, 0xaa, 0x6e, 0xc4, 0x0a,
	0xce, 0x0f, 0x05, 0x4f, 0x9d, 0x18, 0x90, 0x49, 0x55, 0x09, 0xf7, 0x4f, 0xd7, 0x1a, 0x44, 0x70,
	0x19, 0x97, 0x5c, 0x24, 0xf4, 0xb1, 0x23, 0x63, 0xd1, 0x85, 0x69, 0xac, 0xbf, 0xb7, 0xa2, 0x73,
	0x77, 0xe2, 0x3b, 0xe1, 0x3c, 0x19, 0x2c, 0x2e, 0xe1, 0x3a, 0xdd, 0x87, 0x38, 0xa3, 0xb7, 0x5d,
	0xb5, 0xa6, 0xc6, 0x75, 0x7c, 0x27, 0xbc, 0x4a, 0x8e, 0xaa, 0xc1, 0x03, 0x2c, 0xba, 0x81, 0xa6,
	0x16, 0x36, 0x84, 0x1e, 0xcc, 0x06, 0xdd, 0x76, 0xcc, 0x93, 0x83, 0x0f, 0x6e, 0x61, 0x1a, 0x71,
	0x6a, 0xb5, 0x25, 0x44, 0x38, 0x7f, 0x35, 0x11, 0xb7, 0x91, 0x59, 0xd2, 0xea, 0xc7, 0x1f, 0x07,
	0x6e, 0xe2, 0xe1, 0xb2, 0x94, 0x9a, 0xcf, 0x32, 0x23, 0xbc, 0x83, 0xb3, 0x68, 0xb3, 0xc1, 0x85,
	0xea, 0xcf, 0x78, 0x97, 0x32, 0xf7, 0xfe, 0x39, 0xf4, 0x61, 0x12, 0xf1, 0xc9, 0x44, 0xd8, 0xfd,
	0x76, 0x94, 0x41, 0x35, 0x82, 0xed, 0xf7, 0x7a, 0x59, 0xc2, 0x3d, 0x93, 0xfd, 0x8b, 0xb3, 0x07,
	0xbc, 0x27, 0x3a, 0xe6, 0xd7, 0x17, 0x2d, 0xce, 0xa7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1,
	0x14, 0x36, 0xff, 0xc1, 0x01, 0x00, 0x00,
}
