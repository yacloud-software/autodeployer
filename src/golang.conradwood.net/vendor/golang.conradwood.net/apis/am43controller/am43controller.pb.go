// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/am43controller/am43controller.proto
// DO NOT EDIT!

/*
Package am43controller is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/am43controller/am43controller.proto

It has these top-level messages:
	PingResponse
	Position
*/
package am43controller

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type Position struct {
	Position uint32 `protobuf:"varint,1,opt,name=Position" json:"Position,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Position) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "am43controller.PingResponse")
	proto.RegisterType((*Position)(nil), "am43controller.Position")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AM43Controller service

type AM43ControllerClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	SetPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*common.Void, error)
	GetPosition(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Position, error)
}

type aM43ControllerClient struct {
	cc *grpc.ClientConn
}

func NewAM43ControllerClient(cc *grpc.ClientConn) AM43ControllerClient {
	return &aM43ControllerClient{cc}
}

func (c *aM43ControllerClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/am43controller.AM43Controller/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aM43ControllerClient) SetPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/am43controller.AM43Controller/SetPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aM43ControllerClient) GetPosition(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := grpc.Invoke(ctx, "/am43controller.AM43Controller/GetPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AM43Controller service

type AM43ControllerServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	SetPosition(context.Context, *Position) (*common.Void, error)
	GetPosition(context.Context, *common.Void) (*Position, error)
}

func RegisterAM43ControllerServer(s *grpc.Server, srv AM43ControllerServer) {
	s.RegisterService(&_AM43Controller_serviceDesc, srv)
}

func _AM43Controller_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AM43ControllerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/am43controller.AM43Controller/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AM43ControllerServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AM43Controller_SetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AM43ControllerServer).SetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/am43controller.AM43Controller/SetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AM43ControllerServer).SetPosition(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

func _AM43Controller_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AM43ControllerServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/am43controller.AM43Controller/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AM43ControllerServer).GetPosition(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _AM43Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "am43controller.AM43Controller",
	HandlerType: (*AM43ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AM43Controller_Ping_Handler,
		},
		{
			MethodName: "SetPosition",
			Handler:    _AM43Controller_SetPosition_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _AM43Controller_GetPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/am43controller/am43controller.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/am43controller/am43controller.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x4b, 0xcf, 0xcf, 0x49,
	0xcc, 0x4b, 0xd7, 0x4b, 0xce, 0xcf, 0x2b, 0x4a, 0x4c, 0x29, 0xcf, 0xcf, 0x4f, 0xd1, 0xcb, 0x4b,
	0x2d, 0xd1, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6, 0x4f, 0xcc, 0x35, 0x31, 0x4e, 0xce, 0xcf, 0x2b, 0x29,
	0xca, 0xcf, 0xc9, 0x49, 0x2d, 0x42, 0xe3, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xf1, 0xa1,
	0x8a, 0x4a, 0xe9, 0xe1, 0x31, 0x2f, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x0f, 0x4a, 0x41, 0xf4, 0x2b,
	0x69, 0x71, 0xf1, 0x04, 0x64, 0xe6, 0xa5, 0x07, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a,
	0x49, 0x71, 0x71, 0xc0, 0xd8, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe, 0x92, 0x1a,
	0x17, 0x47, 0x40, 0x7e, 0x71, 0x66, 0x49, 0x66, 0x7e, 0x1e, 0x48, 0x1d, 0x8c, 0x0d, 0x56, 0xc7,
	0x1b, 0x04, 0xe7, 0x1b, 0x6d, 0x62, 0xe4, 0xe2, 0x73, 0xf4, 0x35, 0x31, 0x76, 0x86, 0x3b, 0x4b,
	0xc8, 0x88, 0x8b, 0x05, 0x64, 0x8d, 0x10, 0x8f, 0x1e, 0xd4, 0xf6, 0xb0, 0xfc, 0xcc, 0x14, 0x29,
	0x19, 0x3d, 0x34, 0x3f, 0xa1, 0x38, 0xc5, 0x94, 0x8b, 0x3b, 0x38, 0xb5, 0x04, 0x6e, 0xa3, 0x04,
	0x86, 0x62, 0xa8, 0x8c, 0x14, 0x8a, 0xa1, 0x20, 0x6d, 0xee, 0x48, 0xda, 0x50, 0x6d, 0xc4, 0x69,
	0x88, 0x93, 0x0a, 0x97, 0x52, 0x5e, 0x6a, 0x09, 0x72, 0xb8, 0x81, 0xc2, 0x0c, 0x4d, 0x79, 0x12,
	0x1b, 0x38, 0xd4, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x4b, 0xfc, 0x7a, 0xb7, 0x01,
	0x00, 0x00,
}
