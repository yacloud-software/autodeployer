// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/autodeployer/autodeployer.proto
// DO NOT EDIT!

/*
Package autodeployer is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/autodeployer/autodeployer.proto

It has these top-level messages:
	DeployRequest
	DeployInfo
	DeployResponse
	EmptyResponse
	TerminationRequest
	StartedRequest
	StartupRequest
	StartupResponse
	ResourceRequest
	ResourceResponse
	InfoRequest
	DeployedApp
	InfoResponse
	UndeployRequest
	UndeployResponse
	MachineInfoRequest
	MachineInfoResponse
	URLRequest
	URLResponse
	PackageInstallRequest
	PackageInstallResponse
	StopRequest
	StopResponse
	BinaryDownload
*/
package autodeployer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import deploymonkey "golang.conradwood.net/apis/deploymonkey"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeploymentStatus int32

const (
	// nothing happened yet
	DeploymentStatus_PREPARING DeploymentStatus = 0
	// forked, exec'ed, waiting for startup message
	DeploymentStatus_STARTING DeploymentStatus = 1
	// downloading binaries
	DeploymentStatus_DOWNLOADING DeploymentStatus = 2
	// gathering resources (e.g. ports)
	DeploymentStatus_RESOURCING DeploymentStatus = 3
	// startup message done, handed control to application
	DeploymentStatus_EXECUSER   DeploymentStatus = 4
	DeploymentStatus_TERMINATED DeploymentStatus = 5
	// not downloading, starting from cache
	DeploymentStatus_CACHEDSTART DeploymentStatus = 6
)

var DeploymentStatus_name = map[int32]string{
	0: "PREPARING",
	1: "STARTING",
	2: "DOWNLOADING",
	3: "RESOURCING",
	4: "EXECUSER",
	5: "TERMINATED",
	6: "CACHEDSTART",
}
var DeploymentStatus_value = map[string]int32{
	"PREPARING":   0,
	"STARTING":    1,
	"DOWNLOADING": 2,
	"RESOURCING":  3,
	"EXECUSER":    4,
	"TERMINATED":  5,
	"CACHEDSTART": 6,
}

func (x DeploymentStatus) String() string {
	return proto.EnumName(DeploymentStatus_name, int32(x))
}
func (DeploymentStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// sent to autodeployer to tell it to deploy something
type DeployRequest struct {
	DownloadURL      string   `protobuf:"bytes,1,opt,name=DownloadURL" json:"DownloadURL,omitempty"`
	DownloadUser     string   `protobuf:"bytes,2,opt,name=DownloadUser" json:"DownloadUser,omitempty"`
	DownloadPassword string   `protobuf:"bytes,3,opt,name=DownloadPassword" json:"DownloadPassword,omitempty"`
	Binary           string   `protobuf:"bytes,4,opt,name=Binary" json:"Binary,omitempty"`
	Args             []string `protobuf:"bytes,5,rep,name=Args" json:"Args,omitempty"`
	//  string Repository = 6;
	BuildID uint64 `protobuf:"varint,7,opt,name=BuildID" json:"BuildID,omitempty"`
	// an opaque id -> will be also returned in InfoResponse
	DeploymentID     string                           `protobuf:"bytes,8,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	Namespace        string                           `protobuf:"bytes,9,opt,name=Namespace" json:"Namespace,omitempty"`
	Groupname        string                           `protobuf:"bytes,10,opt,name=Groupname" json:"Groupname,omitempty"`
	AutoRegistration []*deploymonkey.AutoRegistration `protobuf:"bytes,11,rep,name=AutoRegistration" json:"AutoRegistration,omitempty"`
	DeployType       string                           `protobuf:"bytes,12,opt,name=DeployType" json:"DeployType,omitempty"`
	StaticTargetDir  string                           `protobuf:"bytes,13,opt,name=StaticTargetDir" json:"StaticTargetDir,omitempty"`
	Public           bool                             `protobuf:"varint,14,opt,name=Public" json:"Public,omitempty"`
	Limits           *deploymonkey.Limits             `protobuf:"bytes,15,opt,name=Limits" json:"Limits,omitempty"`
	AppReference     *deploymonkey.AppReference       `protobuf:"bytes,16,opt,name=AppReference" json:"AppReference,omitempty"`
	RepositoryID     uint64                           `protobuf:"varint,17,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeployRequest) GetDownloadURL() string {
	if m != nil {
		return m.DownloadURL
	}
	return ""
}

func (m *DeployRequest) GetDownloadUser() string {
	if m != nil {
		return m.DownloadUser
	}
	return ""
}

func (m *DeployRequest) GetDownloadPassword() string {
	if m != nil {
		return m.DownloadPassword
	}
	return ""
}

func (m *DeployRequest) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *DeployRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *DeployRequest) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *DeployRequest) GetDeploymentID() string {
	if m != nil {
		return m.DeploymentID
	}
	return ""
}

func (m *DeployRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeployRequest) GetGroupname() string {
	if m != nil {
		return m.Groupname
	}
	return ""
}

func (m *DeployRequest) GetAutoRegistration() []*deploymonkey.AutoRegistration {
	if m != nil {
		return m.AutoRegistration
	}
	return nil
}

func (m *DeployRequest) GetDeployType() string {
	if m != nil {
		return m.DeployType
	}
	return ""
}

func (m *DeployRequest) GetStaticTargetDir() string {
	if m != nil {
		return m.StaticTargetDir
	}
	return ""
}

func (m *DeployRequest) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *DeployRequest) GetLimits() *deploymonkey.Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *DeployRequest) GetAppReference() *deploymonkey.AppReference {
	if m != nil {
		return m.AppReference
	}
	return nil
}

func (m *DeployRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

// this entire message is deprecated and obsolete. see deployedapp instead */
type DeployInfo struct {
	DownloadURL      string   `protobuf:"bytes,1,opt,name=DownloadURL" json:"DownloadURL,omitempty"`
	DownloadUser     string   `protobuf:"bytes,2,opt,name=DownloadUser" json:"DownloadUser,omitempty"`
	DownloadPassword string   `protobuf:"bytes,3,opt,name=DownloadPassword" json:"DownloadPassword,omitempty"`
	Binary           string   `protobuf:"bytes,4,opt,name=Binary" json:"Binary,omitempty"`
	Args             []string `protobuf:"bytes,5,rep,name=Args" json:"Args,omitempty"`
	// string Repository = 6;
	BuildID uint64 `protobuf:"varint,7,opt,name=BuildID" json:"BuildID,omitempty"`
	// an opaque id -> will be also returned in InfoResponse
	DeploymentID     string                           `protobuf:"bytes,8,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	Namespace        string                           `protobuf:"bytes,9,opt,name=Namespace" json:"Namespace,omitempty"`
	Groupname        string                           `protobuf:"bytes,10,opt,name=Groupname" json:"Groupname,omitempty"`
	AutoRegistration []*deploymonkey.AutoRegistration `protobuf:"bytes,11,rep,name=AutoRegistration" json:"AutoRegistration,omitempty"`
	DeployType       string                           `protobuf:"bytes,12,opt,name=DeployType" json:"DeployType,omitempty"`
	StaticTargetDir  string                           `protobuf:"bytes,13,opt,name=StaticTargetDir" json:"StaticTargetDir,omitempty"`
	Public           bool                             `protobuf:"varint,14,opt,name=Public" json:"Public,omitempty"`
	Ports            []uint32                         `protobuf:"varint,15,rep,packed,name=Ports" json:"Ports,omitempty"`
	Deploymentpath   string                           `protobuf:"bytes,16,opt,name=Deploymentpath" json:"Deploymentpath,omitempty"`
	Status           DeploymentStatus                 `protobuf:"varint,17,opt,name=Status,enum=autodeployer.DeploymentStatus" json:"Status,omitempty"`
	RuntimeSeconds   uint64                           `protobuf:"varint,18,opt,name=RuntimeSeconds" json:"RuntimeSeconds,omitempty"`
	AppReference     *deploymonkey.AppReference       `protobuf:"bytes,19,opt,name=AppReference" json:"AppReference,omitempty"`
	RepositoryID     uint64                           `protobuf:"varint,20,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	ResolvedArgs     []string                         `protobuf:"bytes,21,rep,name=ResolvedArgs" json:"ResolvedArgs,omitempty"`
}

func (m *DeployInfo) Reset()                    { *m = DeployInfo{} }
func (m *DeployInfo) String() string            { return proto.CompactTextString(m) }
func (*DeployInfo) ProtoMessage()               {}
func (*DeployInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeployInfo) GetDownloadURL() string {
	if m != nil {
		return m.DownloadURL
	}
	return ""
}

func (m *DeployInfo) GetDownloadUser() string {
	if m != nil {
		return m.DownloadUser
	}
	return ""
}

func (m *DeployInfo) GetDownloadPassword() string {
	if m != nil {
		return m.DownloadPassword
	}
	return ""
}

func (m *DeployInfo) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *DeployInfo) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *DeployInfo) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *DeployInfo) GetDeploymentID() string {
	if m != nil {
		return m.DeploymentID
	}
	return ""
}

func (m *DeployInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeployInfo) GetGroupname() string {
	if m != nil {
		return m.Groupname
	}
	return ""
}

func (m *DeployInfo) GetAutoRegistration() []*deploymonkey.AutoRegistration {
	if m != nil {
		return m.AutoRegistration
	}
	return nil
}

func (m *DeployInfo) GetDeployType() string {
	if m != nil {
		return m.DeployType
	}
	return ""
}

func (m *DeployInfo) GetStaticTargetDir() string {
	if m != nil {
		return m.StaticTargetDir
	}
	return ""
}

func (m *DeployInfo) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *DeployInfo) GetPorts() []uint32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DeployInfo) GetDeploymentpath() string {
	if m != nil {
		return m.Deploymentpath
	}
	return ""
}

func (m *DeployInfo) GetStatus() DeploymentStatus {
	if m != nil {
		return m.Status
	}
	return DeploymentStatus_PREPARING
}

func (m *DeployInfo) GetRuntimeSeconds() uint64 {
	if m != nil {
		return m.RuntimeSeconds
	}
	return 0
}

func (m *DeployInfo) GetAppReference() *deploymonkey.AppReference {
	if m != nil {
		return m.AppReference
	}
	return nil
}

func (m *DeployInfo) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *DeployInfo) GetResolvedArgs() []string {
	if m != nil {
		return m.ResolvedArgs
	}
	return nil
}

type DeployResponse struct {
	// did it succeed in starting and running?
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	// does it remain running (might be a very shortlived application)
	Running bool `protobuf:"varint,2,opt,name=Running" json:"Running,omitempty"`
	// any messages?
	Message string `protobuf:"bytes,3,opt,name=Message" json:"Message,omitempty"`
	// the local ports chosen for the application
	Ports []uint32 `protobuf:"varint,4,rep,packed,name=Ports" json:"Ports,omitempty"`
	// the user this application runs as
	Userid string `protobuf:"bytes,5,opt,name=userid" json:"userid,omitempty"`
	// an ID unique to this instance
	ID string `protobuf:"bytes,6,opt,name=ID" json:"ID,omitempty"`
}

func (m *DeployResponse) Reset()                    { *m = DeployResponse{} }
func (m *DeployResponse) String() string            { return proto.CompactTextString(m) }
func (*DeployResponse) ProtoMessage()               {}
func (*DeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeployResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DeployResponse) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *DeployResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeployResponse) GetPorts() []uint32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DeployResponse) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *DeployResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type TerminationRequest struct {
	Msgid  string `protobuf:"bytes,1,opt,name=Msgid" json:"Msgid,omitempty"`
	Failed bool   `protobuf:"varint,2,opt,name=Failed" json:"Failed,omitempty"`
}

func (m *TerminationRequest) Reset()                    { *m = TerminationRequest{} }
func (m *TerminationRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminationRequest) ProtoMessage()               {}
func (*TerminationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TerminationRequest) GetMsgid() string {
	if m != nil {
		return m.Msgid
	}
	return ""
}

func (m *TerminationRequest) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

type StartedRequest struct {
	Msgid          string   `protobuf:"bytes,1,opt,name=Msgid" json:"Msgid,omitempty"`
	DownloadFailed bool     `protobuf:"varint,2,opt,name=DownloadFailed" json:"DownloadFailed,omitempty"`
	Args           []string `protobuf:"bytes,3,rep,name=Args" json:"Args,omitempty"`
}

func (m *StartedRequest) Reset()                    { *m = StartedRequest{} }
func (m *StartedRequest) String() string            { return proto.CompactTextString(m) }
func (*StartedRequest) ProtoMessage()               {}
func (*StartedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StartedRequest) GetMsgid() string {
	if m != nil {
		return m.Msgid
	}
	return ""
}

func (m *StartedRequest) GetDownloadFailed() bool {
	if m != nil {
		return m.DownloadFailed
	}
	return false
}

func (m *StartedRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

// sent by autodeployer_starter to itself
type StartupRequest struct {
	Msgid string `protobuf:"bytes,1,opt,name=Msgid" json:"Msgid,omitempty"`
	PID   uint64 `protobuf:"varint,2,opt,name=PID" json:"PID,omitempty"`
}

func (m *StartupRequest) Reset()                    { *m = StartupRequest{} }
func (m *StartupRequest) String() string            { return proto.CompactTextString(m) }
func (*StartupRequest) ProtoMessage()               {}
func (*StartupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StartupRequest) GetMsgid() string {
	if m != nil {
		return m.Msgid
	}
	return ""
}

func (m *StartupRequest) GetPID() uint64 {
	if m != nil {
		return m.PID
	}
	return 0
}

// sent by autodeployer to its _starter
type StartupResponse struct {
	URL              string   `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	DownloadUser     string   `protobuf:"bytes,2,opt,name=DownloadUser" json:"DownloadUser,omitempty"`
	DownloadPassword string   `protobuf:"bytes,3,opt,name=DownloadPassword" json:"DownloadPassword,omitempty"`
	Binary           string   `protobuf:"bytes,4,opt,name=Binary" json:"Binary,omitempty"`
	Args             []string `protobuf:"bytes,5,rep,name=Args" json:"Args,omitempty"`
	WorkingDir       string   `protobuf:"bytes,6,opt,name=WorkingDir" json:"WorkingDir,omitempty"`
	// max resource limits for the process before it's killed
	Limits       *deploymonkey.Limits       `protobuf:"bytes,7,opt,name=Limits" json:"Limits,omitempty"`
	SecureArgs   map[string]string          `protobuf:"bytes,8,rep,name=SecureArgs" json:"SecureArgs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AppReference *deploymonkey.AppReference `protobuf:"bytes,9,opt,name=AppReference" json:"AppReference,omitempty"`
	// internal temporary flag. if true starter.go will execute SetRLimit to limit memory. if false it will do no such thing
	// eventually we migrate fully to cgroups and then this will be irrelevant
	UseSetRLimit bool `protobuf:"varint,10,opt,name=UseSetRLimit" json:"UseSetRLimit,omitempty"`
}

func (m *StartupResponse) Reset()                    { *m = StartupResponse{} }
func (m *StartupResponse) String() string            { return proto.CompactTextString(m) }
func (*StartupResponse) ProtoMessage()               {}
func (*StartupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StartupResponse) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *StartupResponse) GetDownloadUser() string {
	if m != nil {
		return m.DownloadUser
	}
	return ""
}

func (m *StartupResponse) GetDownloadPassword() string {
	if m != nil {
		return m.DownloadPassword
	}
	return ""
}

func (m *StartupResponse) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *StartupResponse) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *StartupResponse) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

func (m *StartupResponse) GetLimits() *deploymonkey.Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *StartupResponse) GetSecureArgs() map[string]string {
	if m != nil {
		return m.SecureArgs
	}
	return nil
}

func (m *StartupResponse) GetAppReference() *deploymonkey.AppReference {
	if m != nil {
		return m.AppReference
	}
	return nil
}

func (m *StartupResponse) GetUseSetRLimit() bool {
	if m != nil {
		return m.UseSetRLimit
	}
	return false
}

// sent by the starter once download completed
type ResourceRequest struct {
	Msgid string `protobuf:"bytes,1,opt,name=Msgid" json:"Msgid,omitempty"`
	Ports int32  `protobuf:"varint,2,opt,name=Ports" json:"Ports,omitempty"`
}

func (m *ResourceRequest) Reset()                    { *m = ResourceRequest{} }
func (m *ResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*ResourceRequest) ProtoMessage()               {}
func (*ResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ResourceRequest) GetMsgid() string {
	if m != nil {
		return m.Msgid
	}
	return ""
}

func (m *ResourceRequest) GetPorts() int32 {
	if m != nil {
		return m.Ports
	}
	return 0
}

// autodeployer sents to starter
type ResourceResponse struct {
	Ports []int32 `protobuf:"varint,1,rep,packed,name=Ports" json:"Ports,omitempty"`
}

func (m *ResourceResponse) Reset()                    { *m = ResourceResponse{} }
func (m *ResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*ResourceResponse) ProtoMessage()               {}
func (*ResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ResourceResponse) GetPorts() []int32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type DeployedApp struct {
	// autodeployer "StartupMsg"
	ID             string           `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Deployment     *DeployInfo      `protobuf:"bytes,2,opt,name=Deployment" json:"Deployment,omitempty"`
	DeployRequest  *DeployRequest   `protobuf:"bytes,3,opt,name=DeployRequest" json:"DeployRequest,omitempty"`
	Ports          []uint32         `protobuf:"varint,4,rep,packed,name=Ports" json:"Ports,omitempty"`
	Status         DeploymentStatus `protobuf:"varint,5,opt,name=Status,enum=autodeployer.DeploymentStatus" json:"Status,omitempty"`
	RuntimeSeconds uint64           `protobuf:"varint,6,opt,name=RuntimeSeconds" json:"RuntimeSeconds,omitempty"`
}

func (m *DeployedApp) Reset()                    { *m = DeployedApp{} }
func (m *DeployedApp) String() string            { return proto.CompactTextString(m) }
func (*DeployedApp) ProtoMessage()               {}
func (*DeployedApp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeployedApp) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DeployedApp) GetDeployment() *DeployInfo {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (m *DeployedApp) GetDeployRequest() *DeployRequest {
	if m != nil {
		return m.DeployRequest
	}
	return nil
}

func (m *DeployedApp) GetPorts() []uint32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DeployedApp) GetStatus() DeploymentStatus {
	if m != nil {
		return m.Status
	}
	return DeploymentStatus_PREPARING
}

func (m *DeployedApp) GetRuntimeSeconds() uint64 {
	if m != nil {
		return m.RuntimeSeconds
	}
	return 0
}

type InfoResponse struct {
	Apps []*DeployedApp `protobuf:"bytes,1,rep,name=Apps" json:"Apps,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *InfoResponse) GetApps() []*DeployedApp {
	if m != nil {
		return m.Apps
	}
	return nil
}

type UndeployRequest struct {
	// this will match on both:
	// the startup message (which is internal to autodeployer) - query it to get one
	// AND the DeploymentID (as was submitted in DeployRequest)
	ID    string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Block bool   `protobuf:"varint,2,opt,name=Block" json:"Block,omitempty"`
}

func (m *UndeployRequest) Reset()                    { *m = UndeployRequest{} }
func (m *UndeployRequest) String() string            { return proto.CompactTextString(m) }
func (*UndeployRequest) ProtoMessage()               {}
func (*UndeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UndeployRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UndeployRequest) GetBlock() bool {
	if m != nil {
		return m.Block
	}
	return false
}

type UndeployResponse struct {
}

func (m *UndeployResponse) Reset()                    { *m = UndeployResponse{} }
func (m *UndeployResponse) String() string            { return proto.CompactTextString(m) }
func (*UndeployResponse) ProtoMessage()               {}
func (*UndeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type MachineInfoRequest struct {
}

func (m *MachineInfoRequest) Reset()                    { *m = MachineInfoRequest{} }
func (m *MachineInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*MachineInfoRequest) ProtoMessage()               {}
func (*MachineInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type MachineInfoResponse struct {
	MachineGroup        []string `protobuf:"bytes,1,rep,name=MachineGroup" json:"MachineGroup,omitempty"`
	AutoDeployerVersion uint64   `protobuf:"varint,2,opt,name=AutoDeployerVersion" json:"AutoDeployerVersion,omitempty"`
	Stopping            bool     `protobuf:"varint,3,opt,name=Stopping" json:"Stopping,omitempty"`
	AutodeployerBinary  string   `protobuf:"bytes,4,opt,name=AutodeployerBinary" json:"AutodeployerBinary,omitempty"`
}

func (m *MachineInfoResponse) Reset()                    { *m = MachineInfoResponse{} }
func (m *MachineInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MachineInfoResponse) ProtoMessage()               {}
func (*MachineInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MachineInfoResponse) GetMachineGroup() []string {
	if m != nil {
		return m.MachineGroup
	}
	return nil
}

func (m *MachineInfoResponse) GetAutoDeployerVersion() uint64 {
	if m != nil {
		return m.AutoDeployerVersion
	}
	return 0
}

func (m *MachineInfoResponse) GetStopping() bool {
	if m != nil {
		return m.Stopping
	}
	return false
}

func (m *MachineInfoResponse) GetAutodeployerBinary() string {
	if m != nil {
		return m.AutodeployerBinary
	}
	return ""
}

type URLRequest struct {
	URL           string `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ForceDownload bool   `protobuf:"varint,2,opt,name=ForceDownload" json:"ForceDownload,omitempty"`
}

func (m *URLRequest) Reset()                    { *m = URLRequest{} }
func (m *URLRequest) String() string            { return proto.CompactTextString(m) }
func (*URLRequest) ProtoMessage()               {}
func (*URLRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *URLRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *URLRequest) GetForceDownload() bool {
	if m != nil {
		return m.ForceDownload
	}
	return false
}

type URLResponse struct {
	URL             string `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	BytesDownloaded uint64 `protobuf:"varint,2,opt,name=BytesDownloaded" json:"BytesDownloaded,omitempty"`
	TotalBytes      uint64 `protobuf:"varint,3,opt,name=TotalBytes" json:"TotalBytes,omitempty"`
	CacheDisabled   bool   `protobuf:"varint,4,opt,name=CacheDisabled" json:"CacheDisabled,omitempty"`
}

func (m *URLResponse) Reset()                    { *m = URLResponse{} }
func (m *URLResponse) String() string            { return proto.CompactTextString(m) }
func (*URLResponse) ProtoMessage()               {}
func (*URLResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *URLResponse) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *URLResponse) GetBytesDownloaded() uint64 {
	if m != nil {
		return m.BytesDownloaded
	}
	return 0
}

func (m *URLResponse) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *URLResponse) GetCacheDisabled() bool {
	if m != nil {
		return m.CacheDisabled
	}
	return false
}

type PackageInstallRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *PackageInstallRequest) Reset()                    { *m = PackageInstallRequest{} }
func (m *PackageInstallRequest) String() string            { return proto.CompactTextString(m) }
func (*PackageInstallRequest) ProtoMessage()               {}
func (*PackageInstallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PackageInstallRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PackageInstallResponse struct {
	Name      string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Installed bool   `protobuf:"varint,2,opt,name=Installed" json:"Installed,omitempty"`
}

func (m *PackageInstallResponse) Reset()                    { *m = PackageInstallResponse{} }
func (m *PackageInstallResponse) String() string            { return proto.CompactTextString(m) }
func (*PackageInstallResponse) ProtoMessage()               {}
func (*PackageInstallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PackageInstallResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackageInstallResponse) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

type StopRequest struct {
	IfNotVersion uint64 `protobuf:"varint,1,opt,name=IfNotVersion" json:"IfNotVersion,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *StopRequest) GetIfNotVersion() uint64 {
	if m != nil {
		return m.IfNotVersion
	}
	return 0
}

type StopResponse struct {
	Version  uint64 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	Stopping bool   `protobuf:"varint,2,opt,name=Stopping" json:"Stopping,omitempty"`
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *StopResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StopResponse) GetStopping() bool {
	if m != nil {
		return m.Stopping
	}
	return false
}

type BinaryDownload struct {
	TargetFilename string `protobuf:"bytes,1,opt,name=TargetFilename" json:"TargetFilename,omitempty"`
	Data           []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *BinaryDownload) Reset()                    { *m = BinaryDownload{} }
func (m *BinaryDownload) String() string            { return proto.CompactTextString(m) }
func (*BinaryDownload) ProtoMessage()               {}
func (*BinaryDownload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *BinaryDownload) GetTargetFilename() string {
	if m != nil {
		return m.TargetFilename
	}
	return ""
}

func (m *BinaryDownload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DeployRequest)(nil), "autodeployer.DeployRequest")
	proto.RegisterType((*DeployInfo)(nil), "autodeployer.DeployInfo")
	proto.RegisterType((*DeployResponse)(nil), "autodeployer.DeployResponse")
	proto.RegisterType((*EmptyResponse)(nil), "autodeployer.EmptyResponse")
	proto.RegisterType((*TerminationRequest)(nil), "autodeployer.TerminationRequest")
	proto.RegisterType((*StartedRequest)(nil), "autodeployer.StartedRequest")
	proto.RegisterType((*StartupRequest)(nil), "autodeployer.StartupRequest")
	proto.RegisterType((*StartupResponse)(nil), "autodeployer.StartupResponse")
	proto.RegisterType((*ResourceRequest)(nil), "autodeployer.ResourceRequest")
	proto.RegisterType((*ResourceResponse)(nil), "autodeployer.ResourceResponse")
	proto.RegisterType((*InfoRequest)(nil), "autodeployer.InfoRequest")
	proto.RegisterType((*DeployedApp)(nil), "autodeployer.DeployedApp")
	proto.RegisterType((*InfoResponse)(nil), "autodeployer.InfoResponse")
	proto.RegisterType((*UndeployRequest)(nil), "autodeployer.UndeployRequest")
	proto.RegisterType((*UndeployResponse)(nil), "autodeployer.UndeployResponse")
	proto.RegisterType((*MachineInfoRequest)(nil), "autodeployer.MachineInfoRequest")
	proto.RegisterType((*MachineInfoResponse)(nil), "autodeployer.MachineInfoResponse")
	proto.RegisterType((*URLRequest)(nil), "autodeployer.URLRequest")
	proto.RegisterType((*URLResponse)(nil), "autodeployer.URLResponse")
	proto.RegisterType((*PackageInstallRequest)(nil), "autodeployer.PackageInstallRequest")
	proto.RegisterType((*PackageInstallResponse)(nil), "autodeployer.PackageInstallResponse")
	proto.RegisterType((*StopRequest)(nil), "autodeployer.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "autodeployer.StopResponse")
	proto.RegisterType((*BinaryDownload)(nil), "autodeployer.BinaryDownload")
	proto.RegisterEnum("autodeployer.DeploymentStatus", DeploymentStatus_name, DeploymentStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AutoDeployer service

type AutoDeployerClient interface {
	// deploy an application
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	Undeploy(ctx context.Context, in *UndeployRequest, opts ...grpc.CallOption) (*UndeployResponse, error)
	// once we re-executed ourselves, we send this message to our selves
	InternalStartup(ctx context.Context, in *StartupRequest, opts ...grpc.CallOption) (*StartupResponse, error)
	// sent by the starter to ourselves
	AllocResources(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	// sent by the starter to ourselves
	Terminated(ctx context.Context, in *TerminationRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// sent by the starter to ourselves
	Started(ctx context.Context, in *StartedRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// what's running??
	GetDeployments(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// what kind of machine are we running on?
	// name/speed/ram/bla
	GetMachineInfo(ctx context.Context, in *MachineInfoRequest, opts ...grpc.CallOption) (*MachineInfoResponse, error)
	// "undo" all actions (so they will be re-evaluated and applied on next scan)
	ClearActions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// shutdown autodeployer (this won't send a return message)
	StopAutodeployer(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// download the "DownloadURL".
	Download(ctx context.Context, in *StartedRequest, opts ...grpc.CallOption) (AutoDeployer_DownloadClient, error)
	// start a download and put it into cache
	CacheURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error)
	// install package (Asynchronous)
	InstallPackage(ctx context.Context, in *PackageInstallRequest, opts ...grpc.CallOption) (*PackageInstallResponse, error)
	// check if package is installed
	CheckPackage(ctx context.Context, in *PackageInstallRequest, opts ...grpc.CallOption) (*PackageInstallResponse, error)
}

type autoDeployerClient struct {
	cc *grpc.ClientConn
}

func NewAutoDeployerClient(cc *grpc.ClientConn) AutoDeployerClient {
	return &autoDeployerClient{cc}
}

func (c *autoDeployerClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) Undeploy(ctx context.Context, in *UndeployRequest, opts ...grpc.CallOption) (*UndeployResponse, error) {
	out := new(UndeployResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/Undeploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) InternalStartup(ctx context.Context, in *StartupRequest, opts ...grpc.CallOption) (*StartupResponse, error) {
	out := new(StartupResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/InternalStartup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) AllocResources(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/AllocResources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) Terminated(ctx context.Context, in *TerminationRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/Terminated", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) Started(ctx context.Context, in *StartedRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/Started", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) GetDeployments(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/GetDeployments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) GetMachineInfo(ctx context.Context, in *MachineInfoRequest, opts ...grpc.CallOption) (*MachineInfoResponse, error) {
	out := new(MachineInfoResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/GetMachineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) ClearActions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/ClearActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) StopAutodeployer(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/StopAutodeployer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) Download(ctx context.Context, in *StartedRequest, opts ...grpc.CallOption) (AutoDeployer_DownloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AutoDeployer_serviceDesc.Streams[0], c.cc, "/autodeployer.AutoDeployer/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoDeployerDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutoDeployer_DownloadClient interface {
	Recv() (*BinaryDownload, error)
	grpc.ClientStream
}

type autoDeployerDownloadClient struct {
	grpc.ClientStream
}

func (x *autoDeployerDownloadClient) Recv() (*BinaryDownload, error) {
	m := new(BinaryDownload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *autoDeployerClient) CacheURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error) {
	out := new(URLResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/CacheURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) InstallPackage(ctx context.Context, in *PackageInstallRequest, opts ...grpc.CallOption) (*PackageInstallResponse, error) {
	out := new(PackageInstallResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/InstallPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoDeployerClient) CheckPackage(ctx context.Context, in *PackageInstallRequest, opts ...grpc.CallOption) (*PackageInstallResponse, error) {
	out := new(PackageInstallResponse)
	err := grpc.Invoke(ctx, "/autodeployer.AutoDeployer/CheckPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AutoDeployer service

type AutoDeployerServer interface {
	// deploy an application
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	Undeploy(context.Context, *UndeployRequest) (*UndeployResponse, error)
	// once we re-executed ourselves, we send this message to our selves
	InternalStartup(context.Context, *StartupRequest) (*StartupResponse, error)
	// sent by the starter to ourselves
	AllocResources(context.Context, *ResourceRequest) (*ResourceResponse, error)
	// sent by the starter to ourselves
	Terminated(context.Context, *TerminationRequest) (*EmptyResponse, error)
	// sent by the starter to ourselves
	Started(context.Context, *StartedRequest) (*EmptyResponse, error)
	// what's running??
	GetDeployments(context.Context, *InfoRequest) (*InfoResponse, error)
	// what kind of machine are we running on?
	// name/speed/ram/bla
	GetMachineInfo(context.Context, *MachineInfoRequest) (*MachineInfoResponse, error)
	// "undo" all actions (so they will be re-evaluated and applied on next scan)
	ClearActions(context.Context, *common.Void) (*common.Void, error)
	// shutdown autodeployer (this won't send a return message)
	StopAutodeployer(context.Context, *StopRequest) (*StopResponse, error)
	// download the "DownloadURL".
	Download(*StartedRequest, AutoDeployer_DownloadServer) error
	// start a download and put it into cache
	CacheURL(context.Context, *URLRequest) (*URLResponse, error)
	// install package (Asynchronous)
	InstallPackage(context.Context, *PackageInstallRequest) (*PackageInstallResponse, error)
	// check if package is installed
	CheckPackage(context.Context, *PackageInstallRequest) (*PackageInstallResponse, error)
}

func RegisterAutoDeployerServer(s *grpc.Server, srv AutoDeployerServer) {
	s.RegisterService(&_AutoDeployer_serviceDesc, srv)
}

func _AutoDeployer_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_Undeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).Undeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/Undeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).Undeploy(ctx, req.(*UndeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_InternalStartup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).InternalStartup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/InternalStartup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).InternalStartup(ctx, req.(*StartupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_AllocResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).AllocResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/AllocResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).AllocResources(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_Terminated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).Terminated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/Terminated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).Terminated(ctx, req.(*TerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_Started_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).Started(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/Started",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).Started(ctx, req.(*StartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_GetDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).GetDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/GetDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).GetDeployments(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_GetMachineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).GetMachineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/GetMachineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).GetMachineInfo(ctx, req.(*MachineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_ClearActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).ClearActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/ClearActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).ClearActions(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_StopAutodeployer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).StopAutodeployer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/StopAutodeployer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).StopAutodeployer(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutoDeployerServer).Download(m, &autoDeployerDownloadServer{stream})
}

type AutoDeployer_DownloadServer interface {
	Send(*BinaryDownload) error
	grpc.ServerStream
}

type autoDeployerDownloadServer struct {
	grpc.ServerStream
}

func (x *autoDeployerDownloadServer) Send(m *BinaryDownload) error {
	return x.ServerStream.SendMsg(m)
}

func _AutoDeployer_CacheURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).CacheURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/CacheURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).CacheURL(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_InstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).InstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/InstallPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).InstallPackage(ctx, req.(*PackageInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoDeployer_CheckPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoDeployerServer).CheckPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autodeployer.AutoDeployer/CheckPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoDeployerServer).CheckPackage(ctx, req.(*PackageInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutoDeployer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "autodeployer.AutoDeployer",
	HandlerType: (*AutoDeployerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _AutoDeployer_Deploy_Handler,
		},
		{
			MethodName: "Undeploy",
			Handler:    _AutoDeployer_Undeploy_Handler,
		},
		{
			MethodName: "InternalStartup",
			Handler:    _AutoDeployer_InternalStartup_Handler,
		},
		{
			MethodName: "AllocResources",
			Handler:    _AutoDeployer_AllocResources_Handler,
		},
		{
			MethodName: "Terminated",
			Handler:    _AutoDeployer_Terminated_Handler,
		},
		{
			MethodName: "Started",
			Handler:    _AutoDeployer_Started_Handler,
		},
		{
			MethodName: "GetDeployments",
			Handler:    _AutoDeployer_GetDeployments_Handler,
		},
		{
			MethodName: "GetMachineInfo",
			Handler:    _AutoDeployer_GetMachineInfo_Handler,
		},
		{
			MethodName: "ClearActions",
			Handler:    _AutoDeployer_ClearActions_Handler,
		},
		{
			MethodName: "StopAutodeployer",
			Handler:    _AutoDeployer_StopAutodeployer_Handler,
		},
		{
			MethodName: "CacheURL",
			Handler:    _AutoDeployer_CacheURL_Handler,
		},
		{
			MethodName: "InstallPackage",
			Handler:    _AutoDeployer_InstallPackage_Handler,
		},
		{
			MethodName: "CheckPackage",
			Handler:    _AutoDeployer_CheckPackage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _AutoDeployer_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/golang.conradwood.net/apis/autodeployer/autodeployer.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/autodeployer/autodeployer.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x58, 0xdd, 0x8e, 0xdb, 0xc4,
	0x17, 0xff, 0x67, 0xf3, 0xb1, 0xc9, 0x49, 0x36, 0xc9, 0x7f, 0xba, 0xad, 0xdc, 0xd0, 0xae, 0x82,
	0xa9, 0x20, 0x14, 0x9a, 0x96, 0x45, 0x82, 0xaa, 0x52, 0x41, 0xd9, 0x38, 0xdd, 0xa6, 0xec, 0x97,
	0x26, 0xd9, 0x16, 0xc4, 0xd5, 0xac, 0x3d, 0xcd, 0x5a, 0xeb, 0x78, 0x8c, 0xc7, 0x6e, 0x95, 0x2b,
	0x1e, 0x01, 0x1e, 0x80, 0x47, 0xe0, 0x9e, 0xc7, 0xe1, 0x92, 0x57, 0xe0, 0x12, 0xcd, 0x78, 0x1c,
	0x7f, 0x24, 0x8d, 0x40, 0x45, 0x42, 0x42, 0x5c, 0xc5, 0xe7, 0x37, 0xbf, 0x39, 0x73, 0xe6, 0xcc,
	0x39, 0xbf, 0x19, 0x05, 0x06, 0x9e, 0xcf, 0x02, 0xc6, 0xef, 0xcf, 0x98, 0x43, 0xdc, 0x59, 0xdf,
	0x64, 0xae, 0x4f, 0xac, 0xd7, 0x8c, 0x59, 0x7d, 0x97, 0x06, 0xf7, 0x89, 0x67, 0xf3, 0xfb, 0x24,
	0x0c, 0x98, 0x45, 0x3d, 0x87, 0x2d, 0xa8, 0x9f, 0x31, 0xfa, 0x72, 0x2e, 0x6a, 0xa4, 0xb1, 0x4e,
	0x7f, 0x83, 0x27, 0x93, 0xcd, 0xe7, 0xcc, 0x55, 0x3f, 0xd1, 0xec, 0xce, 0xa3, 0x0d, 0xfc, 0xc8,
	0xe9, 0x9c, 0xb9, 0x57, 0x74, 0x91, 0x31, 0xa2, 0xb9, 0xfa, 0x6f, 0x25, 0xd8, 0x31, 0x24, 0x8c,
	0xe9, 0x77, 0x21, 0xe5, 0x01, 0xea, 0x42, 0xdd, 0x60, 0xaf, 0x5d, 0x87, 0x11, 0xeb, 0x1c, 0x1f,
	0x69, 0x85, 0x6e, 0xa1, 0x57, 0xc3, 0x69, 0x08, 0xe9, 0xd0, 0x58, 0x9a, 0x9c, 0xfa, 0xda, 0x96,
	0xa4, 0x64, 0x30, 0x74, 0x17, 0xda, 0xb1, 0x7d, 0x46, 0x38, 0x7f, 0xcd, 0x7c, 0x4b, 0x2b, 0x4a,
	0xde, 0x0a, 0x8e, 0x6e, 0x40, 0xe5, 0xc0, 0x76, 0x89, 0xbf, 0xd0, 0x4a, 0x92, 0xa1, 0x2c, 0x84,
	0xa0, 0x34, 0xf0, 0x67, 0x5c, 0x2b, 0x77, 0x8b, 0xbd, 0x1a, 0x96, 0xdf, 0x48, 0x83, 0xed, 0x83,
	0xd0, 0x76, 0xac, 0xb1, 0xa1, 0x6d, 0x77, 0x0b, 0xbd, 0x12, 0x8e, 0x4d, 0x19, 0x55, 0xb4, 0x3f,
	0xea, 0x06, 0x63, 0x43, 0xab, 0xaa, 0xa8, 0x52, 0x18, 0xba, 0x05, 0xb5, 0x13, 0x32, 0xa7, 0xdc,
	0x23, 0x26, 0xd5, 0x6a, 0x92, 0x90, 0x00, 0x62, 0xf4, 0xd0, 0x67, 0xa1, 0xe7, 0x92, 0x39, 0xd5,
	0x20, 0x1a, 0x5d, 0x02, 0xe8, 0x19, 0xb4, 0x07, 0x61, 0xc0, 0x30, 0x9d, 0xd9, 0x3c, 0xf0, 0x49,
	0x60, 0x33, 0x57, 0xab, 0x77, 0x8b, 0xbd, 0xfa, 0xfe, 0x5e, 0x3f, 0x93, 0xd8, 0x3c, 0x0b, 0xaf,
	0xcc, 0x43, 0x7b, 0x00, 0x51, 0x5c, 0xd3, 0x85, 0x47, 0xb5, 0x86, 0x5c, 0x2a, 0x85, 0xa0, 0x1e,
	0xb4, 0x26, 0x01, 0x09, 0x6c, 0x73, 0x4a, 0xfc, 0x19, 0x0d, 0x0c, 0xdb, 0xd7, 0x76, 0x24, 0x29,
	0x0f, 0x8b, 0xdc, 0x9d, 0x85, 0x17, 0x8e, 0x6d, 0x6a, 0xcd, 0x6e, 0xa1, 0x57, 0xc5, 0xca, 0x42,
	0x1f, 0x43, 0xe5, 0xc8, 0x9e, 0xdb, 0x01, 0xd7, 0x5a, 0xdd, 0x42, 0xaf, 0xbe, 0xbf, 0x9b, 0x8d,
	0x31, 0x1a, 0xc3, 0x8a, 0x83, 0xbe, 0x80, 0xc6, 0xc0, 0xf3, 0x30, 0x7d, 0x49, 0x7d, 0xea, 0x9a,
	0x54, 0x6b, 0xcb, 0x39, 0x9d, 0xdc, 0xbe, 0x52, 0x0c, 0x9c, 0xe1, 0x8b, 0xdc, 0x63, 0xea, 0x31,
	0x6e, 0x07, 0xcc, 0x5f, 0x8c, 0x0d, 0xed, 0xff, 0xf2, 0x68, 0x32, 0x98, 0xfe, 0x7b, 0x39, 0xde,
	0xf4, 0xd8, 0x7d, 0xc9, 0xfe, 0x2b, 0xb3, 0x7f, 0x45, 0x99, 0xed, 0x42, 0xf9, 0x8c, 0xf9, 0xb2,
	0xca, 0x8a, 0xbd, 0x1d, 0x1c, 0x19, 0xe8, 0x7d, 0x68, 0x26, 0xf9, 0xf0, 0x48, 0x70, 0x29, 0x0b,
	0xaa, 0x86, 0x73, 0x28, 0xfa, 0x0c, 0x2a, 0x62, 0xa1, 0x90, 0xcb, 0x82, 0x69, 0xee, 0xef, 0xf5,
	0x33, 0xda, 0x98, 0xb0, 0x23, 0x16, 0x56, 0x6c, 0xe1, 0x1f, 0x87, 0x6e, 0x60, 0xcf, 0xe9, 0x84,
	0x9a, 0xcc, 0xb5, 0xb8, 0x86, 0xe4, 0x21, 0xe5, 0xd0, 0x95, 0xb2, 0xbe, 0xf6, 0x96, 0x65, 0xbd,
	0xbb, 0x5a, 0xd6, 0x11, 0x87, 0x33, 0xe7, 0x15, 0xb5, 0x64, 0x15, 0x5d, 0x97, 0x55, 0x94, 0xc1,
	0xf4, 0x9f, 0x0a, 0x71, 0x42, 0x30, 0xe5, 0x1e, 0x73, 0x39, 0x15, 0x05, 0x36, 0x09, 0x4d, 0x93,
	0x72, 0x2e, 0x4b, 0xbf, 0x8a, 0x63, 0x53, 0x8c, 0xe0, 0xd0, 0x75, 0x6d, 0x77, 0x26, 0x2b, 0xbe,
	0x8a, 0x63, 0x53, 0x8c, 0x1c, 0x53, 0xce, 0xc9, 0x8c, 0xaa, 0x1a, 0x8f, 0xcd, 0xe4, 0x18, 0x4a,
	0xe9, 0x63, 0xb8, 0x01, 0x95, 0x90, 0x53, 0xdf, 0xb6, 0xb4, 0x72, 0x54, 0xf0, 0x91, 0x85, 0x9a,
	0xb0, 0x35, 0x36, 0xb4, 0x8a, 0xc4, 0xb6, 0xc6, 0x86, 0xde, 0x82, 0x9d, 0xd1, 0xdc, 0x0b, 0x96,
	0xc1, 0xe9, 0x07, 0x80, 0xa6, 0xd4, 0x9f, 0xdb, 0x6e, 0x54, 0x58, 0xea, 0x62, 0xd8, 0x85, 0xf2,
	0x31, 0x9f, 0xd9, 0x96, 0xea, 0xd5, 0xc8, 0x10, 0x8b, 0x3c, 0x21, 0xb6, 0x43, 0x2d, 0x15, 0xad,
	0xb2, 0xf4, 0x0b, 0x68, 0x4e, 0x02, 0xe2, 0x07, 0xd4, 0xda, 0x3c, 0x5f, 0xd4, 0x8a, 0xea, 0xd4,
	0x8c, 0x9f, 0x1c, 0xba, 0xec, 0xd2, 0x62, 0xd2, 0xa5, 0xfa, 0x43, 0xb5, 0x46, 0xe8, 0x6d, 0x5e,
	0xa3, 0x0d, 0xc5, 0xb3, 0xb1, 0x21, 0x1d, 0x97, 0xb0, 0xf8, 0xd4, 0x7f, 0x2d, 0xca, 0xd2, 0x8f,
	0xa6, 0xaa, 0x23, 0x69, 0x43, 0x31, 0x51, 0xa2, 0xe2, 0x3f, 0xad, 0x40, 0x7b, 0x00, 0x2f, 0x98,
	0x7f, 0x65, 0xbb, 0x33, 0xd1, 0x96, 0xd1, 0x61, 0xa5, 0x90, 0x94, 0xc0, 0x6f, 0xff, 0x09, 0x81,
	0x3f, 0x06, 0x98, 0x50, 0x33, 0xf4, 0xa9, 0x5c, 0xa7, 0x2a, 0xf5, 0xe4, 0x5e, 0xb6, 0xdb, 0x72,
	0xe9, 0xe8, 0x27, 0xfc, 0x91, 0x1b, 0xf8, 0x0b, 0x9c, 0x72, 0xb0, 0xd2, 0x58, 0xb5, 0xbf, 0xde,
	0x58, 0xe7, 0x9c, 0x4e, 0x68, 0x80, 0x65, 0x7c, 0x52, 0x05, 0xab, 0x38, 0x83, 0x75, 0x1e, 0x43,
	0x2b, 0x17, 0x82, 0x38, 0xa1, 0x2b, 0xba, 0x88, 0x4f, 0xe8, 0x8a, 0x2e, 0xc4, 0x79, 0xbf, 0x22,
	0x4e, 0x48, 0xd5, 0xd1, 0x44, 0xc6, 0xa3, 0xad, 0x87, 0x05, 0xfd, 0x31, 0xb4, 0x44, 0x0f, 0x86,
	0xbe, 0x49, 0x37, 0x17, 0xc7, 0xb2, 0x77, 0x84, 0x8b, 0xb2, 0xea, 0x1d, 0xbd, 0x07, 0xed, 0x64,
	0xba, 0x2a, 0x90, 0x25, 0xb3, 0xd0, 0x2d, 0x26, 0xcc, 0x1d, 0xa8, 0x8b, 0x0b, 0x4d, 0x2d, 0xa2,
	0xff, 0xb8, 0x05, 0xf5, 0xa8, 0xd7, 0xa9, 0x35, 0xf0, 0x3c, 0xd5, 0x6c, 0x85, 0xb8, 0xd9, 0xd0,
	0xc3, 0x58, 0x93, 0x85, 0xae, 0xc9, 0x35, 0xeb, 0xfb, 0xda, 0x3a, 0xdd, 0x93, 0x4e, 0x53, 0x5c,
	0x34, 0xc8, 0xbd, 0xd4, 0x64, 0x99, 0xd5, 0xf7, 0xdf, 0x59, 0x37, 0x59, 0x51, 0x70, 0xee, 0x6d,
	0xb7, 0x5e, 0x27, 0x12, 0x19, 0x2e, 0xbf, 0xa5, 0x0c, 0x57, 0xd6, 0xc9, 0xb0, 0xfe, 0x18, 0x1a,
	0x51, 0x86, 0x54, 0x1e, 0xef, 0x41, 0x69, 0xe0, 0x79, 0x51, 0x1a, 0xeb, 0xfb, 0x37, 0xd7, 0xad,
	0x26, 0x73, 0x87, 0x25, 0x4d, 0xff, 0x1c, 0x5a, 0xe7, 0xae, 0x95, 0xd9, 0x47, 0x3e, 0xa9, 0xbb,
	0x50, 0x3e, 0x70, 0x98, 0x79, 0xa5, 0xb4, 0x23, 0x32, 0x74, 0x04, 0xed, 0x64, 0xa2, 0x92, 0xb6,
	0x5d, 0x40, 0xc7, 0xc4, 0xbc, 0xb4, 0x5d, 0x9a, 0x3e, 0xb4, 0x5f, 0x0a, 0x70, 0x2d, 0x03, 0xab,
	0x48, 0x75, 0x68, 0x28, 0x58, 0x5e, 0xd0, 0x32, 0xe2, 0x1a, 0xce, 0x60, 0xe8, 0x01, 0x5c, 0x13,
	0x17, 0xaf, 0x8a, 0xdb, 0x7f, 0x4e, 0x7d, 0x2e, 0xee, 0xec, 0x48, 0x6c, 0xd6, 0x0d, 0xa1, 0x0e,
	0x54, 0x27, 0x01, 0xf3, 0x3c, 0x21, 0xf1, 0x45, 0x19, 0xf0, 0xd2, 0x46, 0x7d, 0x40, 0x83, 0x54,
	0x3a, 0x32, 0x72, 0xb1, 0x66, 0x44, 0x37, 0x00, 0xce, 0xf1, 0x51, 0x9c, 0x97, 0x55, 0x09, 0xbb,
	0x03, 0x3b, 0x4f, 0x98, 0x6f, 0xd2, 0x58, 0x8b, 0x54, 0x86, 0xb2, 0xa0, 0xfe, 0x43, 0x01, 0xea,
	0xd2, 0xcd, 0x1b, 0xa5, 0xb0, 0x07, 0xad, 0x83, 0x45, 0x40, 0x79, 0x3c, 0x45, 0xe9, 0x74, 0x09,
	0xe7, 0x61, 0x21, 0x5c, 0x53, 0x16, 0x10, 0x47, 0xe2, 0x72, 0x7f, 0x25, 0x9c, 0x42, 0x44, 0x44,
	0x43, 0x62, 0x5e, 0x52, 0xc3, 0xe6, 0xe4, 0x42, 0xe8, 0x7d, 0x29, 0x8a, 0x28, 0x03, 0xea, 0x1f,
	0xc1, 0xf5, 0x33, 0x62, 0x5e, 0x91, 0x19, 0x1d, 0xbb, 0x3c, 0x20, 0x8e, 0x13, 0x6f, 0x11, 0x41,
	0x49, 0x3c, 0xa5, 0x54, 0x6c, 0xf2, 0x5b, 0x7f, 0x06, 0x37, 0xf2, 0x64, 0xb5, 0x91, 0x35, 0x6c,
	0xf1, 0xfe, 0x52, 0xb4, 0xe5, 0x65, 0x93, 0x00, 0xfa, 0x27, 0x50, 0x17, 0x87, 0x11, 0x2f, 0xa7,
	0x43, 0x63, 0xfc, 0xf2, 0x84, 0x05, 0xf1, 0xb1, 0x16, 0xa2, 0x27, 0x40, 0x1a, 0xd3, 0x0d, 0x68,
	0x44, 0x53, 0x92, 0xbb, 0x3d, 0x4b, 0xdf, 0x5e, 0x77, 0xf2, 0x5b, 0xd9, 0x93, 0xd7, 0x8f, 0xa0,
	0x19, 0x9d, 0x69, 0x9c, 0x4b, 0xd1, 0x5f, 0xd1, 0x0b, 0xec, 0x89, 0xed, 0x50, 0x37, 0xd9, 0x46,
	0x0e, 0x15, 0x9b, 0x34, 0x48, 0x40, 0xa4, 0xc7, 0x06, 0x96, 0xdf, 0x77, 0xbf, 0x87, 0x76, 0xbe,
	0x6f, 0xd1, 0x0e, 0xd4, 0xce, 0xf0, 0xe8, 0x6c, 0x80, 0xc7, 0x27, 0x87, 0xed, 0xff, 0xa1, 0x06,
	0x54, 0x27, 0xd3, 0x01, 0x9e, 0x0a, 0xab, 0x80, 0x5a, 0x50, 0x37, 0x4e, 0x5f, 0x9c, 0x1c, 0x9d,
	0x0e, 0x0c, 0x01, 0x6c, 0xa1, 0x26, 0x00, 0x1e, 0x4d, 0x4e, 0xcf, 0xf1, 0x50, 0xd8, 0x45, 0x41,
	0x1f, 0x7d, 0x3d, 0x1a, 0x9e, 0x4f, 0x46, 0xb8, 0x5d, 0x12, 0xa3, 0xd3, 0x11, 0x3e, 0x1e, 0x9f,
	0x0c, 0xa6, 0x23, 0xa3, 0x5d, 0x16, 0xd3, 0x87, 0x83, 0xe1, 0xd3, 0x91, 0x21, 0x5d, 0xb6, 0x2b,
	0xfb, 0x3f, 0x57, 0xa1, 0x91, 0x2e, 0x7e, 0x34, 0x84, 0x4a, 0xf4, 0x8d, 0x36, 0x29, 0x56, 0xe7,
	0xd6, 0xfa, 0x41, 0x95, 0xda, 0x31, 0x54, 0xe3, 0x96, 0x46, 0xb7, 0xb3, 0xcc, 0x9c, 0x46, 0x74,
	0xf6, 0xde, 0x34, 0xac, 0x5c, 0x9d, 0x40, 0x6b, 0xec, 0x06, 0xd4, 0x77, 0x89, 0xa3, 0xae, 0x3e,
	0x74, 0xeb, 0x0d, 0x37, 0x62, 0xe4, 0xf0, 0xf6, 0xc6, 0xfb, 0x12, 0x9d, 0x42, 0x73, 0xe0, 0x38,
	0xcc, 0x8c, 0xaf, 0x0d, 0x9e, 0x0f, 0x30, 0x77, 0x1d, 0xe5, 0x03, 0x5c, 0xb9, 0x6e, 0xbe, 0x02,
	0x88, 0x5f, 0x61, 0xd4, 0x42, 0xdd, 0x2c, 0x7b, 0xf5, 0x7d, 0xd6, 0xc9, 0xa5, 0x35, 0xf3, 0xa4,
	0x43, 0x06, 0x6c, 0xab, 0xe7, 0xd8, 0xda, 0x5d, 0x2e, 0x5f, 0x69, 0x9b, 0xbd, 0x1c, 0x42, 0xf3,
	0x90, 0x06, 0x49, 0x61, 0x71, 0x94, 0x53, 0xef, 0x94, 0xa8, 0x76, 0x3a, 0xeb, 0x86, 0x94, 0xa3,
	0x73, 0xe9, 0x28, 0x25, 0xb9, 0xf9, 0xfd, 0xad, 0x8a, 0x74, 0xe7, 0xdd, 0x0d, 0x0c, 0xe5, 0xf6,
	0x2e, 0x34, 0x86, 0x0e, 0x25, 0xfe, 0xc0, 0x14, 0x89, 0xe1, 0xa8, 0xd1, 0x57, 0x7f, 0x94, 0x3c,
	0x67, 0xb6, 0xd5, 0xc9, 0x58, 0x68, 0x0c, 0x6d, 0xd1, 0x7b, 0x69, 0x4d, 0xcd, 0xef, 0x26, 0x25,
	0x04, 0xf9, 0xdd, 0x64, 0x1a, 0xfe, 0x29, 0x54, 0x97, 0x4d, 0xbb, 0x39, 0xbb, 0xb9, 0xd1, 0x6c,
	0xc3, 0x3f, 0x28, 0xa0, 0x2f, 0xa1, 0x2a, 0x75, 0x50, 0x48, 0x6e, 0xee, 0x55, 0x90, 0xc8, 0x7c,
	0xe7, 0xe6, 0x9a, 0x11, 0x15, 0xca, 0xb7, 0xd0, 0x54, 0x5a, 0xa6, 0x14, 0x11, 0xbd, 0x97, 0x25,
	0xaf, 0x55, 0xd5, 0xce, 0x9d, 0xcd, 0x24, 0xe5, 0xfc, 0x1b, 0x68, 0x0c, 0x2f, 0xa9, 0x79, 0xf5,
	0xf7, 0xbb, 0x3e, 0xf8, 0x10, 0x3e, 0x70, 0x69, 0x90, 0xfe, 0x0b, 0x4b, 0xfd, 0xa9, 0x45, 0x3c,
	0x9b, 0x67, 0x3c, 0x5c, 0x54, 0xe4, 0x3f, 0x57, 0x9f, 0xfe, 0x11, 0x00, 0x00, 0xff, 0xff, 0xba,
	0xff, 0x6f, 0xaa, 0x78, 0x13, 0x00, 0x00,
}
