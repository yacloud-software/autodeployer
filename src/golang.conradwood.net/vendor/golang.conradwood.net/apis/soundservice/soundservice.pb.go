// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/soundservice/soundservice.proto
// DO NOT EDIT!

/*
Package soundservice is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/soundservice/soundservice.proto

It has these top-level messages:
	PingResponse
	GroupList
	GroupDev
	Device
	SoundRequest
*/
package soundservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Group int32

const (
	Group_UNDEFINED     Group = 0
	Group_ALL           Group = 1
	Group_DOWNSTAIRS    Group = 2
	Group_MOBILE        Group = 3
	Group_CNW           Group = 4
	Group_ALL_SPEAKTOME Group = 5
	Group_TEA           Group = 6
	Group_CNW_DESK      Group = 7
	Group_ALARM         Group = 8
)

var Group_name = map[int32]string{
	0: "UNDEFINED",
	1: "ALL",
	2: "DOWNSTAIRS",
	3: "MOBILE",
	4: "CNW",
	5: "ALL_SPEAKTOME",
	6: "TEA",
	7: "CNW_DESK",
	8: "ALARM",
}
var Group_value = map[string]int32{
	"UNDEFINED":     0,
	"ALL":           1,
	"DOWNSTAIRS":    2,
	"MOBILE":        3,
	"CNW":           4,
	"ALL_SPEAKTOME": 5,
	"TEA":           6,
	"CNW_DESK":      7,
	"ALARM":         8,
}

func (x Group) String() string {
	return proto.EnumName(Group_name, int32(x))
}
func (Group) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DevType int32

const (
	DevType_UndevDef   DevType = 0
	DevType_Android    DevType = 1
	DevType_SpeamToMe  DevType = 2
	DevType_GoogleCast DevType = 3
)

var DevType_name = map[int32]string{
	0: "UndevDef",
	1: "Android",
	2: "SpeamToMe",
	3: "GoogleCast",
}
var DevType_value = map[string]int32{
	"UndevDef":   0,
	"Android":    1,
	"SpeamToMe":  2,
	"GoogleCast": 3,
}

func (x DevType) String() string {
	return proto.EnumName(DevType_name, int32(x))
}
func (DevType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type GroupList struct {
	Groups []*GroupDev `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *GroupList) Reset()                    { *m = GroupList{} }
func (m *GroupList) String() string            { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()               {}
func (*GroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupList) GetGroups() []*GroupDev {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GroupDev struct {
	Name    string    `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Devices []*Device `protobuf:"bytes,2,rep,name=Devices" json:"Devices,omitempty"`
}

func (m *GroupDev) Reset()                    { *m = GroupDev{} }
func (m *GroupDev) String() string            { return proto.CompactTextString(m) }
func (*GroupDev) ProtoMessage()               {}
func (*GroupDev) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GroupDev) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupDev) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type Device struct {
	Name   string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Online bool    `protobuf:"varint,2,opt,name=Online" json:"Online,omitempty"`
	Type   DevType `protobuf:"varint,3,opt,name=Type,enum=soundservice.DevType" json:"Type,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *Device) GetType() DevType {
	if m != nil {
		return m.Type
	}
	return DevType_UndevDef
}

type SoundRequest struct {
	Name                string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	IncludeSoundServer  bool    `protobuf:"varint,2,opt,name=IncludeSoundServer" json:"IncludeSoundServer,omitempty"`
	IncludeAndroid      bool    `protobuf:"varint,3,opt,name=IncludeAndroid" json:"IncludeAndroid,omitempty"`
	IncludeAndroidQuiet bool    `protobuf:"varint,4,opt,name=IncludeAndroidQuiet" json:"IncludeAndroidQuiet,omitempty"`
	Repeat              uint32  `protobuf:"varint,5,opt,name=Repeat" json:"Repeat,omitempty"`
	Until               uint32  `protobuf:"varint,6,opt,name=Until" json:"Until,omitempty"`
	Groups              []Group `protobuf:"varint,7,rep,packed,name=Groups,enum=soundservice.Group" json:"Groups,omitempty"`
	Volume              uint32  `protobuf:"varint,8,opt,name=Volume" json:"Volume,omitempty"`
}

func (m *SoundRequest) Reset()                    { *m = SoundRequest{} }
func (m *SoundRequest) String() string            { return proto.CompactTextString(m) }
func (*SoundRequest) ProtoMessage()               {}
func (*SoundRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SoundRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SoundRequest) GetIncludeSoundServer() bool {
	if m != nil {
		return m.IncludeSoundServer
	}
	return false
}

func (m *SoundRequest) GetIncludeAndroid() bool {
	if m != nil {
		return m.IncludeAndroid
	}
	return false
}

func (m *SoundRequest) GetIncludeAndroidQuiet() bool {
	if m != nil {
		return m.IncludeAndroidQuiet
	}
	return false
}

func (m *SoundRequest) GetRepeat() uint32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

func (m *SoundRequest) GetUntil() uint32 {
	if m != nil {
		return m.Until
	}
	return 0
}

func (m *SoundRequest) GetGroups() []Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *SoundRequest) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "soundservice.PingResponse")
	proto.RegisterType((*GroupList)(nil), "soundservice.GroupList")
	proto.RegisterType((*GroupDev)(nil), "soundservice.GroupDev")
	proto.RegisterType((*Device)(nil), "soundservice.Device")
	proto.RegisterType((*SoundRequest)(nil), "soundservice.SoundRequest")
	proto.RegisterEnum("soundservice.Group", Group_name, Group_value)
	proto.RegisterEnum("soundservice.DevType", DevType_name, DevType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sound service

type SoundClient interface {
	Play(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (*common.Void, error)
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	ListGroups(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GroupList, error)
}

type soundClient struct {
	cc *grpc.ClientConn
}

func NewSoundClient(cc *grpc.ClientConn) SoundClient {
	return &soundClient{cc}
}

func (c *soundClient) Play(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/soundservice.Sound/Play", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/soundservice.Sound/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundClient) ListGroups(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := grpc.Invoke(ctx, "/soundservice.Sound/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sound service

type SoundServer interface {
	Play(context.Context, *SoundRequest) (*common.Void, error)
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	ListGroups(context.Context, *common.Void) (*GroupList, error)
}

func RegisterSoundServer(s *grpc.Server, srv SoundServer) {
	s.RegisterService(&_Sound_serviceDesc, srv)
}

func _Sound_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soundservice.Sound/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServer).Play(ctx, req.(*SoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sound_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soundservice.Sound/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sound_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soundservice.Sound/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServer).ListGroups(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sound_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soundservice.Sound",
	HandlerType: (*SoundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _Sound_Play_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Sound_Ping_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _Sound_ListGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/soundservice/soundservice.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/soundservice/soundservice.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0x9b, 0x40,
	0x10, 0x0d, 0xfe, 0xc0, 0x78, 0xe2, 0x58, 0xdb, 0x4d, 0x9a, 0x22, 0x9f, 0x90, 0x0f, 0x95, 0x9b,
	0x4a, 0x24, 0x72, 0x6e, 0xed, 0x89, 0x18, 0x1a, 0x59, 0xc1, 0x38, 0x05, 0x27, 0x39, 0x46, 0xd4,
	0x4c, 0x2d, 0x24, 0xbc, 0x4b, 0x01, 0xbb, 0xca, 0xaf, 0x69, 0x7f, 0x6a, 0xb5, 0x0b, 0x8e, 0x42,
	0xea, 0xf6, 0xe4, 0x9d, 0xf7, 0xde, 0xce, 0x8e, 0xe7, 0xf1, 0xe0, 0xd3, 0x8a, 0x27, 0x21, 0x5b,
	0x99, 0x4b, 0xce, 0xb2, 0x30, 0xfa, 0xc9, 0x79, 0x64, 0x32, 0x2c, 0xce, 0xc3, 0x34, 0xce, 0xcf,
	0x73, 0xbe, 0x61, 0x51, 0x8e, 0xd9, 0x36, 0x5e, 0x62, 0xad, 0x30, 0xd3, 0x8c, 0x17, 0x9c, 0xf6,
	0x5e, 0x62, 0x03, 0xf3, 0x3f, 0x9d, 0x96, 0x7c, 0xbd, 0xe6, 0xac, 0xfa, 0x29, 0x6f, 0x0f, 0xcf,
	0xa0, 0x77, 0x1b, 0xb3, 0x95, 0x8f, 0x79, 0xca, 0x59, 0x8e, 0x74, 0x00, 0xda, 0xee, 0xac, 0x2b,
	0x86, 0x32, 0xea, 0xfa, 0xcf, 0xf5, 0xf0, 0x33, 0x74, 0xaf, 0x33, 0xbe, 0x49, 0xdd, 0x38, 0x2f,
	0xa8, 0x09, 0xaa, 0x2c, 0x72, 0x5d, 0x31, 0x9a, 0xa3, 0xc3, 0xf1, 0xa9, 0x59, 0x9b, 0x4d, 0x72,
	0x36, 0x6e, 0xfd, 0x4a, 0x35, 0xf4, 0x40, 0xdb, 0x61, 0x94, 0x42, 0xcb, 0x0b, 0xd7, 0xbb, 0x07,
	0xe4, 0x99, 0x9a, 0xd0, 0xb1, 0x51, 0x5c, 0xcd, 0xf5, 0x86, 0x6c, 0x78, 0x52, 0x6f, 0x58, 0x92,
	0xfe, 0x4e, 0x34, 0x7c, 0x04, 0xb5, 0x3c, 0xee, 0xed, 0x76, 0x0a, 0xea, 0x9c, 0x25, 0x31, 0x43,
	0xbd, 0x61, 0x28, 0x23, 0xcd, 0xaf, 0x2a, 0xfa, 0x01, 0x5a, 0x8b, 0xa7, 0x14, 0xf5, 0xa6, 0xa1,
	0x8c, 0xfa, 0xe3, 0xb7, 0x7f, 0x3d, 0x21, 0x48, 0x5f, 0x4a, 0x86, 0xbf, 0x1a, 0xd0, 0x0b, 0x04,
	0xed, 0xe3, 0x8f, 0x0d, 0xe6, 0xc5, 0x3f, 0xa6, 0xa6, 0x53, 0xb6, 0x4c, 0x36, 0x11, 0x4a, 0x69,
	0x80, 0xd9, 0x16, 0xb3, 0xea, 0xcd, 0x3d, 0x0c, 0x7d, 0x0f, 0xfd, 0x0a, 0xb5, 0x58, 0x94, 0xf1,
	0x38, 0x92, 0x93, 0x68, 0xfe, 0x2b, 0x94, 0x5e, 0xc0, 0x71, 0x1d, 0xf9, 0xba, 0x89, 0xb1, 0xd0,
	0x5b, 0x52, 0xbc, 0x8f, 0x12, 0xff, 0xd8, 0xc7, 0x14, 0xc3, 0x42, 0x6f, 0x1b, 0xca, 0xe8, 0xc8,
	0xaf, 0x2a, 0x7a, 0x02, 0xed, 0x3b, 0x56, 0xc4, 0x89, 0xae, 0x4a, 0xb8, 0x2c, 0xe8, 0xc7, 0x67,
	0xf7, 0x3a, 0x46, 0x73, 0xd4, 0x1f, 0x1f, 0xef, 0x71, 0x6f, 0x67, 0x9d, 0x68, 0x7d, 0xcf, 0x93,
	0xcd, 0x1a, 0x75, 0xad, 0x6c, 0x5d, 0x56, 0x67, 0x4f, 0xd0, 0x96, 0x0a, 0x7a, 0x04, 0xdd, 0x3b,
	0xcf, 0x76, 0xbe, 0x4c, 0x3d, 0xc7, 0x26, 0x07, 0xb4, 0x03, 0x4d, 0xcb, 0x75, 0x89, 0x42, 0xfb,
	0x00, 0xf6, 0xfc, 0xc1, 0x0b, 0x16, 0xd6, 0xd4, 0x0f, 0x48, 0x83, 0x02, 0xa8, 0xb3, 0xf9, 0xd5,
	0xd4, 0x75, 0x48, 0x53, 0x88, 0x26, 0xde, 0x03, 0x69, 0xd1, 0x37, 0x70, 0x64, 0xb9, 0xee, 0x63,
	0x70, 0xeb, 0x58, 0x37, 0x8b, 0xf9, 0xcc, 0x21, 0x6d, 0xc1, 0x2d, 0x1c, 0x8b, 0xa8, 0xb4, 0x07,
	0xda, 0xc4, 0x7b, 0x78, 0xb4, 0x9d, 0xe0, 0x86, 0x74, 0x68, 0x17, 0xda, 0x96, 0x6b, 0xf9, 0x33,
	0xa2, 0x9d, 0x4d, 0xe4, 0xd7, 0x22, 0x7c, 0x12, 0x9a, 0x3b, 0x16, 0xe1, 0xd6, 0xc6, 0xef, 0xe4,
	0x80, 0x1e, 0x42, 0xa7, 0x5a, 0x0b, 0x51, 0xc4, 0x5c, 0x41, 0x8a, 0xe1, 0x7a, 0xc1, 0x67, 0x48,
	0x1a, 0x62, 0x9c, 0x6b, 0xce, 0x57, 0x09, 0x4e, 0xc2, 0xbc, 0x20, 0xcd, 0xf1, 0x6f, 0x05, 0xda,
	0xd2, 0x1c, 0x7a, 0x01, 0xad, 0xdb, 0x24, 0x7c, 0xa2, 0x83, 0xfa, 0x1a, 0x5e, 0xda, 0x3f, 0xe8,
	0x99, 0x55, 0x70, 0xee, 0x4b, 0x83, 0x5a, 0x22, 0x37, 0xb4, 0x86, 0x0e, 0x5e, 0xdd, 0xaf, 0x25,
	0xeb, 0x12, 0x40, 0x04, 0xa7, 0xda, 0x69, 0xfd, 0xde, 0xbb, 0x3d, 0xeb, 0x17, 0xe2, 0xab, 0x21,
	0x18, 0x0c, 0x8b, 0x97, 0x69, 0x16, 0x49, 0xae, 0xa9, 0xbf, 0xa9, 0x32, 0xc9, 0x97, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x39, 0x03, 0x95, 0x3e, 0x45, 0x04, 0x00, 0x00,
}
