// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/wiki/wiki.proto
// DO NOT EDIT!

/*
Package wiki is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/wiki/wiki.proto

It has these top-level messages:
	SQLPartition
	SQLPage
	SQLVersion
	PageRequest
	HTTPPageRequest
	HTMLPage
	SourcePage
	Page
	PageSummary
	PageList
*/
package wiki

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SQLPartition struct {
	ID   uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *SQLPartition) Reset()                    { *m = SQLPartition{} }
func (m *SQLPartition) String() string            { return proto.CompactTextString(m) }
func (*SQLPartition) ProtoMessage()               {}
func (*SQLPartition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SQLPartition) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SQLPartition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SQLPage struct {
	ID              uint64        `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Partition       *SQLPartition `protobuf:"bytes,2,opt,name=Partition" json:"Partition,omitempty"`
	Path            string        `protobuf:"bytes,3,opt,name=Path" json:"Path,omitempty"`
	Creator         string        `protobuf:"bytes,4,opt,name=Creator" json:"Creator,omitempty"`
	Updator         string        `protobuf:"bytes,5,opt,name=Updator" json:"Updator,omitempty"`
	Created         uint32        `protobuf:"varint,6,opt,name=Created" json:"Created,omitempty"`
	Updated         uint32        `protobuf:"varint,7,opt,name=Updated" json:"Updated,omitempty"`
	LatestObjectKey string        `protobuf:"bytes,8,opt,name=LatestObjectKey" json:"LatestObjectKey,omitempty"`
	PageContent     string        `protobuf:"bytes,9,opt,name=PageContent" json:"PageContent,omitempty"`
}

func (m *SQLPage) Reset()                    { *m = SQLPage{} }
func (m *SQLPage) String() string            { return proto.CompactTextString(m) }
func (*SQLPage) ProtoMessage()               {}
func (*SQLPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SQLPage) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SQLPage) GetPartition() *SQLPartition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *SQLPage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SQLPage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SQLPage) GetUpdator() string {
	if m != nil {
		return m.Updator
	}
	return ""
}

func (m *SQLPage) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *SQLPage) GetUpdated() uint32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *SQLPage) GetLatestObjectKey() string {
	if m != nil {
		return m.LatestObjectKey
	}
	return ""
}

func (m *SQLPage) GetPageContent() string {
	if m != nil {
		return m.PageContent
	}
	return ""
}

type SQLVersion struct {
	ID        uint64   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	SQLPage   *SQLPage `protobuf:"bytes,2,opt,name=SQLPage" json:"SQLPage,omitempty"`
	Creator   string   `protobuf:"bytes,3,opt,name=Creator" json:"Creator,omitempty"`
	Updated   uint32   `protobuf:"varint,4,opt,name=Updated" json:"Updated,omitempty"`
	ObjectKey string   `protobuf:"bytes,8,opt,name=ObjectKey" json:"ObjectKey,omitempty"`
}

func (m *SQLVersion) Reset()                    { *m = SQLVersion{} }
func (m *SQLVersion) String() string            { return proto.CompactTextString(m) }
func (*SQLVersion) ProtoMessage()               {}
func (*SQLVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SQLVersion) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SQLVersion) GetSQLPage() *SQLPage {
	if m != nil {
		return m.SQLPage
	}
	return nil
}

func (m *SQLVersion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SQLVersion) GetUpdated() uint32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *SQLVersion) GetObjectKey() string {
	if m != nil {
		return m.ObjectKey
	}
	return ""
}

type PageRequest struct {
	WikiPath   string `protobuf:"bytes,1,opt,name=WikiPath" json:"WikiPath,omitempty"`
	Partition  string `protobuf:"bytes,2,opt,name=Partition" json:"Partition,omitempty"`
	LinkPrefix string `protobuf:"bytes,3,opt,name=LinkPrefix" json:"LinkPrefix,omitempty"`
}

func (m *PageRequest) Reset()                    { *m = PageRequest{} }
func (m *PageRequest) String() string            { return proto.CompactTextString(m) }
func (*PageRequest) ProtoMessage()               {}
func (*PageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PageRequest) GetWikiPath() string {
	if m != nil {
		return m.WikiPath
	}
	return ""
}

func (m *PageRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *PageRequest) GetLinkPrefix() string {
	if m != nil {
		return m.LinkPrefix
	}
	return ""
}

type HTTPPageRequest struct {
	PageRequest  *PageRequest           `protobuf:"bytes,1,opt,name=PageRequest" json:"PageRequest,omitempty"`
	ServeRequest *h2gproxy.ServeRequest `protobuf:"bytes,2,opt,name=ServeRequest" json:"ServeRequest,omitempty"`
}

func (m *HTTPPageRequest) Reset()                    { *m = HTTPPageRequest{} }
func (m *HTTPPageRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPPageRequest) ProtoMessage()               {}
func (*HTTPPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HTTPPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

func (m *HTTPPageRequest) GetServeRequest() *h2gproxy.ServeRequest {
	if m != nil {
		return m.ServeRequest
	}
	return nil
}

type HTMLPage struct {
	Path        string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Body        string `protobuf:"bytes,2,opt,name=Body" json:"Body,omitempty"`
	IsEmpty     bool   `protobuf:"varint,3,opt,name=IsEmpty" json:"IsEmpty,omitempty"`
	DoNotModify bool   `protobuf:"varint,4,opt,name=DoNotModify" json:"DoNotModify,omitempty"`
}

func (m *HTMLPage) Reset()                    { *m = HTMLPage{} }
func (m *HTMLPage) String() string            { return proto.CompactTextString(m) }
func (*HTMLPage) ProtoMessage()               {}
func (*HTMLPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HTMLPage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTMLPage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *HTMLPage) GetIsEmpty() bool {
	if m != nil {
		return m.IsEmpty
	}
	return false
}

func (m *HTMLPage) GetDoNotModify() bool {
	if m != nil {
		return m.DoNotModify
	}
	return false
}

type SourcePage struct {
	Path   string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source" json:"Source,omitempty"`
}

func (m *SourcePage) Reset()                    { *m = SourcePage{} }
func (m *SourcePage) String() string            { return proto.CompactTextString(m) }
func (*SourcePage) ProtoMessage()               {}
func (*SourcePage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SourcePage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SourcePage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type Page struct {
	Source string `protobuf:"bytes,1,opt,name=Source" json:"Source,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Page) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Page) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type PageSummary struct {
	PageID      uint64 `protobuf:"varint,1,opt,name=PageID" json:"PageID,omitempty"`
	Path        string `protobuf:"bytes,2,opt,name=Path" json:"Path,omitempty"`
	Link        string `protobuf:"bytes,3,opt,name=Link" json:"Link,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=Title" json:"Title,omitempty"`
	TextSummary string `protobuf:"bytes,5,opt,name=TextSummary" json:"TextSummary,omitempty"`
	HTMLSummary string `protobuf:"bytes,6,opt,name=HTMLSummary" json:"HTMLSummary,omitempty"`
}

func (m *PageSummary) Reset()                    { *m = PageSummary{} }
func (m *PageSummary) String() string            { return proto.CompactTextString(m) }
func (*PageSummary) ProtoMessage()               {}
func (*PageSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PageSummary) GetPageID() uint64 {
	if m != nil {
		return m.PageID
	}
	return 0
}

func (m *PageSummary) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PageSummary) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *PageSummary) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PageSummary) GetTextSummary() string {
	if m != nil {
		return m.TextSummary
	}
	return ""
}

func (m *PageSummary) GetHTMLSummary() string {
	if m != nil {
		return m.HTMLSummary
	}
	return ""
}

type PageList struct {
	Prefix string         `protobuf:"bytes,1,opt,name=Prefix" json:"Prefix,omitempty"`
	Pages  []*PageSummary `protobuf:"bytes,2,rep,name=Pages" json:"Pages,omitempty"`
}

func (m *PageList) Reset()                    { *m = PageList{} }
func (m *PageList) String() string            { return proto.CompactTextString(m) }
func (*PageList) ProtoMessage()               {}
func (*PageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PageList) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *PageList) GetPages() []*PageSummary {
	if m != nil {
		return m.Pages
	}
	return nil
}

func init() {
	proto.RegisterType((*SQLPartition)(nil), "wiki.SQLPartition")
	proto.RegisterType((*SQLPage)(nil), "wiki.SQLPage")
	proto.RegisterType((*SQLVersion)(nil), "wiki.SQLVersion")
	proto.RegisterType((*PageRequest)(nil), "wiki.PageRequest")
	proto.RegisterType((*HTTPPageRequest)(nil), "wiki.HTTPPageRequest")
	proto.RegisterType((*HTMLPage)(nil), "wiki.HTMLPage")
	proto.RegisterType((*SourcePage)(nil), "wiki.SourcePage")
	proto.RegisterType((*Page)(nil), "wiki.Page")
	proto.RegisterType((*PageSummary)(nil), "wiki.PageSummary")
	proto.RegisterType((*PageList)(nil), "wiki.PageList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wiki service

type WikiClient interface {
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// get a page by path (pre-rendered in html)
	GetPageAsHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// get a page by path (source)
	GetPageAsSource(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*SourcePage, error)
	// get a page as an editable html
	GetPageAsEditHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// save page
	SavePage(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// search for pages
	Search(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*PageList, error)
}

type wikiClient struct {
	cc *grpc.ClientConn
}

func NewWikiClient(cc *grpc.ClientConn) WikiClient {
	return &wikiClient{cc}
}

func (c *wikiClient) HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/HandleHTTPRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) GetPageAsHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/GetPageAsHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) GetPageAsSource(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*SourcePage, error) {
	out := new(SourcePage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/GetPageAsSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) GetPageAsEditHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/GetPageAsEditHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) SavePage(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/SavePage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) Search(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*PageList, error) {
	out := new(PageList)
	err := grpc.Invoke(ctx, "/wiki.Wiki/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wiki service

type WikiServer interface {
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(context.Context, *HTTPPageRequest) (*HTMLPage, error)
	// get a page by path (pre-rendered in html)
	GetPageAsHTML(context.Context, *PageRequest) (*HTMLPage, error)
	// get a page by path (source)
	GetPageAsSource(context.Context, *PageRequest) (*SourcePage, error)
	// get a page as an editable html
	GetPageAsEditHTML(context.Context, *PageRequest) (*HTMLPage, error)
	// save page
	SavePage(context.Context, *h2gproxy.ServeRequest) (*HTMLPage, error)
	// search for pages
	Search(context.Context, *HTTPPageRequest) (*PageList, error)
}

func RegisterWikiServer(s *grpc.Server, srv WikiServer) {
	s.RegisterService(&_Wiki_serviceDesc, srv)
}

func _Wiki_HandleHTTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).HandleHTTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/HandleHTTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).HandleHTTPRequest(ctx, req.(*HTTPPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_GetPageAsHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).GetPageAsHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/GetPageAsHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).GetPageAsHTML(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_GetPageAsSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).GetPageAsSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/GetPageAsSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).GetPageAsSource(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_GetPageAsEditHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).GetPageAsEditHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/GetPageAsEditHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).GetPageAsEditHTML(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_SavePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).SavePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/SavePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).SavePage(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).Search(ctx, req.(*HTTPPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wiki_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wiki.Wiki",
	HandlerType: (*WikiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleHTTPRequest",
			Handler:    _Wiki_HandleHTTPRequest_Handler,
		},
		{
			MethodName: "GetPageAsHTML",
			Handler:    _Wiki_GetPageAsHTML_Handler,
		},
		{
			MethodName: "GetPageAsSource",
			Handler:    _Wiki_GetPageAsSource_Handler,
		},
		{
			MethodName: "GetPageAsEditHTML",
			Handler:    _Wiki_GetPageAsEditHTML_Handler,
		},
		{
			MethodName: "SavePage",
			Handler:    _Wiki_SavePage_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Wiki_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/wiki/wiki.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/wiki/wiki.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x96, 0x8d, 0x09, 0xce, 0xe1, 0x27, 0x97, 0xd1, 0xbd, 0xc8, 0x44, 0xf7, 0x5e, 0x45, 0x5e,
	0xb4, 0xa8, 0x0b, 0x23, 0x19, 0x84, 0x2a, 0x76, 0x04, 0x50, 0x41, 0x04, 0x08, 0x76, 0xda, 0xae,
	0x4d, 0x3c, 0x98, 0x29, 0x89, 0x27, 0xd8, 0x13, 0x20, 0xdb, 0x3c, 0x46, 0x97, 0xdd, 0x54, 0xea,
	0x2b, 0xb4, 0x6f, 0xd0, 0x97, 0xaa, 0xe6, 0xc7, 0xce, 0x84, 0x00, 0xed, 0x26, 0x99, 0xf3, 0xf3,
	0xcd, 0x39, 0xe7, 0x3b, 0xdf, 0xc8, 0xf0, 0x26, 0xa1, 0xbd, 0x28, 0x4d, 0xbc, 0x2e, 0x4d, 0xb3,
	0x28, 0xbe, 0xa7, 0x34, 0xf6, 0x52, 0xcc, 0x36, 0xa3, 0x01, 0xc9, 0x37, 0xef, 0xc9, 0x0d, 0x11,
	0x3f, 0xde, 0x20, 0xa3, 0x8c, 0x22, 0x8b, 0x9f, 0xeb, 0xde, 0x0b, 0x88, 0x2e, 0xed, 0xf7, 0x69,
	0xaa, 0xfe, 0x24, 0xaa, 0xee, 0xbf, 0x90, 0x7f, 0xed, 0x27, 0x83, 0x8c, 0x3e, 0x8c, 0xca, 0x83,
	0xc4, 0xb8, 0x3e, 0x2c, 0x85, 0x17, 0xad, 0x76, 0x94, 0x31, 0xc2, 0x08, 0x4d, 0xd1, 0x0a, 0x98,
	0xc7, 0x07, 0x8e, 0xd1, 0x30, 0x36, 0xac, 0xc0, 0x3c, 0x3e, 0x40, 0x08, 0xac, 0xb3, 0xa8, 0x8f,
	0x1d, 0xb3, 0x61, 0x6c, 0x54, 0x03, 0x71, 0x76, 0x7f, 0x98, 0xb0, 0x20, 0x40, 0x09, 0x9e, 0xc9,
	0x3f, 0x87, 0x6a, 0x79, 0x99, 0x00, 0x2d, 0xfa, 0xc8, 0x13, 0x93, 0xe9, 0x65, 0x9a, 0xff, 0x7d,
	0x1e, 0xaf, 0x57, 0x86, 0x24, 0x65, 0x3b, 0xdb, 0x5f, 0xc6, 0xeb, 0xb5, 0xfc, 0xb6, 0x37, 0x28,
	0x62, 0x1e, 0x89, 0x83, 0xc9, 0x1d, 0xbc, 0x81, 0x76, 0xc4, 0xae, 0x9d, 0x39, 0xd9, 0x00, 0x3f,
	0x23, 0x07, 0x16, 0xf6, 0x33, 0x1c, 0x31, 0x9a, 0x39, 0x96, 0x70, 0x17, 0x26, 0x8f, 0xbc, 0x1f,
	0xc4, 0x22, 0x32, 0x2f, 0x23, 0xca, 0x2c, 0x31, 0x38, 0x76, 0x2a, 0x0d, 0x63, 0x63, 0x39, 0x28,
	0xcc, 0x12, 0x83, 0x63, 0x67, 0x41, 0x46, 0x94, 0x89, 0x7c, 0xa8, 0xb5, 0x22, 0x86, 0x73, 0x76,
	0x7e, 0xf9, 0x09, 0x77, 0xd9, 0x09, 0x1e, 0x39, 0x36, 0xbf, 0xb5, 0x69, 0x7f, 0x1b, 0xaf, 0x5b,
	0x2c, 0x1b, 0xe2, 0xe0, 0x71, 0x02, 0x6a, 0xc0, 0x22, 0x27, 0x66, 0x9f, 0xa6, 0x0c, 0xa7, 0xcc,
	0xa9, 0x8a, 0x2e, 0x74, 0x97, 0xfb, 0xdd, 0x00, 0x08, 0x2f, 0x5a, 0x1f, 0x70, 0x96, 0x3f, 0xc5,
	0xf8, 0x5e, 0x49, 0xae, 0xe2, 0x6f, 0x59, 0xe3, 0x2f, 0xc1, 0x4d, 0x67, 0x8a, 0x3a, 0x10, 0xd4,
	0x25, 0x98, 0xb3, 0x56, 0x2e, 0x45, 0xe3, 0x67, 0xee, 0x69, 0x7e, 0x70, 0x2c, 0x98, 0xd3, 0x66,
	0x7d, 0x05, 0xd5, 0xe7, 0xa7, 0x9c, 0x84, 0xdc, 0x44, 0xce, 0x17, 0xe0, 0xdb, 0x21, 0xce, 0x19,
	0xaa, 0x83, 0xfd, 0x91, 0xdc, 0x10, 0xb1, 0x22, 0x43, 0xd4, 0x2a, 0x6d, 0xf4, 0xef, 0x63, 0x2d,
	0x54, 0xf5, 0xc5, 0xfe, 0x0f, 0xd0, 0x22, 0xe9, 0x4d, 0x3b, 0xc3, 0x57, 0xe4, 0x41, 0xf5, 0xa9,
	0x79, 0xdc, 0xb1, 0x01, 0xb5, 0xa3, 0x4e, 0xa7, 0xad, 0x57, 0xdb, 0x9a, 0x2a, 0x2e, 0x0a, 0x2e,
	0xfa, 0xab, 0x92, 0x1f, 0x2d, 0x10, 0x4c, 0xb5, 0xb8, 0x0b, 0x4b, 0x21, 0xce, 0xee, 0x4a, 0x94,
	0x64, 0x75, 0xcd, 0x2b, 0x5f, 0x82, 0x1e, 0x0d, 0xa6, 0x72, 0xdd, 0x14, 0xec, 0xa3, 0xce, 0xa9,
	0x64, 0xb5, 0x50, 0xa2, 0xa1, 0x29, 0x11, 0x81, 0xd5, 0xa4, 0xf1, 0xa8, 0x78, 0x1e, 0xfc, 0xcc,
	0x39, 0x3e, 0xce, 0x0f, 0xfb, 0x03, 0x36, 0x12, 0x53, 0xd9, 0x41, 0x61, 0x72, 0x6d, 0x1c, 0xd0,
	0x33, 0xca, 0x4e, 0x69, 0x4c, 0xae, 0x46, 0x62, 0x03, 0x76, 0xa0, 0xbb, 0xdc, 0xb7, 0x00, 0x21,
	0x1d, 0x66, 0x5d, 0xfc, 0x6c, 0xc5, 0x35, 0xa8, 0xc8, 0x0c, 0x55, 0x53, 0x59, 0xee, 0x36, 0xcf,
	0x4d, 0xb0, 0x16, 0x37, 0xf4, 0x38, 0xfa, 0x1b, 0xe6, 0x3b, 0x84, 0xf5, 0x0a, 0x98, 0x34, 0xdc,
	0xaf, 0x86, 0x64, 0x34, 0x1c, 0xf6, 0xfb, 0x51, 0x36, 0xe2, 0x68, 0x6e, 0x96, 0x82, 0x54, 0x56,
	0xd9, 0x89, 0x39, 0x3d, 0x3b, 0x5f, 0x57, 0xf1, 0x32, 0xf9, 0x79, 0x52, 0xc5, 0xd2, 0xaa, 0xf0,
	0xb9, 0x3b, 0xf8, 0x81, 0xa9, 0x22, 0xea, 0x65, 0xea, 0x2e, 0x9e, 0xc1, 0x79, 0x2e, 0x32, 0x2a,
	0x32, 0x43, 0x73, 0xb9, 0x27, 0x60, 0xf3, 0x5e, 0x5a, 0x24, 0x67, 0xa2, 0x4b, 0x29, 0x1b, 0x35,
	0xa3, 0xb4, 0xd0, 0x6b, 0x98, 0xe7, 0x39, 0xb9, 0x63, 0x36, 0xe6, 0xa6, 0x85, 0xa1, 0x6e, 0x09,
	0x64, 0xdc, 0xff, 0x69, 0x82, 0xc5, 0x65, 0x8a, 0x76, 0x61, 0xf5, 0x28, 0x4a, 0xe3, 0x1e, 0xe6,
	0x4a, 0x2b, 0x04, 0xf3, 0x8f, 0xc4, 0x3d, 0x12, 0x5f, 0x7d, 0xa5, 0x70, 0x2b, 0x3d, 0xf8, 0xb0,
	0xfc, 0x0e, 0x33, 0x7e, 0xdc, 0xcb, 0xb9, 0x13, 0xcd, 0x0a, 0x71, 0x06, 0xb3, 0x03, 0xb5, 0x12,
	0xa3, 0x16, 0xf3, 0x04, 0xea, 0x2f, 0xf5, 0xe2, 0x27, 0x4a, 0xd8, 0x81, 0xd5, 0x12, 0x77, 0x18,
	0x13, 0xf6, 0xa7, 0xf5, 0x7c, 0xb0, 0xc3, 0xe8, 0x4e, 0xde, 0xf1, 0x8c, 0xe2, 0x67, 0x30, 0x9b,
	0x50, 0x09, 0x71, 0x94, 0x75, 0xaf, 0x7f, 0x43, 0x44, 0xb1, 0x8e, 0x66, 0x1d, 0x9c, 0x14, 0x33,
	0xfd, 0xb3, 0xc3, 0x3f, 0x39, 0x22, 0xe9, 0xb2, 0x22, 0x3e, 0x33, 0x5b, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x5e, 0x93, 0x95, 0xdf, 0xfe, 0x06, 0x00, 0x00,
}
