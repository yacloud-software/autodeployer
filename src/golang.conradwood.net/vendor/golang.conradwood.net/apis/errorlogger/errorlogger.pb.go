// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/errorlogger/errorlogger.proto
// DO NOT EDIT!

/*
Package errorlogger is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/errorlogger/errorlogger.proto

It has these top-level messages:
	ErrorLogRequest
*/
package errorlogger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"
import framework "golang.conradwood.net/apis/framework"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorLogRequest struct {
	UserID         string                              `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	ServiceName    string                              `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	MethodName     string                              `protobuf:"bytes,3,opt,name=MethodName" json:"MethodName,omitempty"`
	Timestamp      uint32                              `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
	ErrorCode      uint32                              `protobuf:"varint,5,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
	ErrorMessage   string                              `protobuf:"bytes,6,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	LogMessage     string                              `protobuf:"bytes,7,opt,name=LogMessage" json:"LogMessage,omitempty"`
	Messages       []*framework.FrameworkMessageDetail `protobuf:"bytes,8,rep,name=Messages" json:"Messages,omitempty"`
	RequestID      string                              `protobuf:"bytes,9,opt,name=RequestID" json:"RequestID,omitempty"`
	CallingService *auth.User                          `protobuf:"bytes,10,opt,name=CallingService" json:"CallingService,omitempty"`
}

func (m *ErrorLogRequest) Reset()                    { *m = ErrorLogRequest{} }
func (m *ErrorLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ErrorLogRequest) ProtoMessage()               {}
func (*ErrorLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ErrorLogRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ErrorLogRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ErrorLogRequest) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *ErrorLogRequest) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ErrorLogRequest) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ErrorLogRequest) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *ErrorLogRequest) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *ErrorLogRequest) GetMessages() []*framework.FrameworkMessageDetail {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ErrorLogRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *ErrorLogRequest) GetCallingService() *auth.User {
	if m != nil {
		return m.CallingService
	}
	return nil
}

func init() {
	proto.RegisterType((*ErrorLogRequest)(nil), "errorlogger.ErrorLogRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ErrorLogger service

type ErrorLoggerClient interface {
	// log an error
	Log(ctx context.Context, in *ErrorLogRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type errorLoggerClient struct {
	cc *grpc.ClientConn
}

func NewErrorLoggerClient(cc *grpc.ClientConn) ErrorLoggerClient {
	return &errorLoggerClient{cc}
}

func (c *errorLoggerClient) Log(ctx context.Context, in *ErrorLogRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/errorlogger.ErrorLogger/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ErrorLogger service

type ErrorLoggerServer interface {
	// log an error
	Log(context.Context, *ErrorLogRequest) (*common.Void, error)
}

func RegisterErrorLoggerServer(s *grpc.Server, srv ErrorLoggerServer) {
	s.RegisterService(&_ErrorLogger_serviceDesc, srv)
}

func _ErrorLogger_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorLoggerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorlogger.ErrorLogger/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorLoggerServer).Log(ctx, req.(*ErrorLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ErrorLogger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "errorlogger.ErrorLogger",
	HandlerType: (*ErrorLoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _ErrorLogger_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/errorlogger/errorlogger.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/errorlogger/errorlogger.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x4f, 0xfa, 0x40,
	0x10, 0x4d, 0xe1, 0xf7, 0x43, 0xd8, 0xa2, 0x26, 0x7b, 0x30, 0x1b, 0x42, 0x4c, 0xe5, 0x60, 0x1a,
	0x0f, 0x4b, 0xac, 0x1e, 0xbc, 0x98, 0x18, 0x41, 0x13, 0x12, 0xf0, 0x50, 0x3f, 0xee, 0x2b, 0x1d,
	0x97, 0xc6, 0xb6, 0x83, 0xdb, 0x45, 0xfe, 0x79, 0x0f, 0xa6, 0xdb, 0x85, 0x56, 0x0e, 0x5c, 0xda,
	0xd9, 0x37, 0x6f, 0x3e, 0xf2, 0xde, 0x90, 0x1b, 0x89, 0x89, 0xc8, 0x24, 0x9f, 0x63, 0xa6, 0x44,
	0xb4, 0x46, 0x8c, 0x78, 0x06, 0x7a, 0x28, 0x96, 0x71, 0x3e, 0x04, 0xa5, 0x50, 0x25, 0x28, 0x25,
	0xa8, 0x7a, 0xcc, 0x97, 0x0a, 0x35, 0x52, 0xb7, 0x06, 0xf5, 0xf8, 0x9e, 0x36, 0x73, 0x4c, 0x53,
	0xcc, 0xec, 0xaf, 0x2c, 0xee, 0x5d, 0xec, 0xe1, 0x8b, 0x95, 0x5e, 0x98, 0x8f, 0xe5, 0x5e, 0xef,
	0xe1, 0x7e, 0x28, 0x91, 0xc2, 0x1a, 0xd5, 0x67, 0x15, 0x95, 0x55, 0x83, 0x9f, 0x06, 0x39, 0x7e,
	0x28, 0x36, 0x9c, 0xa2, 0x0c, 0xe1, 0x6b, 0x05, 0xb9, 0xa6, 0x27, 0xa4, 0xf5, 0x9a, 0x83, 0x9a,
	0x8c, 0x99, 0xe3, 0x39, 0x7e, 0x27, 0xb4, 0x2f, 0xea, 0x11, 0xf7, 0x19, 0xd4, 0x77, 0x3c, 0x87,
	0x27, 0x91, 0x02, 0x6b, 0x98, 0x64, 0x1d, 0xa2, 0xa7, 0x84, 0xcc, 0x40, 0x2f, 0x30, 0x32, 0x84,
	0xa6, 0x21, 0xd4, 0x10, 0xda, 0x27, 0x9d, 0x97, 0x38, 0x85, 0x5c, 0x8b, 0x74, 0xc9, 0xfe, 0x79,
	0x8e, 0x7f, 0x18, 0x56, 0x40, 0x91, 0x35, 0xab, 0x8c, 0x30, 0x02, 0xf6, 0xbf, 0xcc, 0x6e, 0x01,
	0x3a, 0x20, 0x5d, 0xf3, 0x98, 0x41, 0x9e, 0x0b, 0x09, 0xac, 0x65, 0xba, 0xff, 0xc1, 0x8a, 0xf9,
	0x53, 0x94, 0x1b, 0xc6, 0x41, 0x39, 0xbf, 0x42, 0xe8, 0x2d, 0x69, 0xdb, 0x30, 0x67, 0x6d, 0xaf,
	0xe9, 0xbb, 0xc1, 0x19, 0xaf, 0x14, 0x79, 0xdc, 0x44, 0x96, 0x33, 0x06, 0x2d, 0xe2, 0x24, 0xdc,
	0x96, 0x14, 0x0b, 0x5a, 0x8d, 0x26, 0x63, 0xd6, 0x31, 0xdd, 0x2b, 0x80, 0x06, 0xe4, 0x68, 0x24,
	0x92, 0x24, 0xce, 0xa4, 0x95, 0x84, 0x11, 0xcf, 0xf1, 0xdd, 0x80, 0x70, 0xe3, 0x52, 0x21, 0x62,
	0xb8, 0xc3, 0x08, 0xee, 0x88, 0xbb, 0x51, 0x5f, 0x82, 0xa2, 0x97, 0xa4, 0x39, 0x45, 0x49, 0xfb,
	0xbc, 0x7e, 0x47, 0x3b, 0xf6, 0xf4, 0xba, 0xdc, 0xde, 0xc8, 0x1b, 0xc6, 0xd1, 0xbd, 0x4f, 0xce,
	0x33, 0xd0, 0x75, 0xd7, 0xed, 0x1d, 0x14, 0xc6, 0xd7, 0xfb, 0xbc, 0xb7, 0x8c, 0xe3, 0x57, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xfa, 0x8b, 0x8e, 0xcc, 0x02, 0x00, 0x00,
}
