// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/vwhtmlserver/vwhtmlserver.proto
// DO NOT EDIT!

/*
Package vwhtmlserver is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/vwhtmlserver/vwhtmlserver.proto

It has these top-level messages:
	PingResponse
	KPI
	Resource
	Overview
	GitRepository
	Chunk
	EntityComponent
	EntityDefinition
	DeveloperView
	LogLine
	LogRequest
	Build
	RepoCollection
	UpcomingRelease
	Game
	GameList
	GameID
*/
package vwhtmlserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type KPI struct {
	GameID  uint64 `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Max     uint32 `protobuf:"varint,3,opt,name=Max" json:"Max,omitempty"`
	Current uint32 `protobuf:"varint,4,opt,name=Current" json:"Current,omitempty"`
}

func (m *KPI) Reset()                    { *m = KPI{} }
func (m *KPI) String() string            { return proto.CompactTextString(m) }
func (*KPI) ProtoMessage()               {}
func (*KPI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KPI) GetGameID() uint64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *KPI) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KPI) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *KPI) GetCurrent() uint32 {
	if m != nil {
		return m.Current
	}
	return 0
}

type Resource struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Overview struct {
	GameID              uint64    `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	Started             uint32    `protobuf:"varint,2,opt,name=Started" json:"Started,omitempty"`
	PersonDaysToDate    uint32    `protobuf:"varint,3,opt,name=PersonDaysToDate" json:"PersonDaysToDate,omitempty"`
	CostToDate          float64   `protobuf:"fixed64,4,opt,name=CostToDate" json:"CostToDate,omitempty"`
	EstimatedLaunchDate uint32    `protobuf:"varint,5,opt,name=EstimatedLaunchDate" json:"EstimatedLaunchDate,omitempty"`
	KPIs                []*KPI    `protobuf:"bytes,6,rep,name=KPIs" json:"KPIs,omitempty"`
	CriticalPath        *KPI      `protobuf:"bytes,7,opt,name=CriticalPath" json:"CriticalPath,omitempty"`
	ResourceStarvation  *Resource `protobuf:"bytes,8,opt,name=ResourceStarvation" json:"ResourceStarvation,omitempty"`
	Recommendation      string    `protobuf:"bytes,9,opt,name=Recommendation" json:"Recommendation,omitempty"`
}

func (m *Overview) Reset()                    { *m = Overview{} }
func (m *Overview) String() string            { return proto.CompactTextString(m) }
func (*Overview) ProtoMessage()               {}
func (*Overview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Overview) GetGameID() uint64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *Overview) GetStarted() uint32 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Overview) GetPersonDaysToDate() uint32 {
	if m != nil {
		return m.PersonDaysToDate
	}
	return 0
}

func (m *Overview) GetCostToDate() float64 {
	if m != nil {
		return m.CostToDate
	}
	return 0
}

func (m *Overview) GetEstimatedLaunchDate() uint32 {
	if m != nil {
		return m.EstimatedLaunchDate
	}
	return 0
}

func (m *Overview) GetKPIs() []*KPI {
	if m != nil {
		return m.KPIs
	}
	return nil
}

func (m *Overview) GetCriticalPath() *KPI {
	if m != nil {
		return m.CriticalPath
	}
	return nil
}

func (m *Overview) GetResourceStarvation() *Resource {
	if m != nil {
		return m.ResourceStarvation
	}
	return nil
}

func (m *Overview) GetRecommendation() string {
	if m != nil {
		return m.Recommendation
	}
	return ""
}

type GitRepository struct {
	GameID uint64 `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	URL    string `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
}

func (m *GitRepository) Reset()                    { *m = GitRepository{} }
func (m *GitRepository) String() string            { return proto.CompactTextString(m) }
func (*GitRepository) ProtoMessage()               {}
func (*GitRepository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GitRepository) GetGameID() uint64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *GitRepository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitRepository) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type Chunk struct {
	GameID                   uint64 `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	Name                     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	CurrentProductionVersion uint32 `protobuf:"varint,3,opt,name=CurrentProductionVersion" json:"CurrentProductionVersion,omitempty"`
	CurrentDevVersion        uint32 `protobuf:"varint,4,opt,name=CurrentDevVersion" json:"CurrentDevVersion,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Chunk) GetGameID() uint64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *Chunk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chunk) GetCurrentProductionVersion() uint32 {
	if m != nil {
		return m.CurrentProductionVersion
	}
	return 0
}

func (m *Chunk) GetCurrentDevVersion() uint32 {
	if m != nil {
		return m.CurrentDevVersion
	}
	return 0
}

type EntityComponent struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *EntityComponent) Reset()                    { *m = EntityComponent{} }
func (m *EntityComponent) String() string            { return proto.CompactTextString(m) }
func (*EntityComponent) ProtoMessage()               {}
func (*EntityComponent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EntityComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EntityDefinition struct {
	Name                     string             `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	CurrentProductionVersion uint32             `protobuf:"varint,2,opt,name=CurrentProductionVersion" json:"CurrentProductionVersion,omitempty"`
	CurrentDevVersion        uint32             `protobuf:"varint,3,opt,name=CurrentDevVersion" json:"CurrentDevVersion,omitempty"`
	Components               []*EntityComponent `protobuf:"bytes,4,rep,name=Components" json:"Components,omitempty"`
}

func (m *EntityDefinition) Reset()                    { *m = EntityDefinition{} }
func (m *EntityDefinition) String() string            { return proto.CompactTextString(m) }
func (*EntityDefinition) ProtoMessage()               {}
func (*EntityDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EntityDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EntityDefinition) GetCurrentProductionVersion() uint32 {
	if m != nil {
		return m.CurrentProductionVersion
	}
	return 0
}

func (m *EntityDefinition) GetCurrentDevVersion() uint32 {
	if m != nil {
		return m.CurrentDevVersion
	}
	return 0
}

func (m *EntityDefinition) GetComponents() []*EntityComponent {
	if m != nil {
		return m.Components
	}
	return nil
}

type DeveloperView struct {
	GameID            uint64              `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	Repositories      []*GitRepository    `protobuf:"bytes,2,rep,name=Repositories" json:"Repositories,omitempty"`
	Chunks            []*Chunk            `protobuf:"bytes,3,rep,name=Chunks" json:"Chunks,omitempty"`
	EntityDefinitions []*EntityDefinition `protobuf:"bytes,4,rep,name=EntityDefinitions" json:"EntityDefinitions,omitempty"`
}

func (m *DeveloperView) Reset()                    { *m = DeveloperView{} }
func (m *DeveloperView) String() string            { return proto.CompactTextString(m) }
func (*DeveloperView) ProtoMessage()               {}
func (*DeveloperView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeveloperView) GetGameID() uint64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *DeveloperView) GetRepositories() []*GitRepository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

func (m *DeveloperView) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *DeveloperView) GetEntityDefinitions() []*EntityDefinition {
	if m != nil {
		return m.EntityDefinitions
	}
	return nil
}

type LogLine struct {
	Occured uint32 `protobuf:"varint,1,opt,name=Occured" json:"Occured,omitempty"`
	Line    string `protobuf:"bytes,2,opt,name=Line" json:"Line,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *LogLine) GetOccured() uint32 {
	if m != nil {
		return m.Occured
	}
	return 0
}

func (m *LogLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type LogRequest struct {
	GameID uint64     `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	Lines  []*LogLine `protobuf:"bytes,2,rep,name=Lines" json:"Lines,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LogRequest) GetGameID() uint64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *LogRequest) GetLines() []*LogLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

type Build struct {
	ID             uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Timestamp      uint32 `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Comment        string `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	CommitterEmail string `protobuf:"bytes,4,opt,name=CommitterEmail" json:"CommitterEmail,omitempty"`
	DateTimeString string `protobuf:"bytes,5,opt,name=DateTimeString" json:"DateTimeString,omitempty"`
	SHA            string `protobuf:"bytes,6,opt,name=SHA" json:"SHA,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Build) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Build) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Build) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Build) GetCommitterEmail() string {
	if m != nil {
		return m.CommitterEmail
	}
	return ""
}

func (m *Build) GetDateTimeString() string {
	if m != nil {
		return m.DateTimeString
	}
	return ""
}

func (m *Build) GetSHA() string {
	if m != nil {
		return m.SHA
	}
	return ""
}

type RepoCollection struct {
	RepoID     uint64   `protobuf:"varint,1,opt,name=RepoID" json:"RepoID,omitempty"`
	SelectedID uint64   `protobuf:"varint,2,opt,name=SelectedID" json:"SelectedID,omitempty"`
	Builds     []*Build `protobuf:"bytes,3,rep,name=Builds" json:"Builds,omitempty"`
}

func (m *RepoCollection) Reset()                    { *m = RepoCollection{} }
func (m *RepoCollection) String() string            { return proto.CompactTextString(m) }
func (*RepoCollection) ProtoMessage()               {}
func (*RepoCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RepoCollection) GetRepoID() uint64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *RepoCollection) GetSelectedID() uint64 {
	if m != nil {
		return m.SelectedID
	}
	return 0
}

func (m *RepoCollection) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type UpcomingRelease struct {
	ID              uint64            `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AvailableBuilds []*RepoCollection `protobuf:"bytes,2,rep,name=AvailableBuilds" json:"AvailableBuilds,omitempty"`
}

func (m *UpcomingRelease) Reset()                    { *m = UpcomingRelease{} }
func (m *UpcomingRelease) String() string            { return proto.CompactTextString(m) }
func (*UpcomingRelease) ProtoMessage()               {}
func (*UpcomingRelease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UpcomingRelease) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpcomingRelease) GetAvailableBuilds() []*RepoCollection {
	if m != nil {
		return m.AvailableBuilds
	}
	return nil
}

type Game struct {
	ID                      uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name                    string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	LatestReleaseTimeString string `protobuf:"bytes,3,opt,name=LatestReleaseTimeString" json:"LatestReleaseTimeString,omitempty"`
	Subscribers             uint64 `protobuf:"varint,4,opt,name=Subscribers" json:"Subscribers,omitempty"`
	SubscribersString       string `protobuf:"bytes,5,opt,name=SubscribersString" json:"SubscribersString,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Game) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Game) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Game) GetLatestReleaseTimeString() string {
	if m != nil {
		return m.LatestReleaseTimeString
	}
	return ""
}

func (m *Game) GetSubscribers() uint64 {
	if m != nil {
		return m.Subscribers
	}
	return 0
}

func (m *Game) GetSubscribersString() string {
	if m != nil {
		return m.SubscribersString
	}
	return ""
}

type GameList struct {
	Games []*Game `protobuf:"bytes,1,rep,name=Games" json:"Games,omitempty"`
}

func (m *GameList) Reset()                    { *m = GameList{} }
func (m *GameList) String() string            { return proto.CompactTextString(m) }
func (*GameList) ProtoMessage()               {}
func (*GameList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GameList) GetGames() []*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

type GameID struct {
	GameID uint64 `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
}

func (m *GameID) Reset()                    { *m = GameID{} }
func (m *GameID) String() string            { return proto.CompactTextString(m) }
func (*GameID) ProtoMessage()               {}
func (*GameID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GameID) GetGameID() uint64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "vwhtmlserver.PingResponse")
	proto.RegisterType((*KPI)(nil), "vwhtmlserver.KPI")
	proto.RegisterType((*Resource)(nil), "vwhtmlserver.Resource")
	proto.RegisterType((*Overview)(nil), "vwhtmlserver.Overview")
	proto.RegisterType((*GitRepository)(nil), "vwhtmlserver.GitRepository")
	proto.RegisterType((*Chunk)(nil), "vwhtmlserver.Chunk")
	proto.RegisterType((*EntityComponent)(nil), "vwhtmlserver.EntityComponent")
	proto.RegisterType((*EntityDefinition)(nil), "vwhtmlserver.EntityDefinition")
	proto.RegisterType((*DeveloperView)(nil), "vwhtmlserver.DeveloperView")
	proto.RegisterType((*LogLine)(nil), "vwhtmlserver.LogLine")
	proto.RegisterType((*LogRequest)(nil), "vwhtmlserver.LogRequest")
	proto.RegisterType((*Build)(nil), "vwhtmlserver.Build")
	proto.RegisterType((*RepoCollection)(nil), "vwhtmlserver.RepoCollection")
	proto.RegisterType((*UpcomingRelease)(nil), "vwhtmlserver.UpcomingRelease")
	proto.RegisterType((*Game)(nil), "vwhtmlserver.Game")
	proto.RegisterType((*GameList)(nil), "vwhtmlserver.GameList")
	proto.RegisterType((*GameID)(nil), "vwhtmlserver.GameID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VWHtmlServer service

type VWHtmlServerClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error)
	GetOverview(ctx context.Context, in *GameID, opts ...grpc.CallOption) (*Overview, error)
	GetDeveloperView(ctx context.Context, in *GameID, opts ...grpc.CallOption) (*DeveloperView, error)
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*common.Void, error)
	GetUpcomingRelease(ctx context.Context, in *Game, opts ...grpc.CallOption) (*UpcomingRelease, error)
	GetGames(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GameList, error)
}

type vWHtmlServerClient struct {
	cc *grpc.ClientConn
}

func NewVWHtmlServerClient(cc *grpc.ClientConn) VWHtmlServerClient {
	return &vWHtmlServerClient{cc}
}

func (c *vWHtmlServerClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/vwhtmlserver.VWHtmlServer/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vWHtmlServerClient) ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error) {
	out := new(h2gproxy.ServeResponse)
	err := grpc.Invoke(ctx, "/vwhtmlserver.VWHtmlServer/ServeHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vWHtmlServerClient) GetOverview(ctx context.Context, in *GameID, opts ...grpc.CallOption) (*Overview, error) {
	out := new(Overview)
	err := grpc.Invoke(ctx, "/vwhtmlserver.VWHtmlServer/GetOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vWHtmlServerClient) GetDeveloperView(ctx context.Context, in *GameID, opts ...grpc.CallOption) (*DeveloperView, error) {
	out := new(DeveloperView)
	err := grpc.Invoke(ctx, "/vwhtmlserver.VWHtmlServer/GetDeveloperView", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vWHtmlServerClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/vwhtmlserver.VWHtmlServer/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vWHtmlServerClient) GetUpcomingRelease(ctx context.Context, in *Game, opts ...grpc.CallOption) (*UpcomingRelease, error) {
	out := new(UpcomingRelease)
	err := grpc.Invoke(ctx, "/vwhtmlserver.VWHtmlServer/GetUpcomingRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vWHtmlServerClient) GetGames(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GameList, error) {
	out := new(GameList)
	err := grpc.Invoke(ctx, "/vwhtmlserver.VWHtmlServer/GetGames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VWHtmlServer service

type VWHtmlServerServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	ServeHTML(context.Context, *h2gproxy.ServeRequest) (*h2gproxy.ServeResponse, error)
	GetOverview(context.Context, *GameID) (*Overview, error)
	GetDeveloperView(context.Context, *GameID) (*DeveloperView, error)
	Log(context.Context, *LogRequest) (*common.Void, error)
	GetUpcomingRelease(context.Context, *Game) (*UpcomingRelease, error)
	GetGames(context.Context, *common.Void) (*GameList, error)
}

func RegisterVWHtmlServerServer(s *grpc.Server, srv VWHtmlServerServer) {
	s.RegisterService(&_VWHtmlServer_serviceDesc, srv)
}

func _VWHtmlServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VWHtmlServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vwhtmlserver.VWHtmlServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VWHtmlServerServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _VWHtmlServer_ServeHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VWHtmlServerServer).ServeHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vwhtmlserver.VWHtmlServer/ServeHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VWHtmlServerServer).ServeHTML(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VWHtmlServer_GetOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VWHtmlServerServer).GetOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vwhtmlserver.VWHtmlServer/GetOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VWHtmlServerServer).GetOverview(ctx, req.(*GameID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VWHtmlServer_GetDeveloperView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VWHtmlServerServer).GetDeveloperView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vwhtmlserver.VWHtmlServer/GetDeveloperView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VWHtmlServerServer).GetDeveloperView(ctx, req.(*GameID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VWHtmlServer_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VWHtmlServerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vwhtmlserver.VWHtmlServer/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VWHtmlServerServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VWHtmlServer_GetUpcomingRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VWHtmlServerServer).GetUpcomingRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vwhtmlserver.VWHtmlServer/GetUpcomingRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VWHtmlServerServer).GetUpcomingRelease(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _VWHtmlServer_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VWHtmlServerServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vwhtmlserver.VWHtmlServer/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VWHtmlServerServer).GetGames(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _VWHtmlServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vwhtmlserver.VWHtmlServer",
	HandlerType: (*VWHtmlServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _VWHtmlServer_Ping_Handler,
		},
		{
			MethodName: "ServeHTML",
			Handler:    _VWHtmlServer_ServeHTML_Handler,
		},
		{
			MethodName: "GetOverview",
			Handler:    _VWHtmlServer_GetOverview_Handler,
		},
		{
			MethodName: "GetDeveloperView",
			Handler:    _VWHtmlServer_GetDeveloperView_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _VWHtmlServer_Log_Handler,
		},
		{
			MethodName: "GetUpcomingRelease",
			Handler:    _VWHtmlServer_GetUpcomingRelease_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _VWHtmlServer_GetGames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/vwhtmlserver/vwhtmlserver.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/vwhtmlserver/vwhtmlserver.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1050 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xef, 0x6e, 0x1b, 0x45,
	0x10, 0xd7, 0xc5, 0xce, 0x1f, 0x4f, 0x9d, 0x26, 0xd9, 0x42, 0x7a, 0x32, 0x25, 0xb2, 0x4e, 0x2a,
	0x8a, 0x5a, 0x70, 0xa3, 0x00, 0x02, 0x15, 0x10, 0x4a, 0xed, 0xd4, 0xb1, 0xe2, 0x50, 0xb3, 0x4e,
	0xc3, 0x27, 0x3e, 0x6c, 0xec, 0xc1, 0x5e, 0x71, 0x77, 0x7b, 0xec, 0xee, 0x39, 0xcd, 0x1b, 0xf0,
	0x12, 0xbc, 0x01, 0x5f, 0x90, 0x78, 0x0f, 0x1e, 0x82, 0x17, 0x41, 0xbb, 0x77, 0xe7, 0xf8, 0xee,
	0xec, 0x48, 0xe5, 0x93, 0x77, 0x67, 0x7f, 0xbf, 0xb9, 0xd9, 0x99, 0xdf, 0x8c, 0x17, 0x5e, 0x4e,
	0x84, 0xcf, 0xc2, 0x49, 0x6b, 0x24, 0x42, 0xc9, 0xc6, 0x37, 0x42, 0x8c, 0x5b, 0x21, 0xea, 0x17,
	0x2c, 0xe2, 0xea, 0xc5, 0xec, 0x66, 0xaa, 0x03, 0x5f, 0xa1, 0x9c, 0xa1, 0xcc, 0x6d, 0x5a, 0x91,
	0x14, 0x5a, 0x90, 0xfa, 0xa2, 0xad, 0xd1, 0xba, 0xc7, 0xd3, 0x48, 0x04, 0x81, 0x08, 0xd3, 0x9f,
	0x84, 0xdd, 0x38, 0xbe, 0x07, 0x3f, 0x3d, 0x9e, 0x44, 0x52, 0xbc, 0xbb, 0x9d, 0x2f, 0x12, 0x8e,
	0xf7, 0x0c, 0xea, 0x03, 0x1e, 0x4e, 0x28, 0xaa, 0x48, 0x84, 0x0a, 0x49, 0x03, 0xb6, 0xb2, 0xb5,
	0xeb, 0x34, 0x9d, 0xc3, 0x1a, 0x9d, 0xef, 0xbd, 0x9f, 0xa1, 0x72, 0x3e, 0xe8, 0x91, 0x7d, 0xd8,
	0xe8, 0xb2, 0x00, 0x7b, 0x1d, 0x0b, 0xa8, 0xd2, 0x74, 0x47, 0x08, 0x54, 0x7f, 0x60, 0x01, 0xba,
	0x6b, 0x96, 0x66, 0xd7, 0x64, 0x17, 0x2a, 0x17, 0xec, 0x9d, 0x5b, 0x69, 0x3a, 0x87, 0xdb, 0xd4,
	0x2c, 0x89, 0x0b, 0x9b, 0xed, 0x58, 0x4a, 0x0c, 0xb5, 0x5b, 0xb5, 0xd6, 0x6c, 0xeb, 0x1d, 0xd8,
	0x4f, 0x8b, 0x58, 0x8e, 0x70, 0xee, 0xcb, 0xb9, 0xf3, 0xe5, 0xfd, 0x5e, 0x81, 0xad, 0x37, 0x33,
	0x94, 0x33, 0x8e, 0x37, 0x2b, 0x83, 0x70, 0x61, 0x73, 0xa8, 0x99, 0xd4, 0x38, 0xb6, 0x71, 0x6c,
	0xd3, 0x6c, 0x4b, 0x9e, 0xc1, 0xee, 0x00, 0xa5, 0x12, 0x61, 0x87, 0xdd, 0xaa, 0x4b, 0xd1, 0x61,
	0x1a, 0xd3, 0xb8, 0x4a, 0x76, 0x72, 0x00, 0xd0, 0x16, 0x4a, 0xa7, 0x28, 0x13, 0xa7, 0x43, 0x17,
	0x2c, 0xe4, 0x08, 0x1e, 0x9d, 0x2a, 0xcd, 0x03, 0xa6, 0x71, 0xdc, 0x67, 0x71, 0x38, 0x9a, 0x5a,
	0xe0, 0xba, 0x75, 0xb7, 0xec, 0x88, 0x3c, 0x85, 0xea, 0xf9, 0xa0, 0xa7, 0xdc, 0x8d, 0x66, 0xe5,
	0xf0, 0xc1, 0xf1, 0x5e, 0x2b, 0x57, 0xfc, 0xf3, 0x41, 0x8f, 0xda, 0x63, 0xf2, 0x25, 0xd4, 0xdb,
	0x92, 0x6b, 0x3e, 0x62, 0xfe, 0x80, 0xe9, 0xa9, 0xbb, 0xd9, 0x74, 0x96, 0xc3, 0x73, 0x30, 0xf2,
	0x1a, 0x48, 0x96, 0x3a, 0x73, 0xdd, 0x19, 0xd3, 0x5c, 0x84, 0xee, 0x96, 0x25, 0xef, 0xe7, 0xc9,
	0x19, 0x8e, 0x2e, 0x61, 0x90, 0x4f, 0xe0, 0x21, 0x45, 0xa3, 0x29, 0x0c, 0xc7, 0x89, 0x8f, 0x9a,
	0x2d, 0x40, 0xc1, 0xea, 0x5d, 0xc0, 0x76, 0x97, 0x6b, 0x8a, 0x91, 0x50, 0x5c, 0x0b, 0x79, 0xfb,
	0xbe, 0x9a, 0x78, 0x4b, 0xfb, 0x36, 0xf7, 0x35, 0x6a, 0x96, 0xde, 0x1f, 0x0e, 0xac, 0xb7, 0xa7,
	0x71, 0xf8, 0xeb, 0x7b, 0xf9, 0x79, 0x09, 0x6e, 0x2a, 0x9d, 0x81, 0x14, 0xe3, 0x78, 0x64, 0x22,
	0xbb, 0x42, 0xa9, 0x4c, 0xd8, 0x49, 0x61, 0x57, 0x9e, 0x93, 0x4f, 0x61, 0x2f, 0x3d, 0xeb, 0xe0,
	0x2c, 0x23, 0x25, 0x7a, 0x2c, 0x1f, 0x78, 0x4f, 0x61, 0xe7, 0x34, 0xd4, 0x5c, 0xdf, 0xb6, 0x45,
	0x10, 0x89, 0x10, 0x43, 0xbd, 0x54, 0xa0, 0xff, 0x38, 0xb0, 0x9b, 0xe0, 0x3a, 0xf8, 0x0b, 0x0f,
	0xb9, 0x4d, 0xe9, 0x12, 0xe0, 0xbd, 0x91, 0xaf, 0xfd, 0x9f, 0xc8, 0x2b, 0x2b, 0x22, 0x27, 0xdf,
	0x19, 0x21, 0xa7, 0x31, 0x2b, 0xb7, 0x6a, 0xc5, 0xf7, 0x71, 0x5e, 0x10, 0x85, 0x9b, 0xd1, 0x05,
	0x82, 0xf7, 0xaf, 0x03, 0xdb, 0x1d, 0x9c, 0xa1, 0x2f, 0x22, 0x94, 0x57, 0xf7, 0xf5, 0xdd, 0xf7,
	0x50, 0x9f, 0xcb, 0x81, 0xa3, 0x72, 0xd7, 0xec, 0xa7, 0x3e, 0xca, 0x7f, 0x2a, 0xa7, 0x19, 0x9a,
	0x23, 0x90, 0xe7, 0xb0, 0x61, 0x25, 0xa0, 0xdc, 0x8a, 0xa5, 0x3e, 0xca, 0x53, 0xed, 0x19, 0x4d,
	0x21, 0xa4, 0x0f, 0x7b, 0xc5, 0x44, 0x67, 0xb7, 0x3b, 0x58, 0x76, 0xbb, 0x3b, 0x18, 0x2d, 0x13,
	0xbd, 0xaf, 0x60, 0xb3, 0x2f, 0x26, 0x7d, 0x1e, 0xa2, 0x19, 0x1f, 0x6f, 0x46, 0xa3, 0x58, 0xe2,
	0xd8, 0xde, 0x6f, 0x9b, 0x66, 0x5b, 0x53, 0x47, 0x83, 0xc8, 0x14, 0x68, 0xd6, 0xde, 0x8f, 0x00,
	0x7d, 0x31, 0xa1, 0xf8, 0x5b, 0x8c, 0x4a, 0xaf, 0x4c, 0xcd, 0x73, 0x58, 0x37, 0xe8, 0x2c, 0x27,
	0x1f, 0xe6, 0x03, 0x4c, 0xbf, 0x4c, 0x13, 0x8c, 0xf7, 0x97, 0x03, 0xeb, 0xaf, 0x62, 0xee, 0x8f,
	0xc9, 0x43, 0x58, 0x9b, 0xbb, 0x5a, 0xeb, 0x75, 0xc8, 0x13, 0xa8, 0x5d, 0xf2, 0x00, 0x95, 0x66,
	0x41, 0x94, 0xaa, 0xe4, 0xce, 0x60, 0xc7, 0xaa, 0xed, 0x50, 0x9d, 0x36, 0x56, 0xb6, 0x35, 0x3d,
	0x6d, 0x96, 0x5c, 0x6b, 0x94, 0xa7, 0x01, 0xe3, 0xbe, 0xd5, 0x79, 0x8d, 0x16, 0xac, 0x06, 0x67,
	0x26, 0x95, 0x71, 0x39, 0xd4, 0x92, 0x87, 0x13, 0x3b, 0xce, 0x6a, 0xb4, 0x60, 0x35, 0xed, 0x3b,
	0x3c, 0x3b, 0x71, 0x37, 0x92, 0xf6, 0x1d, 0x9e, 0x9d, 0x78, 0xb1, 0x99, 0x1a, 0x91, 0x68, 0x0b,
	0xdf, 0x47, 0xab, 0x55, 0x93, 0x0a, 0x63, 0xb9, 0x4b, 0x45, 0xb2, 0x33, 0x73, 0x75, 0x88, 0x06,
	0x84, 0xe3, 0x5e, 0xc7, 0x5e, 0xa2, 0x4a, 0x17, 0x2c, 0x46, 0x04, 0xf6, 0xf2, 0x2b, 0x44, 0x60,
	0xcf, 0x68, 0x0a, 0xf1, 0x38, 0xec, 0xbc, 0x8d, 0x46, 0x22, 0xb0, 0x7f, 0x5f, 0x3e, 0x32, 0x85,
	0xa5, 0x9c, 0xbd, 0x86, 0x9d, 0x93, 0x19, 0xe3, 0x3e, 0xbb, 0xf6, 0x31, 0x75, 0x9c, 0x14, 0xe1,
	0x49, 0x71, 0x28, 0x2e, 0x86, 0x4f, 0x8b, 0x24, 0xef, 0x6f, 0x07, 0xaa, 0xa6, 0x9a, 0xa5, 0x0f,
	0x2c, 0x9b, 0x4b, 0x5f, 0xc3, 0xe3, 0x3e, 0xd3, 0xa8, 0x74, 0x1a, 0xd5, 0x42, 0x46, 0x93, 0xd2,
	0xac, 0x3a, 0x26, 0x4d, 0x78, 0x30, 0x8c, 0xaf, 0xd5, 0x48, 0xf2, 0x6b, 0x94, 0xca, 0xd6, 0xa9,
	0x4a, 0x17, 0x4d, 0xa6, 0xfb, 0x17, 0xb6, 0xb9, 0x3a, 0x95, 0x0f, 0xbc, 0x2f, 0x60, 0xcb, 0x44,
	0xdd, 0xe7, 0x4a, 0x93, 0x43, 0x58, 0x37, 0x6b, 0xe5, 0x3a, 0x36, 0x01, 0xa4, 0xd0, 0x99, 0x2c,
	0x40, 0x9a, 0x00, 0xbc, 0x66, 0xa6, 0xe3, 0x55, 0x8a, 0x3e, 0xfe, 0xb3, 0x02, 0xf5, 0xab, 0x9f,
	0xce, 0x74, 0xe0, 0x0f, 0x2d, 0x9d, 0x1c, 0x41, 0xd5, 0xbc, 0x22, 0x48, 0xbd, 0x95, 0x3e, 0x48,
	0xae, 0x04, 0x1f, 0x37, 0x1a, 0xf9, 0x6f, 0xe4, 0xde, 0x19, 0xdf, 0x42, 0xcd, 0x72, 0xcf, 0x2e,
	0x2f, 0xfa, 0x64, 0xbf, 0x35, 0x7f, 0x95, 0x58, 0x63, 0xda, 0x51, 0x8d, 0xc7, 0x25, 0x7b, 0xca,
	0xfe, 0x06, 0x1e, 0x74, 0x51, 0xcf, 0x1f, 0x03, 0x1f, 0x94, 0x2f, 0xd3, 0xeb, 0x34, 0x0a, 0x7f,
	0x7c, 0x73, 0xf4, 0x29, 0xec, 0x76, 0x51, 0xe7, 0xc7, 0xda, 0x72, 0x0f, 0x85, 0xf1, 0x95, 0xa7,
	0x7c, 0x06, 0x95, 0xbe, 0x98, 0x10, 0xb7, 0xd4, 0xce, 0x59, 0xf4, 0xb9, 0x64, 0x90, 0x2e, 0x90,
	0x2e, 0xea, 0xa2, 0x60, 0x97, 0x94, 0xa1, 0x51, 0x98, 0xcf, 0x45, 0xca, 0x11, 0x6c, 0x75, 0x51,
	0xdb, 0x52, 0x15, 0xf2, 0xbd, 0x5f, 0x76, 0x66, 0x4a, 0xff, 0xca, 0x83, 0x66, 0x88, 0x7a, 0xf1,
	0x59, 0x68, 0x9e, 0x84, 0x39, 0xf0, 0xf5, 0x86, 0x7d, 0x0e, 0x7e, 0xfe, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xde, 0xe3, 0xee, 0x17, 0xbe, 0x0a, 0x00, 0x00,
}
