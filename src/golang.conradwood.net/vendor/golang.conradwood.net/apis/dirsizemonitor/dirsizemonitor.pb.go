// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/dirsizemonitor/dirsizemonitor.proto
// DO NOT EDIT!

/*
Package dirsizemonitor is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/dirsizemonitor/dirsizemonitor.proto

It has these top-level messages:
	PingResponse
	ConfigEntry
	DirString
	Config
*/
package dirsizemonitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type ConfigEntry struct {
	TopDir         string   `protobuf:"bytes,1,opt,name=TopDir" json:"TopDir,omitempty"`
	MaxDepth       uint32   `protobuf:"varint,2,opt,name=MaxDepth" json:"MaxDepth,omitempty"`
	DirNameMatches []string `protobuf:"bytes,3,rep,name=DirNameMatches" json:"DirNameMatches,omitempty"`
}

func (m *ConfigEntry) Reset()                    { *m = ConfigEntry{} }
func (m *ConfigEntry) String() string            { return proto.CompactTextString(m) }
func (*ConfigEntry) ProtoMessage()               {}
func (*ConfigEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigEntry) GetTopDir() string {
	if m != nil {
		return m.TopDir
	}
	return ""
}

func (m *ConfigEntry) GetMaxDepth() uint32 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

func (m *ConfigEntry) GetDirNameMatches() []string {
	if m != nil {
		return m.DirNameMatches
	}
	return nil
}

type DirString struct {
	TopDir string `protobuf:"bytes,1,opt,name=TopDir" json:"TopDir,omitempty"`
}

func (m *DirString) Reset()                    { *m = DirString{} }
func (m *DirString) String() string            { return proto.CompactTextString(m) }
func (*DirString) ProtoMessage()               {}
func (*DirString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DirString) GetTopDir() string {
	if m != nil {
		return m.TopDir
	}
	return ""
}

type Config struct {
	Entries []*ConfigEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Config) GetEntries() []*ConfigEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "dirsizemonitor.PingResponse")
	proto.RegisterType((*ConfigEntry)(nil), "dirsizemonitor.ConfigEntry")
	proto.RegisterType((*DirString)(nil), "dirsizemonitor.DirString")
	proto.RegisterType((*Config)(nil), "dirsizemonitor.Config")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DirSizeMonitor service

type DirSizeMonitorClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	ListConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Config, error)
	AddEntry(ctx context.Context, in *ConfigEntry, opts ...grpc.CallOption) (*Config, error)
	RemoveEntry(ctx context.Context, in *DirString, opts ...grpc.CallOption) (*Config, error)
}

type dirSizeMonitorClient struct {
	cc *grpc.ClientConn
}

func NewDirSizeMonitorClient(cc *grpc.ClientConn) DirSizeMonitorClient {
	return &dirSizeMonitorClient{cc}
}

func (c *dirSizeMonitorClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/dirsizemonitor.DirSizeMonitor/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirSizeMonitorClient) ListConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/dirsizemonitor.DirSizeMonitor/ListConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirSizeMonitorClient) AddEntry(ctx context.Context, in *ConfigEntry, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/dirsizemonitor.DirSizeMonitor/AddEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirSizeMonitorClient) RemoveEntry(ctx context.Context, in *DirString, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/dirsizemonitor.DirSizeMonitor/RemoveEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DirSizeMonitor service

type DirSizeMonitorServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	ListConfig(context.Context, *common.Void) (*Config, error)
	AddEntry(context.Context, *ConfigEntry) (*Config, error)
	RemoveEntry(context.Context, *DirString) (*Config, error)
}

func RegisterDirSizeMonitorServer(s *grpc.Server, srv DirSizeMonitorServer) {
	s.RegisterService(&_DirSizeMonitor_serviceDesc, srv)
}

func _DirSizeMonitor_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirSizeMonitorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dirsizemonitor.DirSizeMonitor/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirSizeMonitorServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirSizeMonitor_ListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirSizeMonitorServer).ListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dirsizemonitor.DirSizeMonitor/ListConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirSizeMonitorServer).ListConfig(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirSizeMonitor_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirSizeMonitorServer).AddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dirsizemonitor.DirSizeMonitor/AddEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirSizeMonitorServer).AddEntry(ctx, req.(*ConfigEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirSizeMonitor_RemoveEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirSizeMonitorServer).RemoveEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dirsizemonitor.DirSizeMonitor/RemoveEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirSizeMonitorServer).RemoveEntry(ctx, req.(*DirString))
	}
	return interceptor(ctx, in, info, handler)
}

var _DirSizeMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dirsizemonitor.DirSizeMonitor",
	HandlerType: (*DirSizeMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DirSizeMonitor_Ping_Handler,
		},
		{
			MethodName: "ListConfig",
			Handler:    _DirSizeMonitor_ListConfig_Handler,
		},
		{
			MethodName: "AddEntry",
			Handler:    _DirSizeMonitor_AddEntry_Handler,
		},
		{
			MethodName: "RemoveEntry",
			Handler:    _DirSizeMonitor_RemoveEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/dirsizemonitor/dirsizemonitor.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/dirsizemonitor/dirsizemonitor.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x53, 0x31, 0x08, 0x03, 0x72, 0xd8, 0x03, 0xa9, 0xe8, 0xa1, 0xa9, 0xc6, 0x34, 0x1e,
	0x4a, 0x52, 0xe3, 0x55, 0xfc, 0xa8, 0x37, 0x31, 0xa6, 0x18, 0xef, 0x95, 0x8e, 0x65, 0x12, 0xbb,
	0xd3, 0xec, 0x6e, 0xfc, 0xe0, 0x5f, 0xf7, 0x62, 0x4a, 0x0b, 0x81, 0x46, 0x38, 0xb5, 0x6f, 0xf2,
	0xe6, 0xed, 0x2f, 0x2f, 0x03, 0xd7, 0x29, 0x7f, 0xc4, 0x32, 0xf5, 0xa7, 0x2c, 0x55, 0x9c, 0x7c,
	0x31, 0x27, 0xbe, 0x44, 0x33, 0x8c, 0x73, 0xd2, 0xc3, 0x84, 0x94, 0xa6, 0x39, 0x66, 0x2c, 0xc9,
	0xb0, 0xaa, 0x49, 0x3f, 0x57, 0x6c, 0x58, 0xf4, 0x36, 0xa7, 0x03, 0x7f, 0x47, 0xde, 0x94, 0xb3,
	0x8c, 0x65, 0xf5, 0x29, 0xf7, 0xdd, 0x0b, 0xe8, 0x3e, 0x93, 0x4c, 0x23, 0xd4, 0x39, 0x4b, 0x8d,
	0x62, 0x00, 0xad, 0xe5, 0xbf, 0x6d, 0x39, 0x96, 0xd7, 0x8e, 0x56, 0xda, 0x25, 0xe8, 0xdc, 0xb3,
	0x7c, 0xa7, 0xf4, 0x41, 0x1a, 0xf5, 0x23, 0xfa, 0xd0, 0x7c, 0xe1, 0x3c, 0x24, 0x55, 0x19, 0x2b,
	0x55, 0x44, 0x8c, 0xe3, 0xef, 0x10, 0x73, 0x33, 0xb3, 0xf7, 0x1c, 0xcb, 0x3b, 0x8c, 0x56, 0x5a,
	0x9c, 0x43, 0x2f, 0x24, 0xf5, 0x14, 0x67, 0x38, 0x8e, 0xcd, 0x74, 0x86, 0xda, 0x6e, 0x38, 0x0d,
	0xaf, 0x1d, 0xd5, 0xa6, 0xee, 0x29, 0xb4, 0x43, 0x52, 0x13, 0xa3, 0x48, 0xa6, 0xdb, 0x1e, 0x72,
	0x47, 0xd0, 0x2c, 0x79, 0xc4, 0x15, 0x1c, 0x14, 0x4c, 0x84, 0xda, 0xb6, 0x9c, 0x86, 0xd7, 0x09,
	0x8e, 0xfd, 0x5a, 0x5b, 0x6b, 0xe0, 0xd1, 0xd2, 0x1b, 0xfc, 0x5a, 0x0b, 0x9c, 0x09, 0xcd, 0x71,
	0x5c, 0xfa, 0x44, 0x00, 0xfb, 0x45, 0x1f, 0xa2, 0xeb, 0x57, 0x35, 0xbd, 0x32, 0x25, 0x83, 0x93,
	0x7a, 0xdc, 0x46, 0x67, 0x01, 0xc0, 0x23, 0x69, 0x53, 0xb1, 0x6c, 0x6e, 0xf6, 0xff, 0x07, 0x11,
	0x23, 0x68, 0xdd, 0x26, 0x49, 0x59, 0xe4, 0x2e, 0xd8, 0xad, 0x01, 0x37, 0xd0, 0x89, 0x30, 0xe3,
	0x4f, 0x2c, 0x33, 0x8e, 0xea, 0xb6, 0x55, 0x7d, 0xdb, 0x12, 0xee, 0xce, 0xc0, 0x95, 0x68, 0xd6,
	0x2f, 0xa5, 0xb8, 0x92, 0x9a, 0xf9, 0xad, 0xb9, 0xb8, 0x93, 0xcb, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0x17, 0x55, 0xb1, 0xa9, 0x02, 0x00, 0x00,
}
