// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/scbluetooth/scbluetooth.proto
// DO NOT EDIT!

/*
Package scbluetooth is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/scbluetooth/scbluetooth.proto

It has these top-level messages:
	PingResponse
	Peer
	PeerList
*/
package scbluetooth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import singingcat "golang.singingcat.net/apis/singingcat"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type Peer struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Mac  uint64 `protobuf:"varint,2,opt,name=Mac" json:"Mac,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetMac() uint64 {
	if m != nil {
		return m.Mac
	}
	return 0
}

type PeerList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=Peers" json:"Peers,omitempty"`
}

func (m *PeerList) Reset()                    { *m = PeerList{} }
func (m *PeerList) String() string            { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()               {}
func (*PeerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PeerList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "scbluetooth.PingResponse")
	proto.RegisterType((*Peer)(nil), "scbluetooth.Peer")
	proto.RegisterType((*PeerList)(nil), "scbluetooth.PeerList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCBluetooth service

type SCBluetoothClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// query module for peers
	QueryModule(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*PeerList, error)
}

type sCBluetoothClient struct {
	cc *grpc.ClientConn
}

func NewSCBluetoothClient(cc *grpc.ClientConn) SCBluetoothClient {
	return &sCBluetoothClient{cc}
}

func (c *sCBluetoothClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/scbluetooth.SCBluetooth/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCBluetoothClient) QueryModule(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/scbluetooth.SCBluetooth/QueryModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCBluetooth service

type SCBluetoothServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// query module for peers
	QueryModule(context.Context, *singingcat.ModuleRef) (*PeerList, error)
}

func RegisterSCBluetoothServer(s *grpc.Server, srv SCBluetoothServer) {
	s.RegisterService(&_SCBluetooth_serviceDesc, srv)
}

func _SCBluetooth_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCBluetoothServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scbluetooth.SCBluetooth/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCBluetoothServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCBluetooth_QueryModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCBluetoothServer).QueryModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scbluetooth.SCBluetooth/QueryModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCBluetoothServer).QueryModule(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCBluetooth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scbluetooth.SCBluetooth",
	HandlerType: (*SCBluetoothServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SCBluetooth_Ping_Handler,
		},
		{
			MethodName: "QueryModule",
			Handler:    _SCBluetooth_QueryModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/scbluetooth/scbluetooth.proto",
}

func init() {
	proto.RegisterFile("golang.singingcat.net/apis/scbluetooth/scbluetooth.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xa9, 0xab, 0x32, 0x5f, 0x77, 0xd0, 0xc0, 0xa0, 0xf6, 0x62, 0xed, 0xc5, 0x22, 0x92,
	0xc2, 0x06, 0x22, 0x78, 0x9b, 0x57, 0x27, 0xb3, 0x82, 0xf7, 0xac, 0x8d, 0x31, 0xd0, 0xe6, 0x95,
	0x26, 0x45, 0xc4, 0x7f, 0x5e, 0xb2, 0xb6, 0x33, 0x22, 0xec, 0x94, 0x4f, 0xde, 0xf7, 0x7d, 0xdf,
	0x2f, 0xb8, 0x17, 0x58, 0x31, 0x25, 0xa8, 0x96, 0x4a, 0x48, 0x25, 0x0a, 0x66, 0xa8, 0xe2, 0x26,
	0x63, 0x8d, 0xd4, 0x99, 0x2e, 0xb6, 0x55, 0xc7, 0x0d, 0xa2, 0xf9, 0x70, 0x99, 0x36, 0x2d, 0x1a,
	0x24, 0x81, 0x13, 0x8a, 0xe8, 0x50, 0xa6, 0x40, 0xd5, 0xb2, 0xf2, 0x13, 0xb1, 0xfc, 0x2d, 0x53,
	0x60, 0x5d, 0xa3, 0x1a, 0x9e, 0xde, 0x1c, 0xdd, 0x1d, 0x6a, 0xbb, 0x8f, 0x39, 0xd8, 0xfb, 0x92,
	0x1b, 0x98, 0x6d, 0xa4, 0x12, 0x39, 0xd7, 0x0d, 0x2a, 0xcd, 0x49, 0x04, 0xd3, 0x91, 0x43, 0x2f,
	0xf6, 0xd2, 0xd3, 0x7c, 0xff, 0x4f, 0x6e, 0xc1, 0xdf, 0x70, 0xde, 0x12, 0x02, 0xfe, 0x33, 0xab,
	0x47, 0x7d, 0xc7, 0xe4, 0x0c, 0x26, 0x6b, 0x56, 0x84, 0x47, 0xb1, 0x97, 0xfa, 0xb9, 0xc5, 0x64,
	0x09, 0x53, 0x9b, 0xfd, 0x24, 0xb5, 0x21, 0xd7, 0x70, 0x6c, 0x59, 0x87, 0x5e, 0x3c, 0x49, 0x83,
	0xc5, 0x39, 0x75, 0xb7, 0xb7, 0x4a, 0xde, 0xeb, 0x8b, 0x6f, 0x08, 0x5e, 0x1f, 0x57, 0xa3, 0x44,
	0x32, 0xf0, 0xed, 0x74, 0x64, 0x46, 0x87, 0x65, 0xdf, 0x50, 0x96, 0xd1, 0xc5, 0x5f, 0xbb, 0x3b,
	0xfe, 0x03, 0x04, 0x2f, 0x1d, 0x6f, 0xbf, 0xd6, 0x58, 0x76, 0x15, 0x27, 0x73, 0xf7, 0x1e, 0x7d,
	0x2c, 0xe7, 0xef, 0xd1, 0xfc, 0x5f, 0x7f, 0x3b, 0xe5, 0xea, 0x0a, 0x2e, 0x15, 0x37, 0xae, 0xc5,
	0x9e, 0xcf, 0xcd, 0xdd, 0x9e, 0xec, 0xae, 0xb6, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x60,
	0x80, 0x6d, 0xe6, 0x01, 0x00, 0x00,
}
