// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/userappcontroller/userappcontroller.proto
// DO NOT EDIT!

/*
Package userappcontroller is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/userappcontroller/userappcontroller.proto

It has these top-level messages:
	UserAppConfig
	InboundCommandConfig
	UserAppInfo
	SetFlagsRequest
	FlagDescription
	GetFlagDescRequest
	FlagDescriptionList
	GetFlagInfoRequest
	FlagInfoList
	FlagInfo
	ChangeFlagRequest
	FailedModule
	FailedModuleList
*/
package userappcontroller

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import singingcat "golang.singingcat.net/apis/singingcat"
import scmodcomms "golang.singingcat.net/apis/scmodcomms"
import scweb "golang.singingcat.net/apis/scweb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// send this to the module
type UserAppConfig struct {
	ModuleID uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Config   []byte `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	Version  uint32 `protobuf:"varint,3,opt,name=Version" json:"Version,omitempty"`
}

func (m *UserAppConfig) Reset()                    { *m = UserAppConfig{} }
func (m *UserAppConfig) String() string            { return proto.CompactTextString(m) }
func (*UserAppConfig) ProtoMessage()               {}
func (*UserAppConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserAppConfig) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *UserAppConfig) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UserAppConfig) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type InboundCommandConfig struct {
	ID         uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ModuleID   uint64 `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Push       bool   `protobuf:"varint,3,opt,name=Push" json:"Push,omitempty"`
	PushURL    string `protobuf:"bytes,4,opt,name=PushURL" json:"PushURL,omitempty"`
	PushHeader string `protobuf:"bytes,5,opt,name=PushHeader" json:"PushHeader,omitempty"`
}

func (m *InboundCommandConfig) Reset()                    { *m = InboundCommandConfig{} }
func (m *InboundCommandConfig) String() string            { return proto.CompactTextString(m) }
func (*InboundCommandConfig) ProtoMessage()               {}
func (*InboundCommandConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InboundCommandConfig) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InboundCommandConfig) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *InboundCommandConfig) GetPush() bool {
	if m != nil {
		return m.Push
	}
	return false
}

func (m *InboundCommandConfig) GetPushURL() string {
	if m != nil {
		return m.PushURL
	}
	return ""
}

func (m *InboundCommandConfig) GetPushHeader() string {
	if m != nil {
		return m.PushHeader
	}
	return ""
}

type UserAppInfo struct {
	ID        uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ModuleID  uint64 `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Base      uint32 `protobuf:"varint,3,opt,name=Base" json:"Base,omitempty"`
	Version   uint32 `protobuf:"varint,4,opt,name=Version" json:"Version,omitempty"`
	HasFailed bool   `protobuf:"varint,5,opt,name=HasFailed" json:"HasFailed,omitempty"`
	CRCValid  bool   `protobuf:"varint,6,opt,name=CRCValid" json:"CRCValid,omitempty"`
	Enabled   bool   `protobuf:"varint,7,opt,name=Enabled" json:"Enabled,omitempty"`
	Flags     uint32 `protobuf:"varint,8,opt,name=Flags" json:"Flags,omitempty"`
}

func (m *UserAppInfo) Reset()                    { *m = UserAppInfo{} }
func (m *UserAppInfo) String() string            { return proto.CompactTextString(m) }
func (*UserAppInfo) ProtoMessage()               {}
func (*UserAppInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserAppInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserAppInfo) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *UserAppInfo) GetBase() uint32 {
	if m != nil {
		return m.Base
	}
	return 0
}

func (m *UserAppInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UserAppInfo) GetHasFailed() bool {
	if m != nil {
		return m.HasFailed
	}
	return false
}

func (m *UserAppInfo) GetCRCValid() bool {
	if m != nil {
		return m.CRCValid
	}
	return false
}

func (m *UserAppInfo) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *UserAppInfo) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type SetFlagsRequest struct {
	Module *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=Module" json:"Module,omitempty"`
	Flags  uint32                `protobuf:"varint,2,opt,name=Flags" json:"Flags,omitempty"`
}

func (m *SetFlagsRequest) Reset()                    { *m = SetFlagsRequest{} }
func (m *SetFlagsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetFlagsRequest) ProtoMessage()               {}
func (*SetFlagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetFlagsRequest) GetModule() *singingcat.ModuleRef {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *SetFlagsRequest) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type FlagDescription struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	RepositoryID uint64 `protobuf:"varint,3,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	Bit          uint32 `protobuf:"varint,4,opt,name=Bit" json:"Bit,omitempty"`
}

func (m *FlagDescription) Reset()                    { *m = FlagDescription{} }
func (m *FlagDescription) String() string            { return proto.CompactTextString(m) }
func (*FlagDescription) ProtoMessage()               {}
func (*FlagDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FlagDescription) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *FlagDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlagDescription) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *FlagDescription) GetBit() uint32 {
	if m != nil {
		return m.Bit
	}
	return 0
}

type GetFlagDescRequest struct {
	RepositoryID uint64 `protobuf:"varint,1,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *GetFlagDescRequest) Reset()                    { *m = GetFlagDescRequest{} }
func (m *GetFlagDescRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFlagDescRequest) ProtoMessage()               {}
func (*GetFlagDescRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetFlagDescRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type FlagDescriptionList struct {
	Descriptions []*FlagDescription `protobuf:"bytes,1,rep,name=Descriptions" json:"Descriptions,omitempty"`
}

func (m *FlagDescriptionList) Reset()                    { *m = FlagDescriptionList{} }
func (m *FlagDescriptionList) String() string            { return proto.CompactTextString(m) }
func (*FlagDescriptionList) ProtoMessage()               {}
func (*FlagDescriptionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FlagDescriptionList) GetDescriptions() []*FlagDescription {
	if m != nil {
		return m.Descriptions
	}
	return nil
}

type GetFlagInfoRequest struct {
	ModuleID     uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *GetFlagInfoRequest) Reset()                    { *m = GetFlagInfoRequest{} }
func (m *GetFlagInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFlagInfoRequest) ProtoMessage()               {}
func (*GetFlagInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetFlagInfoRequest) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *GetFlagInfoRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type FlagInfoList struct {
	Infos []*FlagInfo `protobuf:"bytes,1,rep,name=Infos" json:"Infos,omitempty"`
}

func (m *FlagInfoList) Reset()                    { *m = FlagInfoList{} }
func (m *FlagInfoList) String() string            { return proto.CompactTextString(m) }
func (*FlagInfoList) ProtoMessage()               {}
func (*FlagInfoList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FlagInfoList) GetInfos() []*FlagInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type FlagInfo struct {
	Name  string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	IsSet bool   `protobuf:"varint,2,opt,name=IsSet" json:"IsSet,omitempty"`
	Bit   uint32 `protobuf:"varint,3,opt,name=Bit" json:"Bit,omitempty"`
}

func (m *FlagInfo) Reset()                    { *m = FlagInfo{} }
func (m *FlagInfo) String() string            { return proto.CompactTextString(m) }
func (*FlagInfo) ProtoMessage()               {}
func (*FlagInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FlagInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlagInfo) GetIsSet() bool {
	if m != nil {
		return m.IsSet
	}
	return false
}

func (m *FlagInfo) GetBit() uint32 {
	if m != nil {
		return m.Bit
	}
	return 0
}

type ChangeFlagRequest struct {
	ModuleID uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Bit      uint32 `protobuf:"varint,2,opt,name=Bit" json:"Bit,omitempty"`
	NewState bool   `protobuf:"varint,3,opt,name=NewState" json:"NewState,omitempty"`
}

func (m *ChangeFlagRequest) Reset()                    { *m = ChangeFlagRequest{} }
func (m *ChangeFlagRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeFlagRequest) ProtoMessage()               {}
func (*ChangeFlagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ChangeFlagRequest) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *ChangeFlagRequest) GetBit() uint32 {
	if m != nil {
		return m.Bit
	}
	return 0
}

func (m *ChangeFlagRequest) GetNewState() bool {
	if m != nil {
		return m.NewState
	}
	return false
}

type FailedModule struct {
	Module      *scweb.Module `protobuf:"bytes,1,opt,name=Module" json:"Module,omitempty"`
	FailedSince uint32        `protobuf:"varint,2,opt,name=FailedSince" json:"FailedSince,omitempty"`
	FailMessage string        `protobuf:"bytes,3,opt,name=FailMessage" json:"FailMessage,omitempty"`
}

func (m *FailedModule) Reset()                    { *m = FailedModule{} }
func (m *FailedModule) String() string            { return proto.CompactTextString(m) }
func (*FailedModule) ProtoMessage()               {}
func (*FailedModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FailedModule) GetModule() *scweb.Module {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *FailedModule) GetFailedSince() uint32 {
	if m != nil {
		return m.FailedSince
	}
	return 0
}

func (m *FailedModule) GetFailMessage() string {
	if m != nil {
		return m.FailMessage
	}
	return ""
}

type FailedModuleList struct {
	Modules []*FailedModule `protobuf:"bytes,1,rep,name=Modules" json:"Modules,omitempty"`
}

func (m *FailedModuleList) Reset()                    { *m = FailedModuleList{} }
func (m *FailedModuleList) String() string            { return proto.CompactTextString(m) }
func (*FailedModuleList) ProtoMessage()               {}
func (*FailedModuleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FailedModuleList) GetModules() []*FailedModule {
	if m != nil {
		return m.Modules
	}
	return nil
}

func init() {
	proto.RegisterType((*UserAppConfig)(nil), "userappcontroller.UserAppConfig")
	proto.RegisterType((*InboundCommandConfig)(nil), "userappcontroller.InboundCommandConfig")
	proto.RegisterType((*UserAppInfo)(nil), "userappcontroller.UserAppInfo")
	proto.RegisterType((*SetFlagsRequest)(nil), "userappcontroller.SetFlagsRequest")
	proto.RegisterType((*FlagDescription)(nil), "userappcontroller.FlagDescription")
	proto.RegisterType((*GetFlagDescRequest)(nil), "userappcontroller.GetFlagDescRequest")
	proto.RegisterType((*FlagDescriptionList)(nil), "userappcontroller.FlagDescriptionList")
	proto.RegisterType((*GetFlagInfoRequest)(nil), "userappcontroller.GetFlagInfoRequest")
	proto.RegisterType((*FlagInfoList)(nil), "userappcontroller.FlagInfoList")
	proto.RegisterType((*FlagInfo)(nil), "userappcontroller.FlagInfo")
	proto.RegisterType((*ChangeFlagRequest)(nil), "userappcontroller.ChangeFlagRequest")
	proto.RegisterType((*FailedModule)(nil), "userappcontroller.FailedModule")
	proto.RegisterType((*FailedModuleList)(nil), "userappcontroller.FailedModuleList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserAppController service

type UserAppControllerClient interface {
	// called if we receive a command from a module relevant to userapp control
	CommandReceived(ctx context.Context, in *scmodcomms.Response, opts ...grpc.CallOption) (*scmodcomms.ComResponse, error)
	// query a module for its current userapp status
	QueryUserApp(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*UserAppInfo, error)
	// setUserAppFlags
	SetFlags(ctx context.Context, in *SetFlagsRequest, opts ...grpc.CallOption) (*common.Void, error)
	// create or set a flag description
	SetFlagDescription(ctx context.Context, in *FlagDescription, opts ...grpc.CallOption) (*FlagDescription, error)
	// get descriptions for a repo
	GetFlagDescriptions(ctx context.Context, in *GetFlagDescRequest, opts ...grpc.CallOption) (*FlagDescriptionList, error)
	// get flags and descriptions for module
	GetFlagInfo(ctx context.Context, in *GetFlagInfoRequest, opts ...grpc.CallOption) (*FlagInfoList, error)
	// change a single flag's status
	ChangeFlag(ctx context.Context, in *ChangeFlagRequest, opts ...grpc.CallOption) (*UserAppInfo, error)
	// reenable a userapp
	Reenable(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
	// disable userapp
	Disable(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
	// send config. the config is sent asynchronously and might fail late, silently
	SendUserConfig(ctx context.Context, in *UserAppConfig, opts ...grpc.CallOption) (*common.Void, error)
	// retrieve the current userconfig from module
	RetrieveUserConfig(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*UserAppConfig, error)
	// set the config for inbound (from module to cloud) usercommands
	SetInboundCommandConfig(ctx context.Context, in *InboundCommandConfig, opts ...grpc.CallOption) (*common.Void, error)
	// get the config for inbound (from module to cloud) usercommands (always returns one, a default one if none has been explicitly set)
	GetInboundCommandConfig(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*InboundCommandConfig, error)
	// get failed modules
	GetFailedModules(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FailedModuleList, error)
}

type userAppControllerClient struct {
	cc *grpc.ClientConn
}

func NewUserAppControllerClient(cc *grpc.ClientConn) UserAppControllerClient {
	return &userAppControllerClient{cc}
}

func (c *userAppControllerClient) CommandReceived(ctx context.Context, in *scmodcomms.Response, opts ...grpc.CallOption) (*scmodcomms.ComResponse, error) {
	out := new(scmodcomms.ComResponse)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/CommandReceived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) QueryUserApp(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*UserAppInfo, error) {
	out := new(UserAppInfo)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/QueryUserApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) SetFlags(ctx context.Context, in *SetFlagsRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/SetFlags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) SetFlagDescription(ctx context.Context, in *FlagDescription, opts ...grpc.CallOption) (*FlagDescription, error) {
	out := new(FlagDescription)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/SetFlagDescription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) GetFlagDescriptions(ctx context.Context, in *GetFlagDescRequest, opts ...grpc.CallOption) (*FlagDescriptionList, error) {
	out := new(FlagDescriptionList)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/GetFlagDescriptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) GetFlagInfo(ctx context.Context, in *GetFlagInfoRequest, opts ...grpc.CallOption) (*FlagInfoList, error) {
	out := new(FlagInfoList)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/GetFlagInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) ChangeFlag(ctx context.Context, in *ChangeFlagRequest, opts ...grpc.CallOption) (*UserAppInfo, error) {
	out := new(UserAppInfo)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/ChangeFlag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) Reenable(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/Reenable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) Disable(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) SendUserConfig(ctx context.Context, in *UserAppConfig, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/SendUserConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) RetrieveUserConfig(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*UserAppConfig, error) {
	out := new(UserAppConfig)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/RetrieveUserConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) SetInboundCommandConfig(ctx context.Context, in *InboundCommandConfig, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/SetInboundCommandConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) GetInboundCommandConfig(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*InboundCommandConfig, error) {
	out := new(InboundCommandConfig)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/GetInboundCommandConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppControllerClient) GetFailedModules(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FailedModuleList, error) {
	out := new(FailedModuleList)
	err := grpc.Invoke(ctx, "/userappcontroller.UserAppController/GetFailedModules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAppController service

type UserAppControllerServer interface {
	// called if we receive a command from a module relevant to userapp control
	CommandReceived(context.Context, *scmodcomms.Response) (*scmodcomms.ComResponse, error)
	// query a module for its current userapp status
	QueryUserApp(context.Context, *singingcat.ModuleRef) (*UserAppInfo, error)
	// setUserAppFlags
	SetFlags(context.Context, *SetFlagsRequest) (*common.Void, error)
	// create or set a flag description
	SetFlagDescription(context.Context, *FlagDescription) (*FlagDescription, error)
	// get descriptions for a repo
	GetFlagDescriptions(context.Context, *GetFlagDescRequest) (*FlagDescriptionList, error)
	// get flags and descriptions for module
	GetFlagInfo(context.Context, *GetFlagInfoRequest) (*FlagInfoList, error)
	// change a single flag's status
	ChangeFlag(context.Context, *ChangeFlagRequest) (*UserAppInfo, error)
	// reenable a userapp
	Reenable(context.Context, *singingcat.ModuleRef) (*common.Void, error)
	// disable userapp
	Disable(context.Context, *singingcat.ModuleRef) (*common.Void, error)
	// send config. the config is sent asynchronously and might fail late, silently
	SendUserConfig(context.Context, *UserAppConfig) (*common.Void, error)
	// retrieve the current userconfig from module
	RetrieveUserConfig(context.Context, *singingcat.ModuleRef) (*UserAppConfig, error)
	// set the config for inbound (from module to cloud) usercommands
	SetInboundCommandConfig(context.Context, *InboundCommandConfig) (*common.Void, error)
	// get the config for inbound (from module to cloud) usercommands (always returns one, a default one if none has been explicitly set)
	GetInboundCommandConfig(context.Context, *singingcat.ModuleRef) (*InboundCommandConfig, error)
	// get failed modules
	GetFailedModules(context.Context, *common.Void) (*FailedModuleList, error)
}

func RegisterUserAppControllerServer(s *grpc.Server, srv UserAppControllerServer) {
	s.RegisterService(&_UserAppController_serviceDesc, srv)
}

func _UserAppController_CommandReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scmodcomms.Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).CommandReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/CommandReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).CommandReceived(ctx, req.(*scmodcomms.Response))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_QueryUserApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).QueryUserApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/QueryUserApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).QueryUserApp(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_SetFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).SetFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/SetFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).SetFlags(ctx, req.(*SetFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_SetFlagDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).SetFlagDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/SetFlagDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).SetFlagDescription(ctx, req.(*FlagDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_GetFlagDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlagDescRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).GetFlagDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/GetFlagDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).GetFlagDescriptions(ctx, req.(*GetFlagDescRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_GetFlagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlagInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).GetFlagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/GetFlagInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).GetFlagInfo(ctx, req.(*GetFlagInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_ChangeFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).ChangeFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/ChangeFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).ChangeFlag(ctx, req.(*ChangeFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_Reenable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).Reenable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/Reenable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).Reenable(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).Disable(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_SendUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).SendUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/SendUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).SendUserConfig(ctx, req.(*UserAppConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_RetrieveUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).RetrieveUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/RetrieveUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).RetrieveUserConfig(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_SetInboundCommandConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboundCommandConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).SetInboundCommandConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/SetInboundCommandConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).SetInboundCommandConfig(ctx, req.(*InboundCommandConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_GetInboundCommandConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).GetInboundCommandConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/GetInboundCommandConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).GetInboundCommandConfig(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAppController_GetFailedModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppControllerServer).GetFailedModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userappcontroller.UserAppController/GetFailedModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppControllerServer).GetFailedModules(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAppController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userappcontroller.UserAppController",
	HandlerType: (*UserAppControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandReceived",
			Handler:    _UserAppController_CommandReceived_Handler,
		},
		{
			MethodName: "QueryUserApp",
			Handler:    _UserAppController_QueryUserApp_Handler,
		},
		{
			MethodName: "SetFlags",
			Handler:    _UserAppController_SetFlags_Handler,
		},
		{
			MethodName: "SetFlagDescription",
			Handler:    _UserAppController_SetFlagDescription_Handler,
		},
		{
			MethodName: "GetFlagDescriptions",
			Handler:    _UserAppController_GetFlagDescriptions_Handler,
		},
		{
			MethodName: "GetFlagInfo",
			Handler:    _UserAppController_GetFlagInfo_Handler,
		},
		{
			MethodName: "ChangeFlag",
			Handler:    _UserAppController_ChangeFlag_Handler,
		},
		{
			MethodName: "Reenable",
			Handler:    _UserAppController_Reenable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _UserAppController_Disable_Handler,
		},
		{
			MethodName: "SendUserConfig",
			Handler:    _UserAppController_SendUserConfig_Handler,
		},
		{
			MethodName: "RetrieveUserConfig",
			Handler:    _UserAppController_RetrieveUserConfig_Handler,
		},
		{
			MethodName: "SetInboundCommandConfig",
			Handler:    _UserAppController_SetInboundCommandConfig_Handler,
		},
		{
			MethodName: "GetInboundCommandConfig",
			Handler:    _UserAppController_GetInboundCommandConfig_Handler,
		},
		{
			MethodName: "GetFailedModules",
			Handler:    _UserAppController_GetFailedModules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/userappcontroller/userappcontroller.proto",
}

func init() {
	proto.RegisterFile("golang.singingcat.net/apis/userappcontroller/userappcontroller.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x51, 0x4f, 0xe3, 0x46,
	0x10, 0x96, 0x43, 0x00, 0x33, 0x84, 0x03, 0xf6, 0x68, 0x71, 0xdd, 0xea, 0x2e, 0x72, 0x8f, 0x5e,
	0x1e, 0x5a, 0xa3, 0x52, 0xa9, 0x6a, 0xa5, 0x3e, 0xdc, 0x91, 0x00, 0x17, 0xe9, 0x38, 0x5d, 0x37,
	0x05, 0xa9, 0x52, 0x79, 0x30, 0xf1, 0x90, 0xb3, 0x9a, 0xec, 0xba, 0xde, 0xcd, 0x21, 0x5e, 0xfb,
	0x33, 0xfa, 0x13, 0xfa, 0xd2, 0x1f, 0xd4, 0x3f, 0x53, 0xed, 0x7a, 0x9d, 0x6c, 0x1c, 0x27, 0x44,
	0x7d, 0x21, 0x33, 0xb3, 0x33, 0xdf, 0x7c, 0x3b, 0x3b, 0x33, 0x18, 0x3a, 0x03, 0x3e, 0x8c, 0xd8,
	0x20, 0x14, 0x09, 0x1b, 0x24, 0x6c, 0xd0, 0x8f, 0x64, 0xc8, 0x50, 0x1e, 0x47, 0x69, 0x22, 0x8e,
	0xc7, 0x02, 0xb3, 0x28, 0x4d, 0xfb, 0x9c, 0xc9, 0x8c, 0x0f, 0x87, 0x98, 0xcd, 0x5b, 0xc2, 0x34,
	0xe3, 0x92, 0x93, 0xfd, 0xb9, 0x03, 0x3f, 0x34, 0xc0, 0x7d, 0xce, 0xb2, 0x28, 0xbe, 0xe7, 0x3c,
	0x9e, 0x02, 0xf7, 0xf9, 0x68, 0xc4, 0x99, 0xf9, 0xc9, 0x21, 0xfc, 0xef, 0x97, 0x10, 0x99, 0xda,
	0x2c, 0x71, 0x95, 0xb8, 0xfe, 0x88, 0xc7, 0x2a, 0x8b, 0x2d, 0x9a, 0xb8, 0xaf, 0x97, 0xc6, 0xdd,
	0xe3, 0x6d, 0xfe, 0x37, 0xf7, 0x0e, 0x6e, 0x60, 0xe7, 0x4a, 0x60, 0xf6, 0x3a, 0x4d, 0xdb, 0x9c,
	0xdd, 0x25, 0x03, 0xe2, 0x83, 0x7b, 0xc9, 0xe3, 0xf1, 0x10, 0xbb, 0x1d, 0xcf, 0x69, 0x3a, 0xad,
	0x3a, 0x9d, 0xe8, 0xe4, 0x53, 0xd8, 0xc8, 0xbd, 0xbc, 0x5a, 0xd3, 0x69, 0x35, 0xa8, 0xd1, 0x88,
	0x07, 0x9b, 0xd7, 0x98, 0x89, 0x84, 0x33, 0x6f, 0xad, 0xe9, 0xb4, 0x76, 0x68, 0xa1, 0x06, 0x7f,
	0x39, 0x70, 0xd0, 0x65, 0xb7, 0x7c, 0xcc, 0xe2, 0x36, 0x1f, 0x8d, 0x22, 0xf5, 0xa3, 0x43, 0x9e,
	0x40, 0x6d, 0x92, 0xa0, 0xd6, 0xed, 0x90, 0x17, 0x56, 0x5a, 0x05, 0x5e, 0x3f, 0x75, 0xff, 0xfe,
	0xf3, 0xb3, 0xba, 0xcc, 0xc6, 0x68, 0x11, 0x20, 0x50, 0x7f, 0x3f, 0x16, 0x1f, 0x74, 0x16, 0x97,
	0x6a, 0x59, 0x25, 0x57, 0xbf, 0x57, 0xf4, 0xad, 0x57, 0x6f, 0x3a, 0xad, 0x2d, 0x5a, 0xa8, 0xe4,
	0x19, 0x80, 0x12, 0xdf, 0x60, 0x14, 0x63, 0xe6, 0xad, 0xeb, 0x43, 0xcb, 0x12, 0xfc, 0xeb, 0xc0,
	0xb6, 0xb9, 0x7c, 0x97, 0xdd, 0xf1, 0xff, 0xcf, 0xe9, 0x34, 0x12, 0x68, 0x6e, 0xae, 0x65, 0xbb,
	0x20, 0xf5, 0x99, 0x82, 0x90, 0x2f, 0x60, 0xeb, 0x4d, 0x24, 0xce, 0xa3, 0x64, 0x88, 0xb1, 0xa6,
	0xe4, 0xd2, 0xa9, 0x41, 0x15, 0xbf, 0x4d, 0xdb, 0xd7, 0xd1, 0x30, 0x89, 0xbd, 0x0d, 0x7d, 0x38,
	0xd1, 0x15, 0xe6, 0x19, 0x8b, 0x6e, 0x55, 0xdc, 0xa6, 0x3e, 0x2a, 0x54, 0x72, 0x00, 0xeb, 0xe7,
	0xc3, 0x68, 0x20, 0x3c, 0x57, 0xe7, 0xca, 0x95, 0xe0, 0x1a, 0x76, 0x7b, 0x28, 0xb5, 0x4c, 0xf1,
	0x8f, 0x31, 0x0a, 0x49, 0xbe, 0x81, 0x8d, 0x9c, 0xb6, 0xbe, 0xe4, 0xf6, 0xc9, 0x27, 0x76, 0x93,
	0xe4, 0x27, 0x14, 0xef, 0xa8, 0x71, 0x9a, 0xe2, 0xd6, 0x6c, 0xdc, 0xdf, 0x61, 0x57, 0x09, 0x1d,
	0x14, 0xfd, 0x2c, 0x49, 0xa5, 0xba, 0x54, 0xb9, 0x70, 0x04, 0xea, 0xef, 0xa2, 0x11, 0xea, 0xb8,
	0x2d, 0xaa, 0x65, 0x12, 0x40, 0x83, 0x62, 0xca, 0x45, 0x22, 0x79, 0xf6, 0xd0, 0xed, 0xe8, 0x72,
	0xd5, 0xe9, 0x8c, 0x8d, 0xec, 0xc1, 0xda, 0x69, 0x22, 0x4d, 0xc9, 0x94, 0x18, 0xfc, 0x00, 0xe4,
	0x22, 0xbf, 0x84, 0xca, 0x57, 0xdc, 0xa3, 0x8c, 0xe5, 0xcc, 0x63, 0x05, 0x37, 0xf0, 0xb4, 0x44,
	0xf3, 0x6d, 0x22, 0x24, 0x39, 0x87, 0x86, 0x65, 0x12, 0x9e, 0xd3, 0x5c, 0x6b, 0x6d, 0x9f, 0x04,
	0xe1, 0xfc, 0x02, 0x28, 0x45, 0xd3, 0x99, 0xb8, 0xe0, 0x97, 0x09, 0x31, 0xd5, 0x3a, 0x05, 0xb1,
	0x65, 0xc3, 0x53, 0x26, 0x5d, 0xab, 0x20, 0xfd, 0x1a, 0x1a, 0x05, 0xa4, 0x66, 0xfb, 0x2d, 0xac,
	0x2b, 0xb9, 0xa0, 0xf9, 0xf9, 0x02, 0x9a, 0x9a, 0x42, 0xee, 0x19, 0x9c, 0x83, 0x5b, 0x98, 0x26,
	0xef, 0xe0, 0x58, 0xef, 0x70, 0x00, 0xeb, 0x5d, 0xd1, 0x43, 0xa9, 0xf3, 0xbb, 0x34, 0x57, 0x8a,
	0xca, 0xaf, 0x4d, 0x2b, 0x7f, 0x03, 0xfb, 0xed, 0x0f, 0x11, 0x1b, 0xa0, 0x42, 0x5b, 0xe5, 0x7e,
	0x06, 0xa2, 0x36, 0x81, 0x50, 0xde, 0xef, 0xf0, 0xbe, 0x27, 0x23, 0x89, 0x66, 0x62, 0x27, 0x7a,
	0xf0, 0x00, 0x8d, 0xbc, 0xe7, 0x4d, 0xaf, 0x1d, 0x95, 0x5a, 0x73, 0x27, 0xcc, 0xb7, 0x94, 0xe9,
	0xca, 0xa2, 0x25, 0x9b, 0xb0, 0x9d, 0x87, 0xf5, 0x12, 0xd6, 0x47, 0x93, 0xcc, 0x36, 0x15, 0x1e,
	0x97, 0x28, 0x44, 0x34, 0xc8, 0xf3, 0x6e, 0x51, 0xdb, 0x14, 0x5c, 0xc2, 0x9e, 0x9d, 0x5a, 0x17,
	0xfa, 0x47, 0xd8, 0xcc, 0xb5, 0xa2, 0xd4, 0xcf, 0xab, 0x4a, 0x6d, 0x45, 0xd1, 0xc2, 0xff, 0xe4,
	0x1f, 0x17, 0xf6, 0xa7, 0x2b, 0xd4, 0xf8, 0x92, 0x57, 0xb0, 0x6b, 0x16, 0x1e, 0xc5, 0x3e, 0x26,
	0x1f, 0xd5, 0x98, 0x86, 0xd6, 0xae, 0xa6, 0x28, 0x52, 0xce, 0x04, 0xfa, 0x87, 0xb6, 0xb5, 0xcd,
	0x47, 0xc5, 0x01, 0x39, 0x83, 0xc6, 0xcf, 0x63, 0xcc, 0x1e, 0x0c, 0x36, 0xa9, 0x1e, 0x56, 0xff,
	0x59, 0x05, 0x51, 0x7b, 0xa9, 0xfd, 0x04, 0x6e, 0xb1, 0x06, 0x48, 0x55, 0x9b, 0x97, 0x76, 0x84,
	0xdf, 0x08, 0xcd, 0x7f, 0xaf, 0x6b, 0x9e, 0xc4, 0xe4, 0x37, 0x20, 0xbd, 0xe9, 0xfc, 0x15, 0xf3,
	0xbe, 0xc2, 0xb8, 0xf8, 0x2b, 0xf8, 0x90, 0x18, 0x9e, 0x5e, 0xcc, 0xa1, 0x0b, 0x72, 0x54, 0x11,
	0x3a, 0xbf, 0x05, 0xfc, 0xaf, 0x1e, 0xcf, 0xa0, 0xdf, 0xf6, 0x0a, 0xb6, 0xad, 0x51, 0x5d, 0x86,
	0x6e, 0x8d, 0xb2, 0xff, 0x7c, 0xc9, 0xac, 0x69, 0x58, 0x0a, 0x30, 0x1d, 0x10, 0xf2, 0xa2, 0xc2,
	0x7d, 0x6e, 0x7e, 0x1e, 0x7d, 0xac, 0x63, 0x70, 0x29, 0xa2, 0x5e, 0xeb, 0x8b, 0xde, 0x7b, 0xf6,
	0x7d, 0x42, 0xd8, 0xec, 0x24, 0x62, 0x75, 0xff, 0x57, 0xf0, 0xa4, 0x87, 0x2c, 0x56, 0x39, 0xcd,
	0x3f, 0xe2, 0xe6, 0x62, 0x4a, 0xb9, 0x47, 0x09, 0xe1, 0x12, 0x08, 0x45, 0x99, 0x25, 0xf8, 0x11,
	0x2d, 0x94, 0x05, 0xc9, 0x1f, 0x05, 0x27, 0xef, 0xe1, 0xb0, 0x87, 0xb2, 0xf2, 0x13, 0xe1, 0x65,
	0x45, 0x70, 0x95, 0x63, 0x89, 0xe0, 0xaf, 0x70, 0x78, 0xb1, 0x00, 0x71, 0x01, 0xcb, 0x55, 0x13,
	0x91, 0x33, 0xd8, 0x53, 0x9d, 0x62, 0xad, 0x01, 0x41, 0x66, 0x92, 0xfb, 0x5f, 0x3e, 0xb2, 0x36,
	0x54, 0xe7, 0x9c, 0xbe, 0x84, 0x23, 0x86, 0xd2, 0xe6, 0xa2, 0x3e, 0xce, 0xe6, 0x23, 0x6f, 0x37,
	0xf4, 0x37, 0xda, 0x77, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x7e, 0xcc, 0xcd, 0xcc, 0x0a,
	0x00, 0x00,
}
