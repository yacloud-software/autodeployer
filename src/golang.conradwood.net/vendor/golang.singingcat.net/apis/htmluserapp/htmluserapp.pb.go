// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/htmluserapp/htmluserapp.proto
// DO NOT EDIT!

/*
Package htmluserapp is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/htmluserapp/htmluserapp.proto

It has these top-level messages:
	PingResponse
	UserPageRequest
	PageResponse
*/
package htmluserapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import scweb "golang.singingcat.net/apis/scweb"
import userappcontroller "golang.singingcat.net/apis/userappcontroller"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type UserPageRequest struct {
	Path string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	// maybe get parameters required?
	Module    *scweb.Module                           `protobuf:"bytes,2,opt,name=Module" json:"Module,omitempty"`
	ComConfig *userappcontroller.InboundCommandConfig `protobuf:"bytes,3,opt,name=ComConfig" json:"ComConfig,omitempty"`
}

func (m *UserPageRequest) Reset()                    { *m = UserPageRequest{} }
func (m *UserPageRequest) String() string            { return proto.CompactTextString(m) }
func (*UserPageRequest) ProtoMessage()               {}
func (*UserPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserPageRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UserPageRequest) GetModule() *scweb.Module {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *UserPageRequest) GetComConfig() *userappcontroller.InboundCommandConfig {
	if m != nil {
		return m.ComConfig
	}
	return nil
}

type PageResponse struct {
	Body string `protobuf:"bytes,1,opt,name=Body" json:"Body,omitempty"`
}

func (m *PageResponse) Reset()                    { *m = PageResponse{} }
func (m *PageResponse) String() string            { return proto.CompactTextString(m) }
func (*PageResponse) ProtoMessage()               {}
func (*PageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PageResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "htmluserapp.PingResponse")
	proto.RegisterType((*UserPageRequest)(nil), "htmluserapp.UserPageRequest")
	proto.RegisterType((*PageResponse)(nil), "htmluserapp.PageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HTMLUserApp service

type HTMLUserAppClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// get a page (snippet, no header/footer!) for a url
	GetPageForUser(ctx context.Context, in *UserPageRequest, opts ...grpc.CallOption) (*PageResponse, error)
}

type hTMLUserAppClient struct {
	cc *grpc.ClientConn
}

func NewHTMLUserAppClient(cc *grpc.ClientConn) HTMLUserAppClient {
	return &hTMLUserAppClient{cc}
}

func (c *hTMLUserAppClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/htmluserapp.HTMLUserApp/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTMLUserAppClient) GetPageForUser(ctx context.Context, in *UserPageRequest, opts ...grpc.CallOption) (*PageResponse, error) {
	out := new(PageResponse)
	err := grpc.Invoke(ctx, "/htmluserapp.HTMLUserApp/GetPageForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HTMLUserApp service

type HTMLUserAppServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// get a page (snippet, no header/footer!) for a url
	GetPageForUser(context.Context, *UserPageRequest) (*PageResponse, error)
}

func RegisterHTMLUserAppServer(s *grpc.Server, srv HTMLUserAppServer) {
	s.RegisterService(&_HTMLUserApp_serviceDesc, srv)
}

func _HTMLUserApp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTMLUserAppServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/htmluserapp.HTMLUserApp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTMLUserAppServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTMLUserApp_GetPageForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTMLUserAppServer).GetPageForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/htmluserapp.HTMLUserApp/GetPageForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTMLUserAppServer).GetPageForUser(ctx, req.(*UserPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTMLUserApp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "htmluserapp.HTMLUserApp",
	HandlerType: (*HTMLUserAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HTMLUserApp_Ping_Handler,
		},
		{
			MethodName: "GetPageForUser",
			Handler:    _HTMLUserApp_GetPageForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/htmluserapp/htmluserapp.proto",
}

func init() {
	proto.RegisterFile("golang.singingcat.net/apis/htmluserapp/htmluserapp.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x6b, 0xe3, 0x30,
	0x10, 0xc5, 0xbb, 0x21, 0x6c, 0x94, 0xec, 0x2e, 0xe8, 0x94, 0x9a, 0x42, 0x53, 0x43, 0x69, 0x28,
	0x45, 0x81, 0xf4, 0xd2, 0x6b, 0x93, 0x7e, 0x05, 0x1a, 0x08, 0xa6, 0xed, 0x5d, 0xb1, 0x55, 0xc5,
	0x60, 0xcf, 0xa8, 0x92, 0x4c, 0xe8, 0x4f, 0xe8, 0xb9, 0x7f, 0xb8, 0x28, 0x56, 0x1a, 0x27, 0x81,
	0x5c, 0xac, 0xe7, 0xd1, 0xd3, 0x9b, 0x37, 0xf3, 0xc8, 0xb5, 0xc4, 0x9c, 0x83, 0x64, 0x26, 0x03,
	0x99, 0x81, 0x4c, 0xb8, 0x65, 0x20, 0xec, 0x80, 0xab, 0xcc, 0x0c, 0x16, 0xb6, 0xc8, 0x4b, 0x23,
	0x34, 0x57, 0xaa, 0x8e, 0x99, 0xd2, 0x68, 0x91, 0xb6, 0x6b, 0xa5, 0x90, 0x79, 0x99, 0x04, 0x41,
	0xf3, 0x74, 0x89, 0x98, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x7f, 0x54, 0x8f, 0xc3, 0xcb, 0x03,
	0x6d, 0x4d, 0xb2, 0x14, 0xf3, 0xea, 0xeb, 0xd9, 0xb7, 0x07, 0xd8, 0xde, 0x41, 0x82, 0x60, 0x35,
	0xe6, 0xb9, 0xd0, 0xfb, 0x95, 0x4a, 0x25, 0xba, 0x20, 0x9d, 0x59, 0x06, 0x32, 0x16, 0x46, 0x21,
	0x18, 0x41, 0x43, 0xf2, 0x67, 0x8d, 0xbb, 0x41, 0x2f, 0xe8, 0xb7, 0xe2, 0x9f, 0xff, 0xe8, 0x2b,
	0x20, 0xff, 0x5f, 0x8c, 0xd0, 0x33, 0x2e, 0x45, 0x2c, 0xde, 0x4b, 0x61, 0x2c, 0xa5, 0xa4, 0x31,
	0xe3, 0x76, 0xe1, 0xb9, 0x2b, 0x4c, 0xcf, 0x48, 0x73, 0x8a, 0x69, 0x99, 0x8b, 0xee, 0xaf, 0x5e,
	0xd0, 0x6f, 0x0f, 0xff, 0xb2, 0xca, 0x77, 0x55, 0x8c, 0xfd, 0x25, 0xbd, 0x23, 0xad, 0x31, 0x16,
	0x63, 0x84, 0xb7, 0x4c, 0x76, 0x7f, 0xaf, 0x98, 0xe7, 0x6c, 0xdf, 0xe7, 0x04, 0xe6, 0x58, 0x42,
	0x3a, 0xc6, 0xa2, 0xe0, 0xee, 0x70, 0xf4, 0x78, 0xf3, 0x32, 0x8a, 0x48, 0xa7, 0x32, 0xe4, 0x27,
	0xa0, 0xa4, 0x31, 0xc2, 0xf4, 0x63, 0xed, 0xc8, 0xe1, 0xe1, 0x67, 0x40, 0xda, 0x8f, 0xcf, 0xd3,
	0x27, 0xe7, 0xfe, 0x46, 0x29, 0x3a, 0x20, 0x0d, 0x37, 0x35, 0xed, 0x30, 0x1f, 0xc0, 0x2b, 0x66,
	0x69, 0x78, 0xc4, 0xea, 0x81, 0x6e, 0xad, 0x65, 0x42, 0xfe, 0x3d, 0x08, 0xeb, 0xfa, 0xdc, 0xa3,
	0x76, 0x2a, 0xf4, 0x78, 0x8b, 0xbc, 0xb3, 0x96, 0x5d, 0xa9, 0x9a, 0xbf, 0xd1, 0x29, 0x39, 0x01,
	0x61, 0xeb, 0xb1, 0xb9, 0xc8, 0xea, 0xfc, 0x79, 0x73, 0x95, 0xcd, 0xd5, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd4, 0x29, 0x48, 0x49, 0x88, 0x02, 0x00, 0x00,
}
