// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/scusb/scusb.proto
// DO NOT EDIT!

/*
Package scusb is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/scusb/scusb.proto

It has these top-level messages:
	PingResponse
	FlashRequest
	CancelRequest
*/
package scusb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type FlashRequest struct {
	USBPort  string `protobuf:"bytes,1,opt,name=USBPort" json:"USBPort,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=Filename" json:"Filename,omitempty"`
}

func (m *FlashRequest) Reset()                    { *m = FlashRequest{} }
func (m *FlashRequest) String() string            { return proto.CompactTextString(m) }
func (*FlashRequest) ProtoMessage()               {}
func (*FlashRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FlashRequest) GetUSBPort() string {
	if m != nil {
		return m.USBPort
	}
	return ""
}

func (m *FlashRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type CancelRequest struct {
	USBPort string `protobuf:"bytes,1,opt,name=USBPort" json:"USBPort,omitempty"`
}

func (m *CancelRequest) Reset()                    { *m = CancelRequest{} }
func (m *CancelRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelRequest) ProtoMessage()               {}
func (*CancelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CancelRequest) GetUSBPort() string {
	if m != nil {
		return m.USBPort
	}
	return ""
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "scusb.PingResponse")
	proto.RegisterType((*FlashRequest)(nil), "scusb.FlashRequest")
	proto.RegisterType((*CancelRequest)(nil), "scusb.CancelRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCUsb service

type SCUsbClient interface {
	// set up a 'flash this' loop:
	Flash(ctx context.Context, in *FlashRequest, opts ...grpc.CallOption) (*common.Void, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type sCUsbClient struct {
	cc *grpc.ClientConn
}

func NewSCUsbClient(cc *grpc.ClientConn) SCUsbClient {
	return &sCUsbClient{cc}
}

func (c *sCUsbClient) Flash(ctx context.Context, in *FlashRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scusb.SCUsb/Flash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCUsbClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scusb.SCUsb/Cancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCUsb service

type SCUsbServer interface {
	// set up a 'flash this' loop:
	Flash(context.Context, *FlashRequest) (*common.Void, error)
	Cancel(context.Context, *CancelRequest) (*common.Void, error)
}

func RegisterSCUsbServer(s *grpc.Server, srv SCUsbServer) {
	s.RegisterService(&_SCUsb_serviceDesc, srv)
}

func _SCUsb_Flash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCUsbServer).Flash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scusb.SCUsb/Flash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCUsbServer).Flash(ctx, req.(*FlashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCUsb_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCUsbServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scusb.SCUsb/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCUsbServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCUsb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scusb.SCUsb",
	HandlerType: (*SCUsbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Flash",
			Handler:    _SCUsb_Flash_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _SCUsb_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/scusb/scusb.proto",
}

func init() { proto.RegisterFile("golang.singingcat.net/apis/scusb/scusb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x55, 0xa4, 0x14, 0x38, 0x85, 0xc5, 0x30, 0x84, 0xb0, 0xa0, 0x4c, 0x50, 0x55, 0xae,
	0x04, 0xff, 0xa0, 0x45, 0x9d, 0xab, 0x54, 0x65, 0x77, 0x1c, 0xcb, 0x58, 0x4a, 0xee, 0x42, 0xce,
	0x15, 0x7f, 0x1f, 0x35, 0x76, 0xa0, 0x99, 0xba, 0xd8, 0x7e, 0xd2, 0x7b, 0xdf, 0xf9, 0x1e, 0x2c,
	0x2d, 0x35, 0x0a, 0xad, 0x64, 0x87, 0xd6, 0xa1, 0xd5, 0xca, 0x4b, 0x34, 0x7e, 0xa5, 0x3a, 0xc7,
	0x2b, 0xd6, 0x47, 0xae, 0xc2, 0x29, 0xbb, 0x9e, 0x3c, 0x89, 0x64, 0x10, 0xb9, 0x8c, 0x21, 0x4d,
	0xd8, 0xab, 0xfa, 0x87, 0xa8, 0xfe, 0x0f, 0x69, 0x6a, 0x5b, 0xc2, 0x78, 0x85, 0x58, 0xb1, 0x80,
	0x74, 0xe7, 0xd0, 0x96, 0x86, 0x3b, 0x42, 0x36, 0x22, 0x87, 0x9b, 0xf1, 0x9d, 0xcd, 0x9e, 0x67,
	0x2f, 0xb7, 0xe5, 0x9f, 0x2e, 0x3e, 0x20, 0xdd, 0x36, 0x8a, 0xbf, 0x4a, 0xf3, 0x7d, 0x34, 0xec,
	0x45, 0x06, 0xd7, 0x87, 0xfd, 0x7a, 0x47, 0xbd, 0x8f, 0xd6, 0x51, 0x9e, 0x28, 0x5b, 0xd7, 0x18,
	0x54, 0xad, 0xc9, 0xae, 0x02, 0x65, 0xd4, 0xc5, 0x2b, 0xdc, 0x6d, 0x14, 0x6a, 0xd3, 0x5c, 0xc4,
	0xbc, 0x29, 0x48, 0xf6, 0x9b, 0x03, 0x57, 0x62, 0x01, 0xc9, 0x30, 0x59, 0xdc, 0xcb, 0xb0, 0xf3,
	0xf9, 0x3f, 0xf2, 0x54, 0xc6, 0x95, 0x3e, 0xc9, 0xd5, 0x62, 0x09, 0xf3, 0xc0, 0x17, 0x0f, 0xd1,
	0x3c, 0x19, 0x37, 0x75, 0xaf, 0x9f, 0xe0, 0x11, 0x8d, 0x3f, 0xef, 0xf8, 0x54, 0x55, 0x08, 0x56,
	0xf3, 0xa1, 0xa3, 0xf7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x47, 0x58, 0x3e, 0x8a, 0x01,
	0x00, 0x00,
}
