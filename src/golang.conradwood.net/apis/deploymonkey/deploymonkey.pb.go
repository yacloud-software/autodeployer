// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/deploymonkey/deploymonkey.proto
// DO NOT EDIT!

/*
Package deploymonkey is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/deploymonkey/deploymonkey.proto

It has these top-level messages:
	DeploymentLog
	AppReference
	AppGroup
	GroupVersion
	LinkAppGroup
	ApplicationDefinition
	ContainerDef
	Limits
	SQLLimits
	GroupDefinitionRequest
	GroupConfig
	UpdateAppRequest
	EmptyResponse
	GroupDefResponse
	DeployRequest
	DeployResponse
	GetNameSpaceRequest
	GetNameSpaceResponse
	GetGroupsRequest
	GroupDef
	GetGroupsResponse
	GetAppsRequest
	GetAppResponse
	GetAppVersionsResponse
	GetAppsResponse
	UpdateRepoRequest
	ParseRequest
	ParseConfigResponse
	EmptyMessage
	ApplyRequest
	ListVersionRequest
	DeleteApplicationRequest
	UndeployApplicationRequest
	MachineStatus
	SetMachineStatusRequest
	UndeployResponse
	Deployment
	DeploymentList
	Deployer
	DeployersList
	Config
	DeployAppRequest
	UndeployAppRequest
	AutoRegistration
	ListVersionByNameRequest
	AutodeployerInfo
	AutodeployerList
	SuggestRequest
	Suggestion
	SuggestionList
	DelVersionRequest
	NewBuildAvailableRequest
	AppMeta
	ApplyStream
*/
package deploymonkey

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import grafanadata "golang.conradwood.net/apis/grafanadata"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GroupResponseStatus int32

const (
	// attempt to define a group that exists just like that
	GroupResponseStatus_NOCHANGE GroupResponseStatus = 0
	// change detected and accepted
	GroupResponseStatus_CHANGEACCEPTED GroupResponseStatus = 1
	// change detected but not accepted (permissions? protected group?)
	GroupResponseStatus_CHANGEREJECTED GroupResponseStatus = 2
)

var GroupResponseStatus_name = map[int32]string{
	0: "NOCHANGE",
	1: "CHANGEACCEPTED",
	2: "CHANGEREJECTED",
}
var GroupResponseStatus_value = map[string]int32{
	"NOCHANGE":       0,
	"CHANGEACCEPTED": 1,
	"CHANGEREJECTED": 2,
}

func (x GroupResponseStatus) String() string {
	return proto.EnumName(GroupResponseStatus_name, int32(x))
}
func (GroupResponseStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DeploymentLog struct {
	ID               uint64                 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Binary           string                 `protobuf:"bytes,3,opt,name=Binary" json:"Binary,omitempty"`
	AppDef           *ApplicationDefinition `protobuf:"bytes,4,opt,name=AppDef" json:"AppDef,omitempty"`
	BuildID          uint64                 `protobuf:"varint,5,opt,name=BuildID" json:"BuildID,omitempty"`
	AutoDeployerHost string                 `protobuf:"bytes,6,opt,name=AutoDeployerHost" json:"AutoDeployerHost,omitempty"`
	Started          uint32                 `protobuf:"varint,7,opt,name=Started" json:"Started,omitempty"`
	Finished         uint32                 `protobuf:"varint,8,opt,name=Finished" json:"Finished,omitempty"`
	Message          string                 `protobuf:"bytes,9,opt,name=Message" json:"Message,omitempty"`
	DeployAlgorithm  uint32                 `protobuf:"varint,10,opt,name=DeployAlgorithm" json:"DeployAlgorithm,omitempty"`
}

func (m *DeploymentLog) Reset()                    { *m = DeploymentLog{} }
func (m *DeploymentLog) String() string            { return proto.CompactTextString(m) }
func (*DeploymentLog) ProtoMessage()               {}
func (*DeploymentLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeploymentLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DeploymentLog) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *DeploymentLog) GetAppDef() *ApplicationDefinition {
	if m != nil {
		return m.AppDef
	}
	return nil
}

func (m *DeploymentLog) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *DeploymentLog) GetAutoDeployerHost() string {
	if m != nil {
		return m.AutoDeployerHost
	}
	return ""
}

func (m *DeploymentLog) GetStarted() uint32 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *DeploymentLog) GetFinished() uint32 {
	if m != nil {
		return m.Finished
	}
	return 0
}

func (m *DeploymentLog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeploymentLog) GetDeployAlgorithm() uint32 {
	if m != nil {
		return m.DeployAlgorithm
	}
	return 0
}

//
// this is stored with the applicaton and thus may be retrieved on
// the deploylist. it may also be retrieved by the application itself on the startup proto
type AppReference struct {
	ID     uint64                 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AppDef *ApplicationDefinition `protobuf:"bytes,2,opt,name=AppDef" json:"AppDef,omitempty"`
}

func (m *AppReference) Reset()                    { *m = AppReference{} }
func (m *AppReference) String() string            { return proto.CompactTextString(m) }
func (*AppReference) ProtoMessage()               {}
func (*AppReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppReference) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AppReference) GetAppDef() *ApplicationDefinition {
	if m != nil {
		return m.AppDef
	}
	return nil
}

// sql table definition
type AppGroup struct {
	ID              uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Namespace       string `protobuf:"bytes,2,opt,name=Namespace" json:"Namespace,omitempty"`
	Groupname       string `protobuf:"bytes,3,opt,name=Groupname" json:"Groupname,omitempty"`
	DeployedVersion uint32 `protobuf:"varint,4,opt,name=DeployedVersion" json:"DeployedVersion,omitempty"`
	PendingVersion  uint32 `protobuf:"varint,5,opt,name=PendingVersion" json:"PendingVersion,omitempty"`
}

func (m *AppGroup) Reset()                    { *m = AppGroup{} }
func (m *AppGroup) String() string            { return proto.CompactTextString(m) }
func (*AppGroup) ProtoMessage()               {}
func (*AppGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppGroup) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AppGroup) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AppGroup) GetGroupname() string {
	if m != nil {
		return m.Groupname
	}
	return ""
}

func (m *AppGroup) GetDeployedVersion() uint32 {
	if m != nil {
		return m.DeployedVersion
	}
	return 0
}

func (m *AppGroup) GetPendingVersion() uint32 {
	if m != nil {
		return m.PendingVersion
	}
	return 0
}

// sql table definition
type GroupVersion struct {
	ID               uint64    `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	GroupID          *AppGroup `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	CreatedTimestamp uint32    `protobuf:"varint,3,opt,name=CreatedTimestamp" json:"CreatedTimestamp,omitempty"`
}

func (m *GroupVersion) Reset()                    { *m = GroupVersion{} }
func (m *GroupVersion) String() string            { return proto.CompactTextString(m) }
func (*GroupVersion) ProtoMessage()               {}
func (*GroupVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GroupVersion) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GroupVersion) GetGroupID() *AppGroup {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *GroupVersion) GetCreatedTimestamp() uint32 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

// sql table definition
type LinkAppGroup struct {
	ID           uint64                 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	GroupVersion *GroupVersion          `protobuf:"bytes,2,opt,name=GroupVersion" json:"GroupVersion,omitempty"`
	App          *ApplicationDefinition `protobuf:"bytes,3,opt,name=App" json:"App,omitempty"`
}

func (m *LinkAppGroup) Reset()                    { *m = LinkAppGroup{} }
func (m *LinkAppGroup) String() string            { return proto.CompactTextString(m) }
func (*LinkAppGroup) ProtoMessage()               {}
func (*LinkAppGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LinkAppGroup) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LinkAppGroup) GetGroupVersion() *GroupVersion {
	if m != nil {
		return m.GroupVersion
	}
	return nil
}

func (m *LinkAppGroup) GetApp() *ApplicationDefinition {
	if m != nil {
		return m.App
	}
	return nil
}

type ApplicationDefinition struct {
	// deploymonkey internal ID
	ID uint64 `protobuf:"varint,13,opt,name=ID" json:"ID,omitempty"`
	// a url where the binary or tar archive is downloaded from
	// (may also be an absolute filename)
	DownloadURL string `protobuf:"bytes,1,opt,name=DownloadURL" json:"DownloadURL,omitempty"`
	// if the URL requires authentication, this is the username
	DownloadUser string `protobuf:"bytes,2,opt,name=DownloadUser" json:"DownloadUser,omitempty"`
	// if the URL requires authentication, this is the password
	DownloadPassword string `protobuf:"bytes,3,opt,name=DownloadPassword" json:"DownloadPassword,omitempty"`
	// if the URL is an archive, this refers to the binary within the archive (relative to the archive)
	Binary string `protobuf:"bytes,4,opt,name=Binary" json:"Binary,omitempty"`
	// list of arguments to pass as command line parameters to the application
	Args []string `protobuf:"bytes,5,rep,name=Args" json:"Args,omitempty"`
	// the repository this application is built from
	//  string Repository = 6;
	// the buildid of this application
	// (usually not part of deploy.yaml, but inserted by buildrepo)
	BuildID uint64 `protobuf:"varint,7,opt,name=BuildID" json:"BuildID,omitempty"`
	// how many instances should be running of this applicatoin
	Instances uint32 `protobuf:"varint,8,opt,name=Instances" json:"Instances,omitempty"`
	// usually not part of deploy.yaml - used by deploymonkey to track instances
	DeploymentID string `protobuf:"bytes,9,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// dunno
	AutoRegs []*AutoRegistration `protobuf:"bytes,10,rep,name=AutoRegs" json:"AutoRegs,omitempty"`
	// on which type of machines may this application be deployed. (must match autodeployer flag -machine_type)
	Machines string `protobuf:"bytes,11,opt,name=Machines" json:"Machines,omitempty"`
	// either "webpackage" or empty string
	DeployType string `protobuf:"bytes,12,opt,name=DeployType" json:"DeployType,omitempty"`
	// if false, the app is considered optional. It won't be restarted nor alerted on
	Critical bool `protobuf:"varint,14,opt,name=Critical" json:"Critical,omitempty"`
	// typically application starts and continues to run. some applications, however are run-once. AlwaysOn=false means it runs once and exits and that is normal
	// behaviour. If AlwaysOn is set to true and the application exits, it's considered an error
	AlwaysOn bool `protobuf:"varint,15,opt,name=AlwaysOn" json:"AlwaysOn,omitempty"`
	// some webpackges (e.g. "php(symfony)" REQUIRE a static directory). using this makes rollbacks somewhat "hit-and-miss". avoid if possible.
	StaticTargetDir string `protobuf:"bytes,16,opt,name=StaticTargetDir" json:"StaticTargetDir,omitempty"`
	// wether or not this is public. this means:
	// for webpackages: deploy in a public directory rather than a seperate directory
	Public bool `protobuf:"varint,17,opt,name=Public" json:"Public,omitempty"`
	// limits for this process. Defaults apply.
	Limits *Limits `protobuf:"bytes,18,opt,name=Limits" json:"Limits,omitempty"`
	//
	// we specifically support java (rather than just binaries).
	// it will start java with -cp=libs* [binary]
	// implies that "binary" is set to a main class
	Java                          bool          `protobuf:"varint,19,opt,name=Java" json:"Java,omitempty"`
	RepositoryID                  uint64        `protobuf:"varint,20,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	AsRoot                        bool          `protobuf:"varint,21,opt,name=AsRoot" json:"AsRoot,omitempty"`
	Container                     *ContainerDef `protobuf:"bytes,22,opt,name=Container" json:"Container,omitempty"`
	DiscardLog                    bool          `protobuf:"varint,23,opt,name=DiscardLog" json:"DiscardLog,omitempty"`
	ArtefactID                    uint64        `protobuf:"varint,24,opt,name=ArtefactID" json:"ArtefactID,omitempty"`
	Created                       uint32        `protobuf:"varint,25,opt,name=Created" json:"Created,omitempty"`
	InstancesMeansPerAutodeployer bool          `protobuf:"varint,26,opt,name=InstancesMeansPerAutodeployer" json:"InstancesMeansPerAutodeployer,omitempty"`
}

func (m *ApplicationDefinition) Reset()                    { *m = ApplicationDefinition{} }
func (m *ApplicationDefinition) String() string            { return proto.CompactTextString(m) }
func (*ApplicationDefinition) ProtoMessage()               {}
func (*ApplicationDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ApplicationDefinition) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ApplicationDefinition) GetDownloadURL() string {
	if m != nil {
		return m.DownloadURL
	}
	return ""
}

func (m *ApplicationDefinition) GetDownloadUser() string {
	if m != nil {
		return m.DownloadUser
	}
	return ""
}

func (m *ApplicationDefinition) GetDownloadPassword() string {
	if m != nil {
		return m.DownloadPassword
	}
	return ""
}

func (m *ApplicationDefinition) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *ApplicationDefinition) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ApplicationDefinition) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *ApplicationDefinition) GetInstances() uint32 {
	if m != nil {
		return m.Instances
	}
	return 0
}

func (m *ApplicationDefinition) GetDeploymentID() string {
	if m != nil {
		return m.DeploymentID
	}
	return ""
}

func (m *ApplicationDefinition) GetAutoRegs() []*AutoRegistration {
	if m != nil {
		return m.AutoRegs
	}
	return nil
}

func (m *ApplicationDefinition) GetMachines() string {
	if m != nil {
		return m.Machines
	}
	return ""
}

func (m *ApplicationDefinition) GetDeployType() string {
	if m != nil {
		return m.DeployType
	}
	return ""
}

func (m *ApplicationDefinition) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *ApplicationDefinition) GetAlwaysOn() bool {
	if m != nil {
		return m.AlwaysOn
	}
	return false
}

func (m *ApplicationDefinition) GetStaticTargetDir() string {
	if m != nil {
		return m.StaticTargetDir
	}
	return ""
}

func (m *ApplicationDefinition) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *ApplicationDefinition) GetLimits() *Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *ApplicationDefinition) GetJava() bool {
	if m != nil {
		return m.Java
	}
	return false
}

func (m *ApplicationDefinition) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *ApplicationDefinition) GetAsRoot() bool {
	if m != nil {
		return m.AsRoot
	}
	return false
}

func (m *ApplicationDefinition) GetContainer() *ContainerDef {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ApplicationDefinition) GetDiscardLog() bool {
	if m != nil {
		return m.DiscardLog
	}
	return false
}

func (m *ApplicationDefinition) GetArtefactID() uint64 {
	if m != nil {
		return m.ArtefactID
	}
	return 0
}

func (m *ApplicationDefinition) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ApplicationDefinition) GetInstancesMeansPerAutodeployer() bool {
	if m != nil {
		return m.InstancesMeansPerAutodeployer
	}
	return false
}

type ContainerDef struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	URL          string `protobuf:"bytes,2,opt,name=URL" json:"URL,omitempty"`
	UseOverlayFS bool   `protobuf:"varint,3,opt,name=UseOverlayFS" json:"UseOverlayFS,omitempty"`
}

func (m *ContainerDef) Reset()                    { *m = ContainerDef{} }
func (m *ContainerDef) String() string            { return proto.CompactTextString(m) }
func (*ContainerDef) ProtoMessage()               {}
func (*ContainerDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ContainerDef) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContainerDef) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *ContainerDef) GetUseOverlayFS() bool {
	if m != nil {
		return m.UseOverlayFS
	}
	return false
}

type Limits struct {
	// max memory available to this process in Megabyte (default = 3000Mb ) (memory.high)
	MaxMemory uint32 `protobuf:"varint,1,opt,name=MaxMemory" json:"MaxMemory,omitempty"`
	// see setPriorityCall on linux
	Priority int32 `protobuf:"varint,2,opt,name=Priority" json:"Priority,omitempty"`
	// max memory available to this process in Megabyte (default = 3000Mb ) (memory.max)
	MaxKillMemory uint32 `protobuf:"varint,3,opt,name=MaxKillMemory" json:"MaxKillMemory,omitempty"`
}

func (m *Limits) Reset()                    { *m = Limits{} }
func (m *Limits) String() string            { return proto.CompactTextString(m) }
func (*Limits) ProtoMessage()               {}
func (*Limits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Limits) GetMaxMemory() uint32 {
	if m != nil {
		return m.MaxMemory
	}
	return 0
}

func (m *Limits) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Limits) GetMaxKillMemory() uint32 {
	if m != nil {
		return m.MaxKillMemory
	}
	return 0
}

type SQLLimits struct {
	ID     uint64                 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AppDef *ApplicationDefinition `protobuf:"bytes,2,opt,name=AppDef" json:"AppDef,omitempty"`
	// max memory available to this process in Megabyte (default = 3000Mb ) (memory.high)
	MaxMemory uint32 `protobuf:"varint,3,opt,name=MaxMemory" json:"MaxMemory,omitempty"`
	// see setPriorityCall on linux
	Priority int32 `protobuf:"varint,4,opt,name=Priority" json:"Priority,omitempty"`
	// max memory available to this process in Megabyte (default = 3000Mb ) (memory.max)
	MaxKillMemory uint32 `protobuf:"varint,5,opt,name=MaxKillMemory" json:"MaxKillMemory,omitempty"`
}

func (m *SQLLimits) Reset()                    { *m = SQLLimits{} }
func (m *SQLLimits) String() string            { return proto.CompactTextString(m) }
func (*SQLLimits) ProtoMessage()               {}
func (*SQLLimits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SQLLimits) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SQLLimits) GetAppDef() *ApplicationDefinition {
	if m != nil {
		return m.AppDef
	}
	return nil
}

func (m *SQLLimits) GetMaxMemory() uint32 {
	if m != nil {
		return m.MaxMemory
	}
	return 0
}

func (m *SQLLimits) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SQLLimits) GetMaxKillMemory() uint32 {
	if m != nil {
		return m.MaxKillMemory
	}
	return 0
}

// a group consists of one or more applications
// and a key (chosen by the creator)
// if a group with a given key is redefined, all previous
// instances of software in this group will be shutdown
// any group can only have one application of a given repository
// in its group
type GroupDefinitionRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	GroupID   string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	// if we set a group as 'protected', then the deploymonkey
	// won't allow a user to update it unless the user has a special
	// authorisation. (To prevent accidental updates to 'live')
	Protected    bool                     `protobuf:"varint,3,opt,name=Protected" json:"Protected,omitempty"`
	Applications []*ApplicationDefinition `protobuf:"bytes,4,rep,name=Applications" json:"Applications,omitempty"`
}

func (m *GroupDefinitionRequest) Reset()                    { *m = GroupDefinitionRequest{} }
func (m *GroupDefinitionRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupDefinitionRequest) ProtoMessage()               {}
func (*GroupDefinitionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GroupDefinitionRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GroupDefinitionRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupDefinitionRequest) GetProtected() bool {
	if m != nil {
		return m.Protected
	}
	return false
}

func (m *GroupDefinitionRequest) GetApplications() []*ApplicationDefinition {
	if m != nil {
		return m.Applications
	}
	return nil
}

type GroupConfig struct {
	Group        *GroupDef                `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
	Applications []*ApplicationDefinition `protobuf:"bytes,2,rep,name=Applications" json:"Applications,omitempty"`
}

func (m *GroupConfig) Reset()                    { *m = GroupConfig{} }
func (m *GroupConfig) String() string            { return proto.CompactTextString(m) }
func (*GroupConfig) ProtoMessage()               {}
func (*GroupConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GroupConfig) GetGroup() *GroupDef {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupConfig) GetApplications() []*ApplicationDefinition {
	if m != nil {
		return m.Applications
	}
	return nil
}

type UpdateAppRequest struct {
	GroupID   string                 `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	Namespace string                 `protobuf:"bytes,2,opt,name=Namespace" json:"Namespace,omitempty"`
	App       *ApplicationDefinition `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
}

func (m *UpdateAppRequest) Reset()                    { *m = UpdateAppRequest{} }
func (m *UpdateAppRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppRequest) ProtoMessage()               {}
func (*UpdateAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateAppRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *UpdateAppRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateAppRequest) GetApp() *ApplicationDefinition {
	if m != nil {
		return m.App
	}
	return nil
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GroupDefResponse struct {
	Advice    []string            `protobuf:"bytes,1,rep,name=Advice" json:"Advice,omitempty"`
	VersionID string              `protobuf:"bytes,2,opt,name=VersionID" json:"VersionID,omitempty"`
	Result    GroupResponseStatus `protobuf:"varint,3,opt,name=Result,enum=deploymonkey.GroupResponseStatus" json:"Result,omitempty"`
}

func (m *GroupDefResponse) Reset()                    { *m = GroupDefResponse{} }
func (m *GroupDefResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupDefResponse) ProtoMessage()               {}
func (*GroupDefResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GroupDefResponse) GetAdvice() []string {
	if m != nil {
		return m.Advice
	}
	return nil
}

func (m *GroupDefResponse) GetVersionID() string {
	if m != nil {
		return m.VersionID
	}
	return ""
}

func (m *GroupDefResponse) GetResult() GroupResponseStatus {
	if m != nil {
		return m.Result
	}
	return GroupResponseStatus_NOCHANGE
}

type DeployRequest struct {
	VersionID string `protobuf:"bytes,1,opt,name=VersionID" json:"VersionID,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeployRequest) GetVersionID() string {
	if m != nil {
		return m.VersionID
	}
	return ""
}

type DeployResponse struct {
}

func (m *DeployResponse) Reset()                    { *m = DeployResponse{} }
func (m *DeployResponse) String() string            { return proto.CompactTextString(m) }
func (*DeployResponse) ProtoMessage()               {}
func (*DeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type GetNameSpaceRequest struct {
}

func (m *GetNameSpaceRequest) Reset()                    { *m = GetNameSpaceRequest{} }
func (m *GetNameSpaceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNameSpaceRequest) ProtoMessage()               {}
func (*GetNameSpaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type GetNameSpaceResponse struct {
	NameSpaces []string `protobuf:"bytes,1,rep,name=NameSpaces" json:"NameSpaces,omitempty"`
}

func (m *GetNameSpaceResponse) Reset()                    { *m = GetNameSpaceResponse{} }
func (m *GetNameSpaceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNameSpaceResponse) ProtoMessage()               {}
func (*GetNameSpaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetNameSpaceResponse) GetNameSpaces() []string {
	if m != nil {
		return m.NameSpaces
	}
	return nil
}

type GetGroupsRequest struct {
	NameSpace string `protobuf:"bytes,1,opt,name=NameSpace" json:"NameSpace,omitempty"`
}

func (m *GetGroupsRequest) Reset()                    { *m = GetGroupsRequest{} }
func (m *GetGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsRequest) ProtoMessage()               {}
func (*GetGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetGroupsRequest) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

type GroupDef struct {
	// actually, this is a groupName
	// groupId and groupname is used inconsistently
	GroupID         string `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	NameSpace       string `protobuf:"bytes,2,opt,name=NameSpace" json:"NameSpace,omitempty"`
	DeployedVersion int64  `protobuf:"varint,3,opt,name=DeployedVersion" json:"DeployedVersion,omitempty"`
	PendingVersion  int64  `protobuf:"varint,4,opt,name=PendingVersion" json:"PendingVersion,omitempty"`
}

func (m *GroupDef) Reset()                    { *m = GroupDef{} }
func (m *GroupDef) String() string            { return proto.CompactTextString(m) }
func (*GroupDef) ProtoMessage()               {}
func (*GroupDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GroupDef) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupDef) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

func (m *GroupDef) GetDeployedVersion() int64 {
	if m != nil {
		return m.DeployedVersion
	}
	return 0
}

func (m *GroupDef) GetPendingVersion() int64 {
	if m != nil {
		return m.PendingVersion
	}
	return 0
}

type GetGroupsResponse struct {
	Groups []*GroupDef `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *GetGroupsResponse) Reset()                    { *m = GetGroupsResponse{} }
func (m *GetGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsResponse) ProtoMessage()               {}
func (*GetGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetGroupsResponse) GetGroups() []*GroupDef {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GetAppsRequest struct {
	NameSpace string `protobuf:"bytes,1,opt,name=NameSpace" json:"NameSpace,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=GroupName" json:"GroupName,omitempty"`
}

func (m *GetAppsRequest) Reset()                    { *m = GetAppsRequest{} }
func (m *GetAppsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAppsRequest) ProtoMessage()               {}
func (*GetAppsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetAppsRequest) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

func (m *GetAppsRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type GetAppResponse struct {
	Application *ApplicationDefinition `protobuf:"bytes,1,opt,name=Application" json:"Application,omitempty"`
	Created     int64                  `protobuf:"varint,2,opt,name=Created" json:"Created,omitempty"`
	VersionID   int64                  `protobuf:"varint,3,opt,name=VersionID" json:"VersionID,omitempty"`
}

func (m *GetAppResponse) Reset()                    { *m = GetAppResponse{} }
func (m *GetAppResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppResponse) ProtoMessage()               {}
func (*GetAppResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetAppResponse) GetApplication() *ApplicationDefinition {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *GetAppResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *GetAppResponse) GetVersionID() int64 {
	if m != nil {
		return m.VersionID
	}
	return 0
}

type GetAppVersionsResponse struct {
	Apps []*GetAppResponse `protobuf:"bytes,1,rep,name=Apps" json:"Apps,omitempty"`
}

func (m *GetAppVersionsResponse) Reset()                    { *m = GetAppVersionsResponse{} }
func (m *GetAppVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppVersionsResponse) ProtoMessage()               {}
func (*GetAppVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetAppVersionsResponse) GetApps() []*GetAppResponse {
	if m != nil {
		return m.Apps
	}
	return nil
}

type GetAppsResponse struct {
	Applications []*ApplicationDefinition `protobuf:"bytes,1,rep,name=Applications" json:"Applications,omitempty"`
}

func (m *GetAppsResponse) Reset()                    { *m = GetAppsResponse{} }
func (m *GetAppsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppsResponse) ProtoMessage()               {}
func (*GetAppsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetAppsResponse) GetApplications() []*ApplicationDefinition {
	if m != nil {
		return m.Applications
	}
	return nil
}

type UpdateRepoRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	GroupID   string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	//  string Repository = 3;
	BuildID      uint64 `protobuf:"varint,4,opt,name=BuildID" json:"BuildID,omitempty"`
	RepositoryID uint64 `protobuf:"varint,5,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *UpdateRepoRequest) Reset()                    { *m = UpdateRepoRequest{} }
func (m *UpdateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRepoRequest) ProtoMessage()               {}
func (*UpdateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UpdateRepoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateRepoRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *UpdateRepoRequest) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *UpdateRepoRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type ParseRequest struct {
	Config       string `protobuf:"bytes,1,opt,name=Config" json:"Config,omitempty"`
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *ParseRequest) Reset()                    { *m = ParseRequest{} }
func (m *ParseRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()               {}
func (*ParseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ParseRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *ParseRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type ParseConfigResponse struct {
	GroupDef []*GroupDefinitionRequest `protobuf:"bytes,1,rep,name=GroupDef" json:"GroupDef,omitempty"`
}

func (m *ParseConfigResponse) Reset()                    { *m = ParseConfigResponse{} }
func (m *ParseConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ParseConfigResponse) ProtoMessage()               {}
func (*ParseConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ParseConfigResponse) GetGroupDef() []*GroupDefinitionRequest {
	if m != nil {
		return m.GroupDef
	}
	return nil
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type ApplyRequest struct {
	All bool `protobuf:"varint,1,opt,name=All" json:"All,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ApplyRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type ListVersionRequest struct {
	// string Repository = 1;
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *ListVersionRequest) Reset()                    { *m = ListVersionRequest{} }
func (m *ListVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionRequest) ProtoMessage()               {}
func (*ListVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ListVersionRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type DeleteApplicationRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *DeleteApplicationRequest) Reset()                    { *m = DeleteApplicationRequest{} }
func (m *DeleteApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationRequest) ProtoMessage()               {}
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DeleteApplicationRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type UndeployApplicationRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *UndeployApplicationRequest) Reset()                    { *m = UndeployApplicationRequest{} }
func (m *UndeployApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*UndeployApplicationRequest) ProtoMessage()               {}
func (*UndeployApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *UndeployApplicationRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type MachineStatus struct {
	BlockForNew  bool `protobuf:"varint,1,opt,name=BlockForNew" json:"BlockForNew,omitempty"`
	MigrateClean bool `protobuf:"varint,2,opt,name=MigrateClean" json:"MigrateClean,omitempty"`
}

func (m *MachineStatus) Reset()                    { *m = MachineStatus{} }
func (m *MachineStatus) String() string            { return proto.CompactTextString(m) }
func (*MachineStatus) ProtoMessage()               {}
func (*MachineStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *MachineStatus) GetBlockForNew() bool {
	if m != nil {
		return m.BlockForNew
	}
	return false
}

func (m *MachineStatus) GetMigrateClean() bool {
	if m != nil {
		return m.MigrateClean
	}
	return false
}

type SetMachineStatusRequest struct {
	Ip     string         `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Status *MachineStatus `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *SetMachineStatusRequest) Reset()                    { *m = SetMachineStatusRequest{} }
func (m *SetMachineStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMachineStatusRequest) ProtoMessage()               {}
func (*SetMachineStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *SetMachineStatusRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SetMachineStatusRequest) GetStatus() *MachineStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UndeployResponse struct {
	App  *ApplicationDefinition `protobuf:"bytes,1,opt,name=app" json:"app,omitempty"`
	Host []string               `protobuf:"bytes,2,rep,name=host" json:"host,omitempty"`
}

func (m *UndeployResponse) Reset()                    { *m = UndeployResponse{} }
func (m *UndeployResponse) String() string            { return proto.CompactTextString(m) }
func (*UndeployResponse) ProtoMessage()               {}
func (*UndeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UndeployResponse) GetApp() *ApplicationDefinition {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *UndeployResponse) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

type Deployment struct {
	Host string                    `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	Apps []*GroupDefinitionRequest `protobuf:"bytes,2,rep,name=Apps" json:"Apps,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Deployment) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Deployment) GetApps() []*GroupDefinitionRequest {
	if m != nil {
		return m.Apps
	}
	return nil
}

type DeploymentList struct {
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=Deployments" json:"Deployments,omitempty"`
}

func (m *DeploymentList) Reset()                    { *m = DeploymentList{} }
func (m *DeploymentList) String() string            { return proto.CompactTextString(m) }
func (*DeploymentList) ProtoMessage()               {}
func (*DeploymentList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DeploymentList) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type Deployer struct {
	Host         string   `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Machinegroup []string `protobuf:"bytes,2,rep,name=machinegroup" json:"machinegroup,omitempty"`
}

func (m *Deployer) Reset()                    { *m = Deployer{} }
func (m *Deployer) String() string            { return proto.CompactTextString(m) }
func (*Deployer) ProtoMessage()               {}
func (*Deployer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Deployer) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Deployer) GetMachinegroup() []string {
	if m != nil {
		return m.Machinegroup
	}
	return nil
}

type DeployersList struct {
	Deployers []*Deployer `protobuf:"bytes,1,rep,name=Deployers" json:"Deployers,omitempty"`
}

func (m *DeployersList) Reset()                    { *m = DeployersList{} }
func (m *DeployersList) String() string            { return proto.CompactTextString(m) }
func (*DeployersList) ProtoMessage()               {}
func (*DeployersList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DeployersList) GetDeployers() []*Deployer {
	if m != nil {
		return m.Deployers
	}
	return nil
}

type Config struct {
	Deployers    *DeployersList `protobuf:"bytes,1,opt,name=Deployers" json:"Deployers,omitempty"`
	GroupConfigs []*GroupConfig `protobuf:"bytes,2,rep,name=GroupConfigs" json:"GroupConfigs,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Config) GetDeployers() *DeployersList {
	if m != nil {
		return m.Deployers
	}
	return nil
}

func (m *Config) GetGroupConfigs() []*GroupConfig {
	if m != nil {
		return m.GroupConfigs
	}
	return nil
}

type DeployAppRequest struct {
	AppID uint64 `protobuf:"varint,1,opt,name=AppID" json:"AppID,omitempty"`
	Host  string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *DeployAppRequest) Reset()                    { *m = DeployAppRequest{} }
func (m *DeployAppRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployAppRequest) ProtoMessage()               {}
func (*DeployAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *DeployAppRequest) GetAppID() uint64 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *DeployAppRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type UndeployAppRequest struct {
	DeploymentID string `protobuf:"bytes,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	Host         string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *UndeployAppRequest) Reset()                    { *m = UndeployAppRequest{} }
func (m *UndeployAppRequest) String() string            { return proto.CompactTextString(m) }
func (*UndeployAppRequest) ProtoMessage()               {}
func (*UndeployAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *UndeployAppRequest) GetDeploymentID() string {
	if m != nil {
		return m.DeploymentID
	}
	return ""
}

func (m *UndeployAppRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type AutoRegistration struct {
	Portdef     string `protobuf:"bytes,1,opt,name=Portdef" json:"Portdef,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	// comma delimited list of apitypes
	ApiTypes string `protobuf:"bytes,3,opt,name=ApiTypes" json:"ApiTypes,omitempty"`
}

func (m *AutoRegistration) Reset()                    { *m = AutoRegistration{} }
func (m *AutoRegistration) String() string            { return proto.CompactTextString(m) }
func (*AutoRegistration) ProtoMessage()               {}
func (*AutoRegistration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *AutoRegistration) GetPortdef() string {
	if m != nil {
		return m.Portdef
	}
	return ""
}

func (m *AutoRegistration) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AutoRegistration) GetApiTypes() string {
	if m != nil {
		return m.ApiTypes
	}
	return ""
}

type ListVersionByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *ListVersionByNameRequest) Reset()                    { *m = ListVersionByNameRequest{} }
func (m *ListVersionByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionByNameRequest) ProtoMessage()               {}
func (*ListVersionByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ListVersionByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AutodeployerInfo struct {
	IP        string   `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port      uint32   `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	Groups    []string `protobuf:"bytes,3,rep,name=Groups" json:"Groups,omitempty"`
	Broken    bool     `protobuf:"varint,4,opt,name=Broken" json:"Broken,omitempty"`
	Available bool     `protobuf:"varint,5,opt,name=Available" json:"Available,omitempty"`
	LastSeen  uint32   `protobuf:"varint,6,opt,name=LastSeen" json:"LastSeen,omitempty"`
}

func (m *AutodeployerInfo) Reset()                    { *m = AutodeployerInfo{} }
func (m *AutodeployerInfo) String() string            { return proto.CompactTextString(m) }
func (*AutodeployerInfo) ProtoMessage()               {}
func (*AutodeployerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *AutodeployerInfo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AutodeployerInfo) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AutodeployerInfo) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *AutodeployerInfo) GetBroken() bool {
	if m != nil {
		return m.Broken
	}
	return false
}

func (m *AutodeployerInfo) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *AutodeployerInfo) GetLastSeen() uint32 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

type AutodeployerList struct {
	Autodeployers []*AutodeployerInfo `protobuf:"bytes,1,rep,name=Autodeployers" json:"Autodeployers,omitempty"`
}

func (m *AutodeployerList) Reset()                    { *m = AutodeployerList{} }
func (m *AutodeployerList) String() string            { return proto.CompactTextString(m) }
func (*AutodeployerList) ProtoMessage()               {}
func (*AutodeployerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *AutodeployerList) GetAutodeployers() []*AutodeployerInfo {
	if m != nil {
		return m.Autodeployers
	}
	return nil
}

type SuggestRequest struct {
	MaxAgeSecs uint32 `protobuf:"varint,1,opt,name=MaxAgeSecs" json:"MaxAgeSecs,omitempty"`
}

func (m *SuggestRequest) Reset()                    { *m = SuggestRequest{} }
func (m *SuggestRequest) String() string            { return proto.CompactTextString(m) }
func (*SuggestRequest) ProtoMessage()               {}
func (*SuggestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *SuggestRequest) GetMaxAgeSecs() uint32 {
	if m != nil {
		return m.MaxAgeSecs
	}
	return 0
}

type Suggestion struct {
	Start           bool                   `protobuf:"varint,1,opt,name=Start" json:"Start,omitempty"`
	Host            string                 `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	App             *ApplicationDefinition `protobuf:"bytes,3,opt,name=App" json:"App,omitempty"`
	DeployRequest   *DeployAppRequest      `protobuf:"bytes,4,opt,name=DeployRequest" json:"DeployRequest,omitempty"`
	UndeployRequest *UndeployAppRequest    `protobuf:"bytes,5,opt,name=UndeployRequest" json:"UndeployRequest,omitempty"`
}

func (m *Suggestion) Reset()                    { *m = Suggestion{} }
func (m *Suggestion) String() string            { return proto.CompactTextString(m) }
func (*Suggestion) ProtoMessage()               {}
func (*Suggestion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *Suggestion) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

func (m *Suggestion) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Suggestion) GetApp() *ApplicationDefinition {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *Suggestion) GetDeployRequest() *DeployAppRequest {
	if m != nil {
		return m.DeployRequest
	}
	return nil
}

func (m *Suggestion) GetUndeployRequest() *UndeployAppRequest {
	if m != nil {
		return m.UndeployRequest
	}
	return nil
}

type SuggestionList struct {
	Suggestions []*Suggestion `protobuf:"bytes,1,rep,name=Suggestions" json:"Suggestions,omitempty"`
}

func (m *SuggestionList) Reset()                    { *m = SuggestionList{} }
func (m *SuggestionList) String() string            { return proto.CompactTextString(m) }
func (*SuggestionList) ProtoMessage()               {}
func (*SuggestionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *SuggestionList) GetSuggestions() []*Suggestion {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

type DelVersionRequest struct {
	Version uint64 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *DelVersionRequest) Reset()                    { *m = DelVersionRequest{} }
func (m *DelVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*DelVersionRequest) ProtoMessage()               {}
func (*DelVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *DelVersionRequest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// used to create new builds
type NewBuildAvailableRequest struct {
	DeployYaml   []byte `protobuf:"bytes,1,opt,name=DeployYaml,proto3" json:"DeployYaml,omitempty"`
	ArtefactID   uint64 `protobuf:"varint,2,opt,name=ArtefactID" json:"ArtefactID,omitempty"`
	BuildRepoID  string `protobuf:"bytes,3,opt,name=BuildRepoID" json:"BuildRepoID,omitempty"`
	BuildID      uint64 `protobuf:"varint,4,opt,name=BuildID" json:"BuildID,omitempty"`
	CommitID     string `protobuf:"bytes,5,opt,name=CommitID" json:"CommitID,omitempty"`
	Branch       string `protobuf:"bytes,6,opt,name=Branch" json:"Branch,omitempty"`
	RepositoryID uint64 `protobuf:"varint,7,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *NewBuildAvailableRequest) Reset()                    { *m = NewBuildAvailableRequest{} }
func (m *NewBuildAvailableRequest) String() string            { return proto.CompactTextString(m) }
func (*NewBuildAvailableRequest) ProtoMessage()               {}
func (*NewBuildAvailableRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *NewBuildAvailableRequest) GetDeployYaml() []byte {
	if m != nil {
		return m.DeployYaml
	}
	return nil
}

func (m *NewBuildAvailableRequest) GetArtefactID() uint64 {
	if m != nil {
		return m.ArtefactID
	}
	return 0
}

func (m *NewBuildAvailableRequest) GetBuildRepoID() string {
	if m != nil {
		return m.BuildRepoID
	}
	return ""
}

func (m *NewBuildAvailableRequest) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *NewBuildAvailableRequest) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *NewBuildAvailableRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *NewBuildAvailableRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type AppMeta struct {
	ID                uint64                 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserRequestedStop bool                   `protobuf:"varint,2,opt,name=UserRequestedStop" json:"UserRequestedStop,omitempty"`
	Created           uint32                 `protobuf:"varint,3,opt,name=Created" json:"Created,omitempty"`
	AppDef            *ApplicationDefinition `protobuf:"bytes,4,opt,name=AppDef" json:"AppDef,omitempty"`
}

func (m *AppMeta) Reset()                    { *m = AppMeta{} }
func (m *AppMeta) String() string            { return proto.CompactTextString(m) }
func (*AppMeta) ProtoMessage()               {}
func (*AppMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *AppMeta) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AppMeta) GetUserRequestedStop() bool {
	if m != nil {
		return m.UserRequestedStop
	}
	return false
}

func (m *AppMeta) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *AppMeta) GetAppDef() *ApplicationDefinition {
	if m != nil {
		return m.AppDef
	}
	return nil
}

type ApplyStream struct {
	StdOutLine string `protobuf:"bytes,1,opt,name=StdOutLine" json:"StdOutLine,omitempty"`
}

func (m *ApplyStream) Reset()                    { *m = ApplyStream{} }
func (m *ApplyStream) String() string            { return proto.CompactTextString(m) }
func (*ApplyStream) ProtoMessage()               {}
func (*ApplyStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ApplyStream) GetStdOutLine() string {
	if m != nil {
		return m.StdOutLine
	}
	return ""
}

func init() {
	proto.RegisterType((*DeploymentLog)(nil), "deploymonkey.DeploymentLog")
	proto.RegisterType((*AppReference)(nil), "deploymonkey.AppReference")
	proto.RegisterType((*AppGroup)(nil), "deploymonkey.AppGroup")
	proto.RegisterType((*GroupVersion)(nil), "deploymonkey.GroupVersion")
	proto.RegisterType((*LinkAppGroup)(nil), "deploymonkey.LinkAppGroup")
	proto.RegisterType((*ApplicationDefinition)(nil), "deploymonkey.ApplicationDefinition")
	proto.RegisterType((*ContainerDef)(nil), "deploymonkey.ContainerDef")
	proto.RegisterType((*Limits)(nil), "deploymonkey.Limits")
	proto.RegisterType((*SQLLimits)(nil), "deploymonkey.SQLLimits")
	proto.RegisterType((*GroupDefinitionRequest)(nil), "deploymonkey.GroupDefinitionRequest")
	proto.RegisterType((*GroupConfig)(nil), "deploymonkey.GroupConfig")
	proto.RegisterType((*UpdateAppRequest)(nil), "deploymonkey.UpdateAppRequest")
	proto.RegisterType((*EmptyResponse)(nil), "deploymonkey.EmptyResponse")
	proto.RegisterType((*GroupDefResponse)(nil), "deploymonkey.GroupDefResponse")
	proto.RegisterType((*DeployRequest)(nil), "deploymonkey.DeployRequest")
	proto.RegisterType((*DeployResponse)(nil), "deploymonkey.DeployResponse")
	proto.RegisterType((*GetNameSpaceRequest)(nil), "deploymonkey.GetNameSpaceRequest")
	proto.RegisterType((*GetNameSpaceResponse)(nil), "deploymonkey.GetNameSpaceResponse")
	proto.RegisterType((*GetGroupsRequest)(nil), "deploymonkey.GetGroupsRequest")
	proto.RegisterType((*GroupDef)(nil), "deploymonkey.GroupDef")
	proto.RegisterType((*GetGroupsResponse)(nil), "deploymonkey.GetGroupsResponse")
	proto.RegisterType((*GetAppsRequest)(nil), "deploymonkey.GetAppsRequest")
	proto.RegisterType((*GetAppResponse)(nil), "deploymonkey.GetAppResponse")
	proto.RegisterType((*GetAppVersionsResponse)(nil), "deploymonkey.GetAppVersionsResponse")
	proto.RegisterType((*GetAppsResponse)(nil), "deploymonkey.GetAppsResponse")
	proto.RegisterType((*UpdateRepoRequest)(nil), "deploymonkey.UpdateRepoRequest")
	proto.RegisterType((*ParseRequest)(nil), "deploymonkey.ParseRequest")
	proto.RegisterType((*ParseConfigResponse)(nil), "deploymonkey.ParseConfigResponse")
	proto.RegisterType((*EmptyMessage)(nil), "deploymonkey.EmptyMessage")
	proto.RegisterType((*ApplyRequest)(nil), "deploymonkey.ApplyRequest")
	proto.RegisterType((*ListVersionRequest)(nil), "deploymonkey.ListVersionRequest")
	proto.RegisterType((*DeleteApplicationRequest)(nil), "deploymonkey.DeleteApplicationRequest")
	proto.RegisterType((*UndeployApplicationRequest)(nil), "deploymonkey.UndeployApplicationRequest")
	proto.RegisterType((*MachineStatus)(nil), "deploymonkey.MachineStatus")
	proto.RegisterType((*SetMachineStatusRequest)(nil), "deploymonkey.SetMachineStatusRequest")
	proto.RegisterType((*UndeployResponse)(nil), "deploymonkey.UndeployResponse")
	proto.RegisterType((*Deployment)(nil), "deploymonkey.Deployment")
	proto.RegisterType((*DeploymentList)(nil), "deploymonkey.DeploymentList")
	proto.RegisterType((*Deployer)(nil), "deploymonkey.Deployer")
	proto.RegisterType((*DeployersList)(nil), "deploymonkey.DeployersList")
	proto.RegisterType((*Config)(nil), "deploymonkey.Config")
	proto.RegisterType((*DeployAppRequest)(nil), "deploymonkey.DeployAppRequest")
	proto.RegisterType((*UndeployAppRequest)(nil), "deploymonkey.UndeployAppRequest")
	proto.RegisterType((*AutoRegistration)(nil), "deploymonkey.AutoRegistration")
	proto.RegisterType((*ListVersionByNameRequest)(nil), "deploymonkey.ListVersionByNameRequest")
	proto.RegisterType((*AutodeployerInfo)(nil), "deploymonkey.AutodeployerInfo")
	proto.RegisterType((*AutodeployerList)(nil), "deploymonkey.AutodeployerList")
	proto.RegisterType((*SuggestRequest)(nil), "deploymonkey.SuggestRequest")
	proto.RegisterType((*Suggestion)(nil), "deploymonkey.Suggestion")
	proto.RegisterType((*SuggestionList)(nil), "deploymonkey.SuggestionList")
	proto.RegisterType((*DelVersionRequest)(nil), "deploymonkey.DelVersionRequest")
	proto.RegisterType((*NewBuildAvailableRequest)(nil), "deploymonkey.NewBuildAvailableRequest")
	proto.RegisterType((*AppMeta)(nil), "deploymonkey.AppMeta")
	proto.RegisterType((*ApplyStream)(nil), "deploymonkey.ApplyStream")
	proto.RegisterEnum("deploymonkey.GroupResponseStatus", GroupResponseStatus_name, GroupResponseStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeployMonkey service

type DeployMonkeyClient interface {
	// called by build repository
	NewBuildAvailable(ctx context.Context, in *NewBuildAvailableRequest, opts ...grpc.CallOption) (*common.Void, error)
	// obsolete called by build repository if new deploy.yamls are submitted
	//  rpc DefineGroup(GroupDefinitionRequest) returns (GroupDefResponse);
	// called by build repository after new deploy.yamls was submitted in DefineGroup() and accepted
	DeployVersion(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	//  obsolete deploymonkey-client: update all apps in a repo in a group to a new buildid
	UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*GroupDefResponse, error)
	//  obsolete deploymonkey-client: update a single app to a new buildid
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*GroupDefResponse, error)
	// rpc GetNameSpaces(GetNameSpaceRequest) returns (GetNameSpaceResponse);
	// rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse);
	// rpc GetApplications(GetAppsRequest) returns (GetAppsResponse);
	ParseConfigFile(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseConfigResponse, error)
	// deploymonkey-client: list previous versions for a given group
	ListVersionsForGroup(ctx context.Context, in *ListVersionRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error)
	ListVersionsByName(ctx context.Context, in *ListVersionByNameRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error)
	// rpc DeleteApplication(DeleteApplicationRequest) returns (EmptyMessage);
	UndeployApplication(ctx context.Context, in *UndeployApplicationRequest, opts ...grpc.CallOption) (*UndeployResponse, error)
	// rpc SetMachineStatus(SetMachineStatusRequest) returns (EmptyMessage);
	// get entire config
	GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Config, error)
	// this reads from cache:
	GetDeploymentsFromCache(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DeploymentList, error)
	// rpc GetDeployers(common.Void) returns (DeployersList);
	// low-level primitives to check the suggestion mode
	DeployAppOnTarget(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*common.Void, error)
	UndeployAppOnTarget(ctx context.Context, in *UndeployAppRequest, opts ...grpc.CallOption) (*common.Void, error)
	// autodeployer is shutting down (using IP as key)
	AutodeployerShutdown(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// autodeployer (on that IP) has just started
	AutodeployerStartup(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// get all autodeployers that we currently know of
	GetKnownAutodeployers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AutodeployerList, error)
	// get suggestions
	GetSuggestions(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestionList, error)
	// apply suggestions
	ApplySuggestions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (DeployMonkey_ApplySuggestionsClient, error)
	// delete an application definition
	DeleteVersion(ctx context.Context, in *DelVersionRequest, opts ...grpc.CallOption) (*common.Void, error)
	// make it queryable
	QueryTimeseries(ctx context.Context, in *grafanadata.QueryRequest, opts ...grpc.CallOption) (DeployMonkey_QueryTimeseriesClient, error)
}

type deployMonkeyClient struct {
	cc *grpc.ClientConn
}

func NewDeployMonkeyClient(cc *grpc.ClientConn) DeployMonkeyClient {
	return &deployMonkeyClient{cc}
}

func (c *deployMonkeyClient) NewBuildAvailable(ctx context.Context, in *NewBuildAvailableRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/NewBuildAvailable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) DeployVersion(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/DeployVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*GroupDefResponse, error) {
	out := new(GroupDefResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UpdateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*GroupDefResponse, error) {
	out := new(GroupDefResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) ParseConfigFile(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseConfigResponse, error) {
	out := new(ParseConfigResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/ParseConfigFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) ListVersionsForGroup(ctx context.Context, in *ListVersionRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error) {
	out := new(GetAppVersionsResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/ListVersionsForGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) ListVersionsByName(ctx context.Context, in *ListVersionByNameRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error) {
	out := new(GetAppVersionsResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/ListVersionsByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UndeployApplication(ctx context.Context, in *UndeployApplicationRequest, opts ...grpc.CallOption) (*UndeployResponse, error) {
	out := new(UndeployResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UndeployApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetDeploymentsFromCache(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DeploymentList, error) {
	out := new(DeploymentList)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetDeploymentsFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) DeployAppOnTarget(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/DeployAppOnTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UndeployAppOnTarget(ctx context.Context, in *UndeployAppRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UndeployAppOnTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) AutodeployerShutdown(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/AutodeployerShutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) AutodeployerStartup(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/AutodeployerStartup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetKnownAutodeployers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AutodeployerList, error) {
	out := new(AutodeployerList)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetKnownAutodeployers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetSuggestions(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestionList, error) {
	out := new(SuggestionList)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) ApplySuggestions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (DeployMonkey_ApplySuggestionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DeployMonkey_serviceDesc.Streams[0], c.cc, "/deploymonkey.DeployMonkey/ApplySuggestions", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployMonkeyApplySuggestionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployMonkey_ApplySuggestionsClient interface {
	Recv() (*ApplyStream, error)
	grpc.ClientStream
}

type deployMonkeyApplySuggestionsClient struct {
	grpc.ClientStream
}

func (x *deployMonkeyApplySuggestionsClient) Recv() (*ApplyStream, error) {
	m := new(ApplyStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployMonkeyClient) DeleteVersion(ctx context.Context, in *DelVersionRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/DeleteVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) QueryTimeseries(ctx context.Context, in *grafanadata.QueryRequest, opts ...grpc.CallOption) (DeployMonkey_QueryTimeseriesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DeployMonkey_serviceDesc.Streams[1], c.cc, "/deploymonkey.DeployMonkey/QueryTimeseries", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployMonkeyQueryTimeseriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployMonkey_QueryTimeseriesClient interface {
	Recv() (*grafanadata.QueryResponse, error)
	grpc.ClientStream
}

type deployMonkeyQueryTimeseriesClient struct {
	grpc.ClientStream
}

func (x *deployMonkeyQueryTimeseriesClient) Recv() (*grafanadata.QueryResponse, error) {
	m := new(grafanadata.QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DeployMonkey service

type DeployMonkeyServer interface {
	// called by build repository
	NewBuildAvailable(context.Context, *NewBuildAvailableRequest) (*common.Void, error)
	// obsolete called by build repository if new deploy.yamls are submitted
	//  rpc DefineGroup(GroupDefinitionRequest) returns (GroupDefResponse);
	// called by build repository after new deploy.yamls was submitted in DefineGroup() and accepted
	DeployVersion(context.Context, *DeployRequest) (*DeployResponse, error)
	//  obsolete deploymonkey-client: update all apps in a repo in a group to a new buildid
	UpdateRepo(context.Context, *UpdateRepoRequest) (*GroupDefResponse, error)
	//  obsolete deploymonkey-client: update a single app to a new buildid
	UpdateApp(context.Context, *UpdateAppRequest) (*GroupDefResponse, error)
	// rpc GetNameSpaces(GetNameSpaceRequest) returns (GetNameSpaceResponse);
	// rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse);
	// rpc GetApplications(GetAppsRequest) returns (GetAppsResponse);
	ParseConfigFile(context.Context, *ParseRequest) (*ParseConfigResponse, error)
	// deploymonkey-client: list previous versions for a given group
	ListVersionsForGroup(context.Context, *ListVersionRequest) (*GetAppVersionsResponse, error)
	ListVersionsByName(context.Context, *ListVersionByNameRequest) (*GetAppVersionsResponse, error)
	// rpc DeleteApplication(DeleteApplicationRequest) returns (EmptyMessage);
	UndeployApplication(context.Context, *UndeployApplicationRequest) (*UndeployResponse, error)
	// rpc SetMachineStatus(SetMachineStatusRequest) returns (EmptyMessage);
	// get entire config
	GetConfig(context.Context, *common.Void) (*Config, error)
	// this reads from cache:
	GetDeploymentsFromCache(context.Context, *common.Void) (*DeploymentList, error)
	// rpc GetDeployers(common.Void) returns (DeployersList);
	// low-level primitives to check the suggestion mode
	DeployAppOnTarget(context.Context, *DeployAppRequest) (*common.Void, error)
	UndeployAppOnTarget(context.Context, *UndeployAppRequest) (*common.Void, error)
	// autodeployer is shutting down (using IP as key)
	AutodeployerShutdown(context.Context, *common.Void) (*common.Void, error)
	// autodeployer (on that IP) has just started
	AutodeployerStartup(context.Context, *common.Void) (*common.Void, error)
	// get all autodeployers that we currently know of
	GetKnownAutodeployers(context.Context, *common.Void) (*AutodeployerList, error)
	// get suggestions
	GetSuggestions(context.Context, *SuggestRequest) (*SuggestionList, error)
	// apply suggestions
	ApplySuggestions(*common.Void, DeployMonkey_ApplySuggestionsServer) error
	// delete an application definition
	DeleteVersion(context.Context, *DelVersionRequest) (*common.Void, error)
	// make it queryable
	QueryTimeseries(*grafanadata.QueryRequest, DeployMonkey_QueryTimeseriesServer) error
}

func RegisterDeployMonkeyServer(s *grpc.Server, srv DeployMonkeyServer) {
	s.RegisterService(&_DeployMonkey_serviceDesc, srv)
}

func _DeployMonkey_NewBuildAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBuildAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).NewBuildAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/NewBuildAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).NewBuildAvailable(ctx, req.(*NewBuildAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_DeployVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).DeployVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/DeployVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).DeployVersion(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UpdateRepo(ctx, req.(*UpdateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_ParseConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).ParseConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/ParseConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).ParseConfigFile(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_ListVersionsForGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).ListVersionsForGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/ListVersionsForGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).ListVersionsForGroup(ctx, req.(*ListVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_ListVersionsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).ListVersionsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/ListVersionsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).ListVersionsByName(ctx, req.(*ListVersionByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UndeployApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UndeployApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UndeployApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UndeployApplication(ctx, req.(*UndeployApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetConfig(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetDeploymentsFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetDeploymentsFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetDeploymentsFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetDeploymentsFromCache(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_DeployAppOnTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).DeployAppOnTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/DeployAppOnTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).DeployAppOnTarget(ctx, req.(*DeployAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UndeployAppOnTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UndeployAppOnTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UndeployAppOnTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UndeployAppOnTarget(ctx, req.(*UndeployAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_AutodeployerShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).AutodeployerShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/AutodeployerShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).AutodeployerShutdown(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_AutodeployerStartup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).AutodeployerStartup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/AutodeployerStartup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).AutodeployerStartup(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetKnownAutodeployers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetKnownAutodeployers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetKnownAutodeployers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetKnownAutodeployers(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetSuggestions(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_ApplySuggestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployMonkeyServer).ApplySuggestions(m, &deployMonkeyApplySuggestionsServer{stream})
}

type DeployMonkey_ApplySuggestionsServer interface {
	Send(*ApplyStream) error
	grpc.ServerStream
}

type deployMonkeyApplySuggestionsServer struct {
	grpc.ServerStream
}

func (x *deployMonkeyApplySuggestionsServer) Send(m *ApplyStream) error {
	return x.ServerStream.SendMsg(m)
}

func _DeployMonkey_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/DeleteVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).DeleteVersion(ctx, req.(*DelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_QueryTimeseries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(grafanadata.QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployMonkeyServer).QueryTimeseries(m, &deployMonkeyQueryTimeseriesServer{stream})
}

type DeployMonkey_QueryTimeseriesServer interface {
	Send(*grafanadata.QueryResponse) error
	grpc.ServerStream
}

type deployMonkeyQueryTimeseriesServer struct {
	grpc.ServerStream
}

func (x *deployMonkeyQueryTimeseriesServer) Send(m *grafanadata.QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DeployMonkey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deploymonkey.DeployMonkey",
	HandlerType: (*DeployMonkeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBuildAvailable",
			Handler:    _DeployMonkey_NewBuildAvailable_Handler,
		},
		{
			MethodName: "DeployVersion",
			Handler:    _DeployMonkey_DeployVersion_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _DeployMonkey_UpdateRepo_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _DeployMonkey_UpdateApp_Handler,
		},
		{
			MethodName: "ParseConfigFile",
			Handler:    _DeployMonkey_ParseConfigFile_Handler,
		},
		{
			MethodName: "ListVersionsForGroup",
			Handler:    _DeployMonkey_ListVersionsForGroup_Handler,
		},
		{
			MethodName: "ListVersionsByName",
			Handler:    _DeployMonkey_ListVersionsByName_Handler,
		},
		{
			MethodName: "UndeployApplication",
			Handler:    _DeployMonkey_UndeployApplication_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _DeployMonkey_GetConfig_Handler,
		},
		{
			MethodName: "GetDeploymentsFromCache",
			Handler:    _DeployMonkey_GetDeploymentsFromCache_Handler,
		},
		{
			MethodName: "DeployAppOnTarget",
			Handler:    _DeployMonkey_DeployAppOnTarget_Handler,
		},
		{
			MethodName: "UndeployAppOnTarget",
			Handler:    _DeployMonkey_UndeployAppOnTarget_Handler,
		},
		{
			MethodName: "AutodeployerShutdown",
			Handler:    _DeployMonkey_AutodeployerShutdown_Handler,
		},
		{
			MethodName: "AutodeployerStartup",
			Handler:    _DeployMonkey_AutodeployerStartup_Handler,
		},
		{
			MethodName: "GetKnownAutodeployers",
			Handler:    _DeployMonkey_GetKnownAutodeployers_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _DeployMonkey_GetSuggestions_Handler,
		},
		{
			MethodName: "DeleteVersion",
			Handler:    _DeployMonkey_DeleteVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ApplySuggestions",
			Handler:       _DeployMonkey_ApplySuggestions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryTimeseries",
			Handler:       _DeployMonkey_QueryTimeseries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/deploymonkey/deploymonkey.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/deploymonkey/deploymonkey.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 2639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x1a, 0x4d, 0x73, 0x23, 0x47,
	0x95, 0x91, 0xfc, 0x21, 0x3d, 0xcb, 0xb6, 0x3c, 0xf6, 0x6e, 0xc6, 0xc2, 0x38, 0xce, 0x10, 0x12,
	0x57, 0x6a, 0xe3, 0x18, 0x27, 0xa4, 0x92, 0x40, 0x28, 0x64, 0xc9, 0x76, 0xec, 0x95, 0x77, 0x95,
	0xd1, 0x3a, 0x81, 0x50, 0x64, 0xab, 0x57, 0xd3, 0x96, 0x9b, 0x95, 0x66, 0x86, 0x99, 0xd6, 0x7a,
	0x75, 0xcc, 0xc2, 0x85, 0x13, 0x55, 0x14, 0x27, 0x4e, 0x14, 0x5c, 0xf8, 0x07, 0x54, 0x71, 0xe4,
	0x17, 0xf0, 0x2b, 0x38, 0x70, 0xe0, 0x0f, 0x70, 0x80, 0xea, 0xaf, 0x99, 0xee, 0xd1, 0xd8, 0xeb,
	0xdd, 0x14, 0x9c, 0x3c, 0xef, 0xf5, 0x7b, 0xaf, 0xdf, 0x7b, 0xfd, 0xbe, 0xba, 0x65, 0xf8, 0x68,
	0x10, 0x0e, 0x51, 0x30, 0xd8, 0xe9, 0x87, 0x41, 0x8c, 0xfc, 0xcb, 0x30, 0xf4, 0x77, 0x02, 0x4c,
	0xdf, 0x41, 0x11, 0x49, 0xde, 0xf1, 0x71, 0x34, 0x0c, 0x27, 0xa3, 0x30, 0x78, 0x8c, 0x27, 0x06,
	0xb0, 0x13, 0xc5, 0x21, 0x0d, 0xed, 0x9a, 0x8e, 0x6b, 0xec, 0x5c, 0x23, 0xa9, 0x1f, 0x8e, 0x46,
	0x61, 0x20, 0xff, 0x08, 0xee, 0xc6, 0x07, 0xd7, 0xd0, 0x0f, 0x62, 0x74, 0x8e, 0x02, 0xe4, 0x23,
	0x8a, 0xf4, 0x6f, 0xc1, 0xe9, 0xfe, 0xa3, 0x04, 0x8b, 0x6d, 0xb1, 0x35, 0x0e, 0x68, 0x27, 0x1c,
	0xd8, 0x4b, 0x50, 0x3a, 0x6e, 0x3b, 0xd6, 0x96, 0xb5, 0x3d, 0xe3, 0x95, 0x8e, 0xdb, 0xf6, 0x6d,
	0x98, 0xdb, 0x27, 0x01, 0x8a, 0x27, 0x4e, 0x79, 0xcb, 0xda, 0xae, 0x7a, 0x12, 0xb2, 0x47, 0x30,
	0xd7, 0x8c, 0xa2, 0x36, 0x3e, 0x77, 0x66, 0xb6, 0xac, 0xed, 0x85, 0xbd, 0x6f, 0xef, 0x18, 0x66,
	0x35, 0xa3, 0x68, 0x48, 0xfa, 0x88, 0x92, 0x30, 0x68, 0xe3, 0x73, 0x12, 0x10, 0xf6, 0xb5, 0xbf,
	0xfb, 0xfb, 0x67, 0xeb, 0x73, 0x63, 0x12, 0xd0, 0xf7, 0xdf, 0xfb, 0xe3, 0xb3, 0x75, 0x07, 0x65,
	0x44, 0x7e, 0x4a, 0xb4, 0x43, 0xfc, 0xbf, 0x3e, 0x5b, 0x9f, 0x43, 0x51, 0xf4, 0x90, 0xf8, 0x9e,
	0xdc, 0xc4, 0x76, 0x60, 0x7e, 0x7f, 0x4c, 0x86, 0xfe, 0x71, 0xdb, 0x99, 0xe5, 0xba, 0x29, 0xd0,
	0x7e, 0x0b, 0xea, 0xcd, 0x31, 0x0d, 0x85, 0x15, 0x38, 0xfe, 0x24, 0x4c, 0xa8, 0x33, 0xc7, 0x55,
	0x9d, 0xc2, 0x33, 0x29, 0x3d, 0x8a, 0x62, 0x8a, 0x7d, 0x67, 0x7e, 0xcb, 0xda, 0x5e, 0xf4, 0x14,
	0x68, 0x37, 0xa0, 0x72, 0x48, 0x02, 0x92, 0x5c, 0x60, 0xdf, 0xa9, 0xf0, 0xa5, 0x14, 0x66, 0x5c,
	0xa7, 0x38, 0x49, 0xd0, 0x00, 0x3b, 0x55, 0x2e, 0x58, 0x81, 0xf6, 0x36, 0x2c, 0x0b, 0xf9, 0xcd,
	0xe1, 0x20, 0x8c, 0x09, 0xbd, 0x18, 0x39, 0xc0, 0x99, 0xf3, 0x68, 0xf7, 0xa7, 0x50, 0x6b, 0x46,
	0x91, 0x87, 0xcf, 0x71, 0x8c, 0x83, 0x3e, 0x9e, 0x72, 0xf3, 0xf7, 0x53, 0x77, 0x96, 0x6e, 0xec,
	0x4e, 0xe5, 0x1c, 0xf7, 0xcf, 0x16, 0x54, 0x9a, 0x51, 0x74, 0x14, 0x87, 0xe3, 0x68, 0x4a, 0xf2,
	0x06, 0x54, 0xef, 0xa1, 0x11, 0x4e, 0x22, 0xd4, 0xc7, 0x5c, 0x78, 0xd5, 0xcb, 0x10, 0x6c, 0x95,
	0xb3, 0x05, 0x68, 0x84, 0xe5, 0x09, 0x67, 0x88, 0xcc, 0x3e, 0xec, 0x7f, 0x86, 0xe3, 0x84, 0x84,
	0x01, 0x3f, 0xed, 0xd4, 0xbe, 0x14, 0x6d, 0xbf, 0x01, 0x4b, 0x5d, 0x1c, 0xf8, 0x24, 0x18, 0x28,
	0xc2, 0x59, 0x4e, 0x98, 0xc3, 0xba, 0x7f, 0xb2, 0xa0, 0xc6, 0xe5, 0x2b, 0xc6, 0xbc, 0xba, 0x9f,
	0xc3, 0x3c, 0x5f, 0x3f, 0x6e, 0x4b, 0x4f, 0xdc, 0x9e, 0xf2, 0x04, 0x5f, 0xdf, 0xff, 0x8e, 0x11,
	0x4b, 0x0b, 0x28, 0x8a, 0x06, 0x0c, 0x2f, 0xc2, 0xa7, 0xc2, 0xbf, 0x59, 0x00, 0x29, 0x69, 0x2c,
	0x4e, 0x5a, 0x31, 0x46, 0x14, 0xfb, 0x0f, 0xc8, 0x08, 0x27, 0x14, 0x8d, 0x22, 0x6e, 0xf0, 0xa2,
	0x37, 0x85, 0x77, 0xff, 0x6d, 0x41, 0xad, 0x43, 0x82, 0xc7, 0x57, 0x3a, 0x35, 0x36, 0xad, 0x90,
	0xaa, 0x36, 0x4c, 0x55, 0x75, 0x8a, 0xfd, 0x3d, 0x43, 0xdd, 0xba, 0xd0, 0xef, 0x89, 0x58, 0x14,
	0x3a, 0x9b, 0x38, 0xa6, 0xbb, 0xe9, 0xa9, 0x01, 0x94, 0x9b, 0x91, 0xd0, 0xf9, 0x7f, 0x96, 0x6e,
	0x6c, 0x07, 0xf7, 0xb7, 0xf3, 0x70, 0xab, 0x50, 0xa0, 0x74, 0xc3, 0x62, 0xea, 0x86, 0x2d, 0x58,
	0x68, 0x87, 0x97, 0xc1, 0x30, 0x44, 0xfe, 0x99, 0xd7, 0xe1, 0xfe, 0xa9, 0x7a, 0x3a, 0xca, 0x76,
	0xa1, 0x96, 0x82, 0x09, 0x8e, 0x65, 0x00, 0x1a, 0x38, 0x76, 0x32, 0x0a, 0xee, 0xa2, 0x24, 0xb9,
	0x0c, 0x63, 0x5f, 0x86, 0xe2, 0x14, 0x5e, 0x2b, 0x47, 0x33, 0x46, 0x39, 0xb2, 0x61, 0xa6, 0x19,
	0x0f, 0x12, 0x67, 0x76, 0xab, 0xbc, 0x5d, 0xf5, 0xf8, 0xb7, 0x5e, 0x33, 0xe6, 0xcd, 0x9a, 0xb1,
	0x01, 0xd5, 0xe3, 0x20, 0xa1, 0x28, 0xe8, 0xe3, 0x44, 0xa6, 0x7b, 0x86, 0xe0, 0x3a, 0xa7, 0x35,
	0xf1, 0xb8, 0x2d, 0x93, 0xde, 0xc0, 0xd9, 0x1f, 0x41, 0x85, 0x55, 0x17, 0x0f, 0x0f, 0x12, 0x07,
	0xb6, 0xca, 0xdb, 0x0b, 0x7b, 0x9b, 0xb9, 0x13, 0x11, 0xab, 0x24, 0xa1, 0x31, 0xf7, 0xa2, 0x97,
	0xd2, 0xb3, 0x5a, 0x73, 0x8a, 0xfa, 0x17, 0x24, 0xc0, 0x89, 0xb3, 0xc0, 0x65, 0xa7, 0xb0, 0xbd,
	0x09, 0x20, 0xf6, 0x79, 0x30, 0x89, 0xb0, 0x53, 0xe3, 0xab, 0x1a, 0x86, 0xf1, 0xb6, 0x62, 0x42,
	0x49, 0x1f, 0x0d, 0x9d, 0xa5, 0x2d, 0x6b, 0xbb, 0xe2, 0xa5, 0x30, 0x5b, 0x6b, 0x0e, 0x2f, 0xd1,
	0x24, 0xb9, 0x1f, 0x38, 0xcb, 0x62, 0x4d, 0xc1, 0x2c, 0x93, 0x7b, 0x14, 0x51, 0xd2, 0x7f, 0x80,
	0xe2, 0x01, 0xa6, 0x6d, 0x12, 0x3b, 0x75, 0x2e, 0x3c, 0x8f, 0x66, 0x1e, 0xee, 0x8e, 0x1f, 0x0d,
	0x49, 0xdf, 0x59, 0xe1, 0x32, 0x24, 0x64, 0xdf, 0x81, 0xb9, 0x0e, 0x19, 0x11, 0x9a, 0x38, 0x36,
	0x8f, 0xc0, 0x35, 0xd3, 0x5e, 0xb1, 0xe6, 0x49, 0x1a, 0x76, 0x1e, 0x27, 0xe8, 0x09, 0x72, 0x56,
	0xb9, 0x0c, 0xfe, 0xcd, 0xfc, 0xea, 0xe1, 0x28, 0x4c, 0x08, 0x0d, 0xe3, 0xc9, 0x71, 0xdb, 0x59,
	0xe3, 0x87, 0x62, 0xe0, 0xd8, 0xee, 0xcd, 0xc4, 0x0b, 0x43, 0xea, 0xdc, 0x12, 0xbb, 0x0b, 0xc8,
	0x7e, 0x08, 0xd5, 0x56, 0x18, 0x50, 0x44, 0x02, 0x1c, 0x3b, 0xb7, 0x8b, 0xb2, 0x2d, 0x5d, 0x6e,
	0xe3, 0xf3, 0x5c, 0x71, 0x58, 0xee, 0xab, 0x35, 0x1f, 0x9f, 0xef, 0x10, 0xff, 0x6f, 0xcf, 0xd6,
	0x67, 0x68, 0x3c, 0xc6, 0x5e, 0x26, 0x93, 0x3b, 0x9e, 0x24, 0x7d, 0x14, 0xfb, 0x9d, 0x70, 0xe0,
	0xbc, 0xc2, 0x37, 0xd7, 0x30, 0x6c, 0xbd, 0x19, 0x53, 0x7c, 0x8e, 0xfa, 0x2c, 0x24, 0x1c, 0xae,
	0xba, 0x86, 0x61, 0xc1, 0x26, 0xcb, 0x88, 0xb3, 0x2e, 0x5a, 0x8b, 0x04, 0xed, 0x36, 0x7c, 0x2b,
	0x8d, 0xad, 0x53, 0x8c, 0x82, 0xa4, 0x8b, 0x63, 0x16, 0x0b, 0xbe, 0xec, 0x4c, 0x4e, 0x83, 0x6f,
	0x76, 0x3d, 0x91, 0xfb, 0x00, 0x6a, 0xba, 0x85, 0x53, 0x15, 0xa9, 0x0e, 0x65, 0x96, 0x82, 0x22,
	0xbf, 0xca, 0x32, 0xf5, 0xce, 0x12, 0x7c, 0xff, 0x09, 0x8e, 0x87, 0x68, 0x72, 0xd8, 0xe3, 0x29,
	0x55, 0xf1, 0x0c, 0x9c, 0x7b, 0xa1, 0x0e, 0x95, 0xa5, 0xc4, 0x29, 0x7a, 0x7a, 0x8a, 0x47, 0x61,
	0x3c, 0xe1, 0x62, 0x17, 0xbd, 0x0c, 0xc1, 0x42, 0xab, 0x1b, 0x13, 0xd6, 0xcb, 0x26, 0x7c, 0x8b,
	0x59, 0x2f, 0x85, 0xed, 0xd7, 0x61, 0xf1, 0x14, 0x3d, 0xbd, 0x4b, 0x86, 0x43, 0xc9, 0x2d, 0xaa,
	0xaa, 0x89, 0x74, 0xff, 0x69, 0x41, 0xb5, 0xf7, 0x69, 0x47, 0xee, 0x96, 0xd7, 0x7e, 0xf4, 0x12,
	0xed, 0xef, 0x6b, 0x4c, 0x13, 0x86, 0xb1, 0xe5, 0xeb, 0x8c, 0x9d, 0x79, 0x9e, 0xb1, 0xb3, 0x45,
	0xc6, 0xfe, 0xc5, 0x82, 0xdb, 0xbc, 0x76, 0x6b, 0xcd, 0x1a, 0xff, 0x62, 0x8c, 0x13, 0x6a, 0xb6,
	0x63, 0x2b, 0xdf, 0x8e, 0x1d, 0xb3, 0xfb, 0x55, 0xb3, 0xf6, 0xb5, 0x01, 0xd5, 0x6e, 0x1c, 0x52,
	0xdc, 0x67, 0x11, 0x26, 0x8e, 0x32, 0x43, 0xd8, 0x47, 0x7c, 0xbc, 0x50, 0xe6, 0x27, 0xce, 0x0c,
	0x2f, 0x49, 0x37, 0x1a, 0x22, 0x0c, 0x46, 0xf7, 0x57, 0x16, 0x2c, 0xf0, 0x2d, 0x5b, 0x61, 0x70,
	0x4e, 0x06, 0xf6, 0x1d, 0x98, 0xe5, 0x20, 0x57, 0x75, 0xaa, 0x19, 0x2b, 0x1b, 0x3d, 0x41, 0x34,
	0xa5, 0x46, 0xe9, 0x65, 0xd5, 0xf8, 0xca, 0x82, 0xfa, 0x59, 0xe4, 0x23, 0x8a, 0xf9, 0xd4, 0x24,
	0x5c, 0xa7, 0x39, 0xc7, 0x9a, 0x72, 0xce, 0x35, 0x33, 0xce, 0xf7, 0xa0, 0x8c, 0x5e, 0xa8, 0x71,
	0x7a, 0x8c, 0xde, 0x5d, 0x86, 0xc5, 0x83, 0x51, 0x44, 0x27, 0x1e, 0x4e, 0xa2, 0x30, 0x48, 0xb0,
	0xfb, 0x4b, 0x0b, 0xea, 0xa9, 0xc5, 0x12, 0xc9, 0x0b, 0x96, 0xff, 0x84, 0xf0, 0xc3, 0x64, 0xad,
	0x47, 0x42, 0x4c, 0x25, 0xd9, 0xb8, 0xd3, 0xb3, 0xcc, 0x10, 0xf6, 0x87, 0x30, 0xe7, 0xe1, 0x64,
	0x3c, 0xa4, 0x5c, 0xab, 0xa5, 0xbd, 0xd7, 0x0a, 0xfc, 0xaa, 0xb6, 0x60, 0x05, 0x7a, 0x9c, 0x78,
	0x92, 0xc1, 0x7d, 0x5b, 0x4d, 0xec, 0x5a, 0x44, 0x65, 0x3b, 0x59, 0xb9, 0x9d, 0xdc, 0x3a, 0x2c,
	0x29, 0x72, 0x69, 0xc6, 0x2d, 0x58, 0x3d, 0xc2, 0x94, 0xb9, 0xa7, 0xc7, 0xdc, 0x23, 0xc5, 0xb8,
	0xef, 0xc3, 0x9a, 0x89, 0x96, 0x06, 0x6e, 0x02, 0xa4, 0xc8, 0x44, 0x1a, 0xa9, 0x61, 0xdc, 0x5d,
	0xa8, 0x1f, 0x61, 0xca, 0x35, 0x4e, 0x72, 0x41, 0xde, 0xcb, 0x07, 0x39, 0x47, 0xb8, 0xbf, 0xb3,
	0xa0, 0xa2, 0xfc, 0xf8, 0xfc, 0x43, 0xed, 0xe5, 0x0f, 0x95, 0x23, 0x8a, 0x46, 0x53, 0xe6, 0xca,
	0xf2, 0x4d, 0x46, 0xd3, 0x19, 0x4e, 0x98, 0x1f, 0x4d, 0x5b, 0xb0, 0xa2, 0x19, 0x22, 0xad, 0xdf,
	0x81, 0x39, 0x81, 0xe1, 0x96, 0x5f, 0x9d, 0x00, 0x92, 0xca, 0xed, 0xc0, 0xd2, 0x11, 0xa6, 0xcd,
	0xe8, 0x86, 0xbe, 0x48, 0xe7, 0x6f, 0x86, 0x51, 0x46, 0xa6, 0x08, 0xf7, 0x37, 0x96, 0x12, 0x97,
	0x2a, 0x74, 0x00, 0x0b, 0x5a, 0xcc, 0xca, 0xb4, 0xbc, 0x51, 0x50, 0xeb, 0x7c, 0x7a, 0xbb, 0x2a,
	0x71, 0x6f, 0xa4, 0xed, 0xca, 0x08, 0x27, 0xe1, 0x52, 0x2d, 0x9c, 0x4e, 0xe0, 0xb6, 0x50, 0x48,
	0xa2, 0x32, 0x4f, 0xed, 0xc2, 0x0c, 0x33, 0x5b, 0xfa, 0x69, 0x23, 0xe7, 0x27, 0xc3, 0x08, 0x8f,
	0x53, 0xba, 0x5f, 0xc0, 0x72, 0xea, 0x2b, 0x29, 0x24, 0x5f, 0x40, 0xac, 0x97, 0x2d, 0x20, 0xbf,
	0xb6, 0x60, 0x45, 0x14, 0x10, 0x36, 0x5e, 0x7c, 0xdd, 0xe2, 0xab, 0x4d, 0x92, 0x33, 0xe6, 0x24,
	0x99, 0x9f, 0x69, 0x66, 0xa7, 0x67, 0x1a, 0xf7, 0x04, 0x6a, 0x5d, 0x14, 0x27, 0x2a, 0xd3, 0x58,
	0xc9, 0x10, 0xd5, 0x55, 0xaa, 0x20, 0xa1, 0x29, 0x59, 0xa5, 0x02, 0x59, 0x9f, 0xc3, 0x2a, 0x97,
	0x25, 0x58, 0x52, 0xbf, 0xfd, 0x28, 0xcb, 0x28, 0xe9, 0xb3, 0xd7, 0x8b, 0x03, 0xd5, 0xec, 0x46,
	0x5e, 0xca, 0xe5, 0x2e, 0x41, 0x8d, 0x57, 0x3b, 0x79, 0xb5, 0x75, 0xb7, 0xc4, 0x49, 0xa4, 0x55,
	0xa6, 0x0e, 0xe5, 0xe6, 0x70, 0xc8, 0x35, 0xae, 0x78, 0xec, 0xd3, 0xfd, 0x00, 0xec, 0x0e, 0x49,
	0xa8, 0x0c, 0x04, 0x45, 0x77, 0x13, 0x23, 0xde, 0x02, 0xa7, 0x8d, 0x87, 0x98, 0x17, 0x77, 0x75,
	0x64, 0x8a, 0x3f, 0x9b, 0x0c, 0xca, 0x6c, 0x32, 0x70, 0xef, 0x40, 0xe3, 0x2c, 0x10, 0xa6, 0xdc,
	0x80, 0xfa, 0x8c, 0xb5, 0x67, 0x3e, 0x4a, 0x8b, 0xaa, 0xc9, 0x6e, 0x28, 0xfb, 0xc3, 0xb0, 0xff,
	0xf8, 0x30, 0x8c, 0xef, 0xe1, 0x4b, 0xa9, 0xbe, 0x8e, 0x62, 0x0a, 0x9f, 0x92, 0x41, 0x8c, 0x28,
	0x6e, 0x0d, 0x31, 0x12, 0x57, 0xb9, 0x8a, 0x67, 0xe0, 0xdc, 0x2f, 0xe1, 0x95, 0x1e, 0xa6, 0x86,
	0x64, 0x4d, 0x03, 0x12, 0xc9, 0x83, 0x2c, 0x91, 0xc8, 0x7e, 0x17, 0xe6, 0x04, 0x81, 0x9c, 0x64,
	0xbe, 0x69, 0x9e, 0x83, 0x29, 0x43, 0x92, 0xba, 0x3f, 0x83, 0xba, 0x32, 0x32, 0x3d, 0x52, 0xd9,
	0xb5, 0xac, 0x17, 0xeb, 0x5a, 0x6c, 0xf0, 0xbe, 0x08, 0x13, 0xca, 0x5b, 0x6f, 0xd5, 0xe3, 0xdf,
	0xee, 0x17, 0xea, 0x52, 0xc1, 0x2e, 0x2f, 0x8c, 0x82, 0x3f, 0x92, 0x08, 0x9d, 0xf9, 0xb7, 0xfd,
	0x81, 0x4c, 0xde, 0xd2, 0x0b, 0xc4, 0x8e, 0x48, 0xe2, 0x8e, 0xea, 0x2f, 0xfc, 0x01, 0x89, 0x24,
	0xd4, 0xfe, 0x08, 0x16, 0x32, 0x8c, 0x4a, 0x61, 0xc7, 0x14, 0x99, 0x11, 0x78, 0x3a, 0xb1, 0xbb,
	0x0f, 0x15, 0xf5, 0x60, 0x93, 0x5a, 0x22, 0xf5, 0x64, 0xdf, 0xec, 0xb0, 0x46, 0xc2, 0x83, 0xfc,
	0xb2, 0x2c, 0xad, 0x34, 0x70, 0xee, 0x81, 0x6a, 0x90, 0x38, 0x4e, 0xb8, 0x42, 0xef, 0x41, 0x35,
	0x45, 0x14, 0x97, 0x71, 0xb5, 0xec, 0x65, 0x84, 0xee, 0x33, 0x4b, 0xa5, 0xa9, 0xfd, 0xa1, 0x29,
	0xa0, 0xe0, 0x58, 0x8d, 0x0d, 0x35, 0x29, 0xf6, 0xc7, 0xf2, 0xa1, 0x40, 0x48, 0x52, 0x0e, 0x5e,
	0x2f, 0x70, 0xb0, 0xcc, 0x68, 0x83, 0xdc, 0xfd, 0x01, 0xd4, 0xdb, 0x2a, 0xf6, 0x55, 0xc4, 0xad,
	0xc1, 0x6c, 0x33, 0x8a, 0xd2, 0xf1, 0x59, 0x00, 0xe9, 0xa9, 0x96, 0xb2, 0x53, 0x75, 0x3b, 0x60,
	0x6b, 0xb9, 0xa3, 0x65, 0xa8, 0x71, 0xbd, 0xb5, 0x0a, 0xae, 0xb7, 0x45, 0xd2, 0x7e, 0x2e, 0x1e,
	0xda, 0xf4, 0x4b, 0x2d, 0x2b, 0x8c, 0xdd, 0x30, 0xa6, 0x3e, 0x2f, 0x3b, 0xbc, 0x64, 0x4a, 0x90,
	0x25, 0x5e, 0x0f, 0xc7, 0x6c, 0x14, 0xd2, 0x5a, 0x9b, 0x8e, 0xe2, 0xd7, 0xd5, 0x88, 0xb0, 0x5b,
	0x6d, 0x22, 0xaf, 0xfb, 0x29, 0xec, 0xee, 0x80, 0xa3, 0xd5, 0x96, 0xfd, 0x09, 0x63, 0x50, 0xfa,
	0xdb, 0x30, 0xc3, 0x45, 0xca, 0xb8, 0xe0, 0x8d, 0xf2, 0x0f, 0x96, 0x50, 0x4e, 0x5d, 0x97, 0x8e,
	0x83, 0xf3, 0x90, 0x17, 0x87, 0xae, 0x4a, 0xcd, 0xe3, 0x2e, 0x63, 0x64, 0xda, 0x71, 0x5d, 0x16,
	0x3d, 0xfe, 0xcd, 0x6a, 0xb1, 0xec, 0xef, 0x65, 0x31, 0xbe, 0x09, 0x88, 0xbf, 0x33, 0xc4, 0xe1,
	0x63, 0x2c, 0x86, 0x85, 0x8a, 0x27, 0x21, 0xd6, 0x41, 0x9a, 0x4f, 0x10, 0x19, 0xa2, 0x47, 0x43,
	0xcc, 0x8b, 0x7d, 0xc5, 0xcb, 0x10, 0xcc, 0xa4, 0x0e, 0x4a, 0x68, 0x0f, 0xe3, 0x80, 0xbf, 0x41,
	0x2e, 0x7a, 0x29, 0xec, 0xfe, 0xd8, 0xd4, 0x90, 0x47, 0x66, 0x1b, 0x16, 0x75, 0x9c, 0x8a, 0xce,
	0x82, 0xa7, 0x04, 0xdd, 0x30, 0xcf, 0x64, 0x72, 0x77, 0x61, 0xa9, 0x37, 0x1e, 0x0c, 0x58, 0x4e,
	0x4a, 0x17, 0x6d, 0x02, 0x9c, 0xa2, 0xa7, 0xcd, 0x01, 0xee, 0xe1, 0x7e, 0x22, 0x6f, 0x73, 0x1a,
	0xc6, 0xfd, 0x8f, 0x05, 0x20, 0x59, 0xd8, 0x29, 0xae, 0xc1, 0x2c, 0x7f, 0x07, 0x95, 0xe5, 0x51,
	0x00, 0x45, 0x31, 0xc0, 0x8a, 0x52, 0xf3, 0x05, 0x47, 0xe9, 0x66, 0x14, 0x31, 0x3b, 0x8d, 0x99,
	0x55, 0xbe, 0x19, 0x6f, 0x16, 0x25, 0x51, 0x16, 0xa9, 0x5e, 0x6e, 0xd0, 0x3d, 0x81, 0xe5, 0xac,
	0x4a, 0x0a, 0x39, 0xb3, 0x5c, 0xce, 0x96, 0x29, 0x67, 0x3a, 0xe6, 0xbd, 0x3c, 0x23, 0x2b, 0x5b,
	0x99, 0x03, 0x54, 0xd9, 0xca, 0x30, 0x57, 0x94, 0xad, 0x8c, 0xc0, 0xd3, 0x89, 0xdd, 0xb7, 0x61,
	0xa5, 0x8d, 0x87, 0xb9, 0x4e, 0xe8, 0xc0, 0xbc, 0x1a, 0x38, 0x45, 0xa6, 0x2a, 0xd0, 0xfd, 0x97,
	0x05, 0xce, 0x3d, 0x7c, 0xc9, 0x67, 0x88, 0x34, 0x78, 0xb4, 0xb3, 0x13, 0x66, 0xff, 0x04, 0x8d,
	0x44, 0xbf, 0xad, 0x79, 0x1a, 0x26, 0xf7, 0x10, 0x51, 0x9a, 0x7a, 0x88, 0x60, 0x1d, 0x8f, 0x09,
	0x66, 0x1d, 0x57, 0x4e, 0x70, 0x55, 0x4f, 0x47, 0x5d, 0x33, 0xcd, 0x34, 0xa0, 0xd2, 0x0a, 0x47,
	0x23, 0x42, 0xe5, 0x24, 0x53, 0xf5, 0x52, 0x58, 0x64, 0x04, 0x0a, 0xfa, 0x17, 0xf2, 0x75, 0x5d,
	0x42, 0x53, 0x0d, 0x7f, 0xbe, 0xa0, 0xe1, 0xff, 0xdd, 0x82, 0xf9, 0x66, 0x14, 0x9d, 0x62, 0x8a,
	0xa6, 0xae, 0xfe, 0x77, 0x60, 0xe5, 0x2c, 0xc1, 0xb1, 0x34, 0x1f, 0xfb, 0x3d, 0x1a, 0x46, 0xb2,
	0x09, 0x4f, 0x2f, 0xe8, 0x73, 0x6b, 0xd9, 0x7c, 0x66, 0xf9, 0xff, 0xfe, 0x20, 0xe1, 0xbe, 0x2d,
	0xe6, 0xf0, 0x49, 0x8f, 0xc6, 0x18, 0x8d, 0xd8, 0xa9, 0xf4, 0xa8, 0x7f, 0x7f, 0x4c, 0x3b, 0x24,
	0x50, 0xa5, 0x49, 0xc3, 0xbc, 0x75, 0x17, 0x56, 0x0b, 0x2e, 0x75, 0x76, 0x0d, 0x2a, 0xf7, 0xee,
	0xb7, 0x3e, 0x69, 0xde, 0x3b, 0x3a, 0xa8, 0x7f, 0xc3, 0xb6, 0x61, 0x49, 0x7c, 0x37, 0x5b, 0xad,
	0x83, 0xee, 0x83, 0x83, 0x76, 0xdd, 0xca, 0x70, 0xde, 0xc1, 0xc9, 0x41, 0x8b, 0xe1, 0x4a, 0x7b,
	0x5f, 0x2d, 0xa8, 0x12, 0x7e, 0xca, 0x8d, 0xb3, 0x8f, 0x61, 0x65, 0x2a, 0x9e, 0xec, 0x37, 0x4c,
	0x07, 0x5c, 0x15, 0x70, 0x8d, 0xda, 0x8e, 0xfc, 0x31, 0xe9, 0xb3, 0x90, 0xf8, 0xf6, 0x89, 0x4a,
	0x55, 0x75, 0x7d, 0x2a, 0xec, 0x74, 0x8a, 0x77, 0xa3, 0x78, 0x51, 0x8e, 0x30, 0xa7, 0x00, 0xd9,
	0x0c, 0x6e, 0xbf, 0x9a, 0xcb, 0xd2, 0xfc, 0x74, 0xde, 0xd8, 0xbc, 0xe2, 0x6e, 0xa5, 0xc4, 0xdd,
	0x85, 0x6a, 0xfa, 0x26, 0x60, 0x6f, 0x16, 0x49, 0xcb, 0x32, 0xfe, 0xb9, 0xc2, 0xba, 0xb0, 0xac,
	0x0d, 0xd2, 0x87, 0x84, 0x55, 0x6f, 0x93, 0x45, 0x9f, 0xd9, 0x1b, 0xaf, 0x15, 0xac, 0xe5, 0x66,
	0xf0, 0x2f, 0x61, 0x4d, 0xeb, 0x59, 0xc9, 0x61, 0x18, 0x8b, 0x47, 0x91, 0xad, 0xfc, 0x43, 0x69,
	0x7e, 0x66, 0x6e, 0xbc, 0x5e, 0x74, 0x59, 0x9a, 0xba, 0x60, 0x3d, 0x32, 0xe6, 0xed, 0x44, 0x34,
	0xc5, 0xfc, 0x29, 0x5f, 0xd5, 0x35, 0x6f, 0xb8, 0xc7, 0x43, 0x58, 0x2d, 0x98, 0xb6, 0xed, 0xed,
	0x2b, 0x0b, 0x6c, 0x6e, 0x20, 0xcf, 0xbb, 0x7d, 0x6a, 0xaa, 0x7d, 0x07, 0xaa, 0x47, 0x98, 0xca,
	0xb9, 0xca, 0x88, 0xbc, 0xc6, 0xda, 0xd4, 0x7b, 0x2e, 0xa3, 0x39, 0x80, 0x57, 0x8e, 0x30, 0xd5,
	0x66, 0xc4, 0xc3, 0x38, 0x1c, 0xb5, 0x50, 0xff, 0x02, 0xe7, 0xd8, 0x37, 0xae, 0x9a, 0x30, 0x79,
	0x75, 0x6f, 0xb2, 0x0a, 0x2d, 0x75, 0xbe, 0x1f, 0x88, 0xd7, 0x6e, 0xfb, 0x39, 0xfd, 0x27, 0x97,
	0x19, 0x07, 0x86, 0x6f, 0x52, 0x21, 0xcf, 0x6d, 0x3e, 0x39, 0x31, 0x7b, 0xb0, 0xa6, 0xb7, 0xef,
	0xde, 0xc5, 0x98, 0xfa, 0xe1, 0x65, 0x90, 0xb3, 0xc6, 0xe4, 0xf9, 0x2e, 0xac, 0x1a, 0x3c, 0xac,
	0x3f, 0x8f, 0xa3, 0x6b, 0x59, 0x0e, 0xe0, 0xd6, 0x11, 0xa6, 0x77, 0x83, 0xf0, 0x32, 0x30, 0xa6,
	0x85, 0x1c, 0xd3, 0x35, 0xa3, 0x06, 0xf7, 0x9b, 0x78, 0xcf, 0xd0, 0x7a, 0x9d, 0xbd, 0x51, 0xd8,
	0x12, 0xaf, 0x28, 0x08, 0xb9, 0x1e, 0xfb, 0x31, 0xd4, 0x45, 0xd1, 0xd4, 0xe4, 0x99, 0xfa, 0xac,
	0x4f, 0x57, 0x6d, 0x59, 0x62, 0x77, 0x2d, 0xfb, 0x87, 0xac, 0x36, 0xb1, 0x7b, 0xa3, 0xaa, 0x4d,
	0xaf, 0xe6, 0x0f, 0x30, 0xd7, 0x83, 0xa7, 0x6a, 0xdb, 0xf2, 0xa7, 0x63, 0x1c, 0x4f, 0xf8, 0x0f,
	0x7d, 0x38, 0x26, 0x38, 0xb1, 0xd7, 0x77, 0xf4, 0x1f, 0xc5, 0xf9, 0xaa, 0xe2, 0x6d, 0x14, 0x2d,
	0x89, 0x30, 0xde, 0xb5, 0xf6, 0x3d, 0x78, 0x33, 0xc0, 0x54, 0xff, 0xc9, 0x5d, 0xfe, 0x08, 0x8f,
	0x22, 0x92, 0x18, 0x6a, 0x7d, 0xf1, 0xe6, 0x0d, 0xff, 0x31, 0xe0, 0xd1, 0x1c, 0xff, 0x51, 0xfe,
	0xdd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xb4, 0x7e, 0x82, 0x4a, 0x20, 0x00, 0x00,
}
