// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/deploymonkey/deploymonkey.proto
// DO NOT EDIT!

/*
Package deploymonkey is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/deploymonkey/deploymonkey.proto

It has these top-level messages:
	AppReference
	ApplicationDefinition
	Limits
	GroupDefinitionRequest
	GroupConfig
	UpdateAppRequest
	EmptyResponse
	GroupDefResponse
	DeployRequest
	DeployResponse
	GetNameSpaceRequest
	GetNameSpaceResponse
	GetGroupsRequest
	GroupDef
	GetGroupsResponse
	GetAppsRequest
	GetAppResponse
	GetAppVersionsResponse
	GetAppsResponse
	UpdateRepoRequest
	ParseRequest
	ParseConfigResponse
	EmptyMessage
	ApplyRequest
	ListVersionRequest
	DeleteApplicationRequest
	UndeployApplicationRequest
	MachineStatus
	SetMachineStatusRequest
	UndeployResponse
	Deployment
	DeploymentList
	Deployer
	DeployersList
	Config
	DeployAppRequest
	UndeployAppRequest
	AutoRegistration
	ListVersionByNameRequest
	AutodeployerInfo
	AutodeployerList
	SuggestRequest
	Suggestion
	SuggestionList
*/
package deploymonkey

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GroupResponseStatus int32

const (
	// attempt to define a group that exists just like that
	GroupResponseStatus_NOCHANGE GroupResponseStatus = 0
	// change detected and accepted
	GroupResponseStatus_CHANGEACCEPTED GroupResponseStatus = 1
	// change detected but not accepted (permissions? protected group?)
	GroupResponseStatus_CHANGEREJECTED GroupResponseStatus = 2
)

var GroupResponseStatus_name = map[int32]string{
	0: "NOCHANGE",
	1: "CHANGEACCEPTED",
	2: "CHANGEREJECTED",
}
var GroupResponseStatus_value = map[string]int32{
	"NOCHANGE":       0,
	"CHANGEACCEPTED": 1,
	"CHANGEREJECTED": 2,
}

func (x GroupResponseStatus) String() string {
	return proto.EnumName(GroupResponseStatus_name, int32(x))
}
func (GroupResponseStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//
// this is stored with the applicaton and thus may be retrieved on
// the deploylist. it may also be retrieved by the application itself on the startup proto
type AppReference struct {
	ID     uint64                 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AppDef *ApplicationDefinition `protobuf:"bytes,2,opt,name=AppDef" json:"AppDef,omitempty"`
}

func (m *AppReference) Reset()                    { *m = AppReference{} }
func (m *AppReference) String() string            { return proto.CompactTextString(m) }
func (*AppReference) ProtoMessage()               {}
func (*AppReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppReference) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AppReference) GetAppDef() *ApplicationDefinition {
	if m != nil {
		return m.AppDef
	}
	return nil
}

type ApplicationDefinition struct {
	// a url where the binary or tar archive is downloaded from
	// (may also be an absolute filename)
	DownloadURL string `protobuf:"bytes,1,opt,name=DownloadURL" json:"DownloadURL,omitempty"`
	// if the URL requires authentication, this is the username
	DownloadUser string `protobuf:"bytes,2,opt,name=DownloadUser" json:"DownloadUser,omitempty"`
	// if the URL requires authentication, this is the password
	DownloadPassword string `protobuf:"bytes,3,opt,name=DownloadPassword" json:"DownloadPassword,omitempty"`
	// if the URL is an archive, this refers to the binary within the archive (relative to the archive)
	Binary string `protobuf:"bytes,4,opt,name=Binary" json:"Binary,omitempty"`
	// list of arguments to pass as command line parameters to the application
	Args []string `protobuf:"bytes,5,rep,name=Args" json:"Args,omitempty"`
	// the repository this application is built from
	//  string Repository = 6;
	// the buildid of this application
	// (usually not part of deploy.yaml, but inserted by buildrepo)
	BuildID uint64 `protobuf:"varint,7,opt,name=BuildID" json:"BuildID,omitempty"`
	// how many instances should be running of this applicatoin
	Instances uint32 `protobuf:"varint,8,opt,name=Instances" json:"Instances,omitempty"`
	// usually not part of deploy.yaml - used by deploymonkey to track instances
	DeploymentID string `protobuf:"bytes,9,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// dunno
	AutoRegs []*AutoRegistration `protobuf:"bytes,10,rep,name=AutoRegs" json:"AutoRegs,omitempty"`
	// on which type of machines may this application be deployed. (must match autodeployer flag -machine_type)
	Machines string `protobuf:"bytes,11,opt,name=Machines" json:"Machines,omitempty"`
	// either "webpackage" or empty string
	DeployType string `protobuf:"bytes,12,opt,name=DeployType" json:"DeployType,omitempty"`
	// deploymonkey internal ID
	ID uint64 `protobuf:"varint,13,opt,name=ID" json:"ID,omitempty"`
	// if false, the app is considered optional. It won't be restarted nor alerted on
	Critical bool `protobuf:"varint,14,opt,name=Critical" json:"Critical,omitempty"`
	// typically application starts and continues to run. some applications, however are run-once. AlwaysOn=false means it runs once and exits and that is normal
	// behaviour. If AlwaysOn is set to true and the application exits, it's considered an error
	AlwaysOn bool `protobuf:"varint,15,opt,name=AlwaysOn" json:"AlwaysOn,omitempty"`
	// some webpackges (e.g. "php(symfony)" REQUIRE a static directory). using this makes rollbacks somewhat "hit-and-miss". avoid if possible.
	StaticTargetDir string `protobuf:"bytes,16,opt,name=StaticTargetDir" json:"StaticTargetDir,omitempty"`
	// wether or not this is public. this means:
	// for webpackages: deploy in a public directory rather than a seperate directory
	Public bool `protobuf:"varint,17,opt,name=Public" json:"Public,omitempty"`
	// limits for this process. Defaults apply.
	Limits *Limits `protobuf:"bytes,18,opt,name=Limits" json:"Limits,omitempty"`
	//
	// we specifically support java (rather than just binaries).
	// it will start java with -cp=libs* [binary]
	// implies that "binary" is set to a main class
	Java         bool   `protobuf:"varint,19,opt,name=Java" json:"Java,omitempty"`
	RepositoryID uint64 `protobuf:"varint,20,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	AsRoot       bool   `protobuf:"varint,21,opt,name=AsRoot" json:"AsRoot,omitempty"`
}

func (m *ApplicationDefinition) Reset()                    { *m = ApplicationDefinition{} }
func (m *ApplicationDefinition) String() string            { return proto.CompactTextString(m) }
func (*ApplicationDefinition) ProtoMessage()               {}
func (*ApplicationDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ApplicationDefinition) GetDownloadURL() string {
	if m != nil {
		return m.DownloadURL
	}
	return ""
}

func (m *ApplicationDefinition) GetDownloadUser() string {
	if m != nil {
		return m.DownloadUser
	}
	return ""
}

func (m *ApplicationDefinition) GetDownloadPassword() string {
	if m != nil {
		return m.DownloadPassword
	}
	return ""
}

func (m *ApplicationDefinition) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *ApplicationDefinition) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ApplicationDefinition) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *ApplicationDefinition) GetInstances() uint32 {
	if m != nil {
		return m.Instances
	}
	return 0
}

func (m *ApplicationDefinition) GetDeploymentID() string {
	if m != nil {
		return m.DeploymentID
	}
	return ""
}

func (m *ApplicationDefinition) GetAutoRegs() []*AutoRegistration {
	if m != nil {
		return m.AutoRegs
	}
	return nil
}

func (m *ApplicationDefinition) GetMachines() string {
	if m != nil {
		return m.Machines
	}
	return ""
}

func (m *ApplicationDefinition) GetDeployType() string {
	if m != nil {
		return m.DeployType
	}
	return ""
}

func (m *ApplicationDefinition) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ApplicationDefinition) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *ApplicationDefinition) GetAlwaysOn() bool {
	if m != nil {
		return m.AlwaysOn
	}
	return false
}

func (m *ApplicationDefinition) GetStaticTargetDir() string {
	if m != nil {
		return m.StaticTargetDir
	}
	return ""
}

func (m *ApplicationDefinition) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *ApplicationDefinition) GetLimits() *Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *ApplicationDefinition) GetJava() bool {
	if m != nil {
		return m.Java
	}
	return false
}

func (m *ApplicationDefinition) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *ApplicationDefinition) GetAsRoot() bool {
	if m != nil {
		return m.AsRoot
	}
	return false
}

type Limits struct {
	// max memory available to this process in Megabyte (default = 3000Mb )
	MaxMemory uint32 `protobuf:"varint,1,opt,name=MaxMemory" json:"MaxMemory,omitempty"`
	// see setPriorityCall on linux
	Priority int32 `protobuf:"varint,2,opt,name=Priority" json:"Priority,omitempty"`
}

func (m *Limits) Reset()                    { *m = Limits{} }
func (m *Limits) String() string            { return proto.CompactTextString(m) }
func (*Limits) ProtoMessage()               {}
func (*Limits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Limits) GetMaxMemory() uint32 {
	if m != nil {
		return m.MaxMemory
	}
	return 0
}

func (m *Limits) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// a group consists of one or more applications
// and a key (chosen by the creator)
// if a group with a given key is redefined, all previous
// instances of software in this group will be shutdown
// any group can only have one application of a given repository
// in its group
type GroupDefinitionRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	GroupID   string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	// if we set a group as 'protected', then the deploymonkey
	// won't allow a user to update it unless the user has a special
	// authorisation. (To prevent accidental updates to 'live')
	Protected    bool                     `protobuf:"varint,3,opt,name=Protected" json:"Protected,omitempty"`
	Applications []*ApplicationDefinition `protobuf:"bytes,4,rep,name=Applications" json:"Applications,omitempty"`
}

func (m *GroupDefinitionRequest) Reset()                    { *m = GroupDefinitionRequest{} }
func (m *GroupDefinitionRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupDefinitionRequest) ProtoMessage()               {}
func (*GroupDefinitionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GroupDefinitionRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GroupDefinitionRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupDefinitionRequest) GetProtected() bool {
	if m != nil {
		return m.Protected
	}
	return false
}

func (m *GroupDefinitionRequest) GetApplications() []*ApplicationDefinition {
	if m != nil {
		return m.Applications
	}
	return nil
}

type GroupConfig struct {
	Group        *GroupDef                `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
	Applications []*ApplicationDefinition `protobuf:"bytes,2,rep,name=Applications" json:"Applications,omitempty"`
}

func (m *GroupConfig) Reset()                    { *m = GroupConfig{} }
func (m *GroupConfig) String() string            { return proto.CompactTextString(m) }
func (*GroupConfig) ProtoMessage()               {}
func (*GroupConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GroupConfig) GetGroup() *GroupDef {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupConfig) GetApplications() []*ApplicationDefinition {
	if m != nil {
		return m.Applications
	}
	return nil
}

type UpdateAppRequest struct {
	GroupID   string                 `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	Namespace string                 `protobuf:"bytes,2,opt,name=Namespace" json:"Namespace,omitempty"`
	App       *ApplicationDefinition `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
}

func (m *UpdateAppRequest) Reset()                    { *m = UpdateAppRequest{} }
func (m *UpdateAppRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppRequest) ProtoMessage()               {}
func (*UpdateAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateAppRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *UpdateAppRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateAppRequest) GetApp() *ApplicationDefinition {
	if m != nil {
		return m.App
	}
	return nil
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GroupDefResponse struct {
	Advice    []string            `protobuf:"bytes,1,rep,name=Advice" json:"Advice,omitempty"`
	VersionID string              `protobuf:"bytes,2,opt,name=VersionID" json:"VersionID,omitempty"`
	Result    GroupResponseStatus `protobuf:"varint,3,opt,name=Result,enum=deploymonkey.GroupResponseStatus" json:"Result,omitempty"`
}

func (m *GroupDefResponse) Reset()                    { *m = GroupDefResponse{} }
func (m *GroupDefResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupDefResponse) ProtoMessage()               {}
func (*GroupDefResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GroupDefResponse) GetAdvice() []string {
	if m != nil {
		return m.Advice
	}
	return nil
}

func (m *GroupDefResponse) GetVersionID() string {
	if m != nil {
		return m.VersionID
	}
	return ""
}

func (m *GroupDefResponse) GetResult() GroupResponseStatus {
	if m != nil {
		return m.Result
	}
	return GroupResponseStatus_NOCHANGE
}

type DeployRequest struct {
	VersionID string `protobuf:"bytes,1,opt,name=VersionID" json:"VersionID,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeployRequest) GetVersionID() string {
	if m != nil {
		return m.VersionID
	}
	return ""
}

type DeployResponse struct {
}

func (m *DeployResponse) Reset()                    { *m = DeployResponse{} }
func (m *DeployResponse) String() string            { return proto.CompactTextString(m) }
func (*DeployResponse) ProtoMessage()               {}
func (*DeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type GetNameSpaceRequest struct {
}

func (m *GetNameSpaceRequest) Reset()                    { *m = GetNameSpaceRequest{} }
func (m *GetNameSpaceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNameSpaceRequest) ProtoMessage()               {}
func (*GetNameSpaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetNameSpaceResponse struct {
	NameSpaces []string `protobuf:"bytes,1,rep,name=NameSpaces" json:"NameSpaces,omitempty"`
}

func (m *GetNameSpaceResponse) Reset()                    { *m = GetNameSpaceResponse{} }
func (m *GetNameSpaceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNameSpaceResponse) ProtoMessage()               {}
func (*GetNameSpaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetNameSpaceResponse) GetNameSpaces() []string {
	if m != nil {
		return m.NameSpaces
	}
	return nil
}

type GetGroupsRequest struct {
	NameSpace string `protobuf:"bytes,1,opt,name=NameSpace" json:"NameSpace,omitempty"`
}

func (m *GetGroupsRequest) Reset()                    { *m = GetGroupsRequest{} }
func (m *GetGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsRequest) ProtoMessage()               {}
func (*GetGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetGroupsRequest) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

type GroupDef struct {
	// actually, this is a groupName
	// groupId and groupname is used inconsistently
	GroupID         string `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	NameSpace       string `protobuf:"bytes,2,opt,name=NameSpace" json:"NameSpace,omitempty"`
	DeployedVersion int64  `protobuf:"varint,3,opt,name=DeployedVersion" json:"DeployedVersion,omitempty"`
	PendingVersion  int64  `protobuf:"varint,4,opt,name=PendingVersion" json:"PendingVersion,omitempty"`
}

func (m *GroupDef) Reset()                    { *m = GroupDef{} }
func (m *GroupDef) String() string            { return proto.CompactTextString(m) }
func (*GroupDef) ProtoMessage()               {}
func (*GroupDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GroupDef) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupDef) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

func (m *GroupDef) GetDeployedVersion() int64 {
	if m != nil {
		return m.DeployedVersion
	}
	return 0
}

func (m *GroupDef) GetPendingVersion() int64 {
	if m != nil {
		return m.PendingVersion
	}
	return 0
}

type GetGroupsResponse struct {
	Groups []*GroupDef `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *GetGroupsResponse) Reset()                    { *m = GetGroupsResponse{} }
func (m *GetGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsResponse) ProtoMessage()               {}
func (*GetGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetGroupsResponse) GetGroups() []*GroupDef {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GetAppsRequest struct {
	NameSpace string `protobuf:"bytes,1,opt,name=NameSpace" json:"NameSpace,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=GroupName" json:"GroupName,omitempty"`
}

func (m *GetAppsRequest) Reset()                    { *m = GetAppsRequest{} }
func (m *GetAppsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAppsRequest) ProtoMessage()               {}
func (*GetAppsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetAppsRequest) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

func (m *GetAppsRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type GetAppResponse struct {
	Application *ApplicationDefinition `protobuf:"bytes,1,opt,name=Application" json:"Application,omitempty"`
	Created     int64                  `protobuf:"varint,2,opt,name=Created" json:"Created,omitempty"`
	VersionID   int64                  `protobuf:"varint,3,opt,name=VersionID" json:"VersionID,omitempty"`
}

func (m *GetAppResponse) Reset()                    { *m = GetAppResponse{} }
func (m *GetAppResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppResponse) ProtoMessage()               {}
func (*GetAppResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetAppResponse) GetApplication() *ApplicationDefinition {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *GetAppResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *GetAppResponse) GetVersionID() int64 {
	if m != nil {
		return m.VersionID
	}
	return 0
}

type GetAppVersionsResponse struct {
	Apps []*GetAppResponse `protobuf:"bytes,1,rep,name=Apps" json:"Apps,omitempty"`
}

func (m *GetAppVersionsResponse) Reset()                    { *m = GetAppVersionsResponse{} }
func (m *GetAppVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppVersionsResponse) ProtoMessage()               {}
func (*GetAppVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetAppVersionsResponse) GetApps() []*GetAppResponse {
	if m != nil {
		return m.Apps
	}
	return nil
}

type GetAppsResponse struct {
	Applications []*ApplicationDefinition `protobuf:"bytes,1,rep,name=Applications" json:"Applications,omitempty"`
}

func (m *GetAppsResponse) Reset()                    { *m = GetAppsResponse{} }
func (m *GetAppsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppsResponse) ProtoMessage()               {}
func (*GetAppsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetAppsResponse) GetApplications() []*ApplicationDefinition {
	if m != nil {
		return m.Applications
	}
	return nil
}

type UpdateRepoRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	GroupID   string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	//  string Repository = 3;
	BuildID      uint64 `protobuf:"varint,4,opt,name=BuildID" json:"BuildID,omitempty"`
	RepositoryID uint64 `protobuf:"varint,5,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *UpdateRepoRequest) Reset()                    { *m = UpdateRepoRequest{} }
func (m *UpdateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRepoRequest) ProtoMessage()               {}
func (*UpdateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UpdateRepoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateRepoRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *UpdateRepoRequest) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *UpdateRepoRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type ParseRequest struct {
	Config       string `protobuf:"bytes,1,opt,name=Config" json:"Config,omitempty"`
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *ParseRequest) Reset()                    { *m = ParseRequest{} }
func (m *ParseRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()               {}
func (*ParseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ParseRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *ParseRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type ParseConfigResponse struct {
	GroupDef []*GroupDefinitionRequest `protobuf:"bytes,1,rep,name=GroupDef" json:"GroupDef,omitempty"`
}

func (m *ParseConfigResponse) Reset()                    { *m = ParseConfigResponse{} }
func (m *ParseConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ParseConfigResponse) ProtoMessage()               {}
func (*ParseConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ParseConfigResponse) GetGroupDef() []*GroupDefinitionRequest {
	if m != nil {
		return m.GroupDef
	}
	return nil
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type ApplyRequest struct {
	All bool `protobuf:"varint,1,opt,name=All" json:"All,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ApplyRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type ListVersionRequest struct {
	// string Repository = 1;
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *ListVersionRequest) Reset()                    { *m = ListVersionRequest{} }
func (m *ListVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionRequest) ProtoMessage()               {}
func (*ListVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ListVersionRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type DeleteApplicationRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *DeleteApplicationRequest) Reset()                    { *m = DeleteApplicationRequest{} }
func (m *DeleteApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationRequest) ProtoMessage()               {}
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DeleteApplicationRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type UndeployApplicationRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *UndeployApplicationRequest) Reset()                    { *m = UndeployApplicationRequest{} }
func (m *UndeployApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*UndeployApplicationRequest) ProtoMessage()               {}
func (*UndeployApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UndeployApplicationRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type MachineStatus struct {
	BlockForNew  bool `protobuf:"varint,1,opt,name=BlockForNew" json:"BlockForNew,omitempty"`
	MigrateClean bool `protobuf:"varint,2,opt,name=MigrateClean" json:"MigrateClean,omitempty"`
}

func (m *MachineStatus) Reset()                    { *m = MachineStatus{} }
func (m *MachineStatus) String() string            { return proto.CompactTextString(m) }
func (*MachineStatus) ProtoMessage()               {}
func (*MachineStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *MachineStatus) GetBlockForNew() bool {
	if m != nil {
		return m.BlockForNew
	}
	return false
}

func (m *MachineStatus) GetMigrateClean() bool {
	if m != nil {
		return m.MigrateClean
	}
	return false
}

type SetMachineStatusRequest struct {
	Ip     string         `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Status *MachineStatus `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *SetMachineStatusRequest) Reset()                    { *m = SetMachineStatusRequest{} }
func (m *SetMachineStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMachineStatusRequest) ProtoMessage()               {}
func (*SetMachineStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SetMachineStatusRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SetMachineStatusRequest) GetStatus() *MachineStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UndeployResponse struct {
	App  *ApplicationDefinition `protobuf:"bytes,1,opt,name=app" json:"app,omitempty"`
	Host []string               `protobuf:"bytes,2,rep,name=host" json:"host,omitempty"`
}

func (m *UndeployResponse) Reset()                    { *m = UndeployResponse{} }
func (m *UndeployResponse) String() string            { return proto.CompactTextString(m) }
func (*UndeployResponse) ProtoMessage()               {}
func (*UndeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UndeployResponse) GetApp() *ApplicationDefinition {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *UndeployResponse) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

type Deployment struct {
	Host string                    `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	Apps []*GroupDefinitionRequest `protobuf:"bytes,2,rep,name=Apps" json:"Apps,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Deployment) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Deployment) GetApps() []*GroupDefinitionRequest {
	if m != nil {
		return m.Apps
	}
	return nil
}

type DeploymentList struct {
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=Deployments" json:"Deployments,omitempty"`
}

func (m *DeploymentList) Reset()                    { *m = DeploymentList{} }
func (m *DeploymentList) String() string            { return proto.CompactTextString(m) }
func (*DeploymentList) ProtoMessage()               {}
func (*DeploymentList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DeploymentList) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type Deployer struct {
	Host         string   `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Machinegroup []string `protobuf:"bytes,2,rep,name=machinegroup" json:"machinegroup,omitempty"`
}

func (m *Deployer) Reset()                    { *m = Deployer{} }
func (m *Deployer) String() string            { return proto.CompactTextString(m) }
func (*Deployer) ProtoMessage()               {}
func (*Deployer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *Deployer) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Deployer) GetMachinegroup() []string {
	if m != nil {
		return m.Machinegroup
	}
	return nil
}

type DeployersList struct {
	Deployers []*Deployer `protobuf:"bytes,1,rep,name=Deployers" json:"Deployers,omitempty"`
}

func (m *DeployersList) Reset()                    { *m = DeployersList{} }
func (m *DeployersList) String() string            { return proto.CompactTextString(m) }
func (*DeployersList) ProtoMessage()               {}
func (*DeployersList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DeployersList) GetDeployers() []*Deployer {
	if m != nil {
		return m.Deployers
	}
	return nil
}

type Config struct {
	Deployers    *DeployersList `protobuf:"bytes,1,opt,name=Deployers" json:"Deployers,omitempty"`
	GroupConfigs []*GroupConfig `protobuf:"bytes,2,rep,name=GroupConfigs" json:"GroupConfigs,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Config) GetDeployers() *DeployersList {
	if m != nil {
		return m.Deployers
	}
	return nil
}

func (m *Config) GetGroupConfigs() []*GroupConfig {
	if m != nil {
		return m.GroupConfigs
	}
	return nil
}

type DeployAppRequest struct {
	AppID uint64 `protobuf:"varint,1,opt,name=AppID" json:"AppID,omitempty"`
	Host  string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *DeployAppRequest) Reset()                    { *m = DeployAppRequest{} }
func (m *DeployAppRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployAppRequest) ProtoMessage()               {}
func (*DeployAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *DeployAppRequest) GetAppID() uint64 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *DeployAppRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type UndeployAppRequest struct {
	DeploymentID string `protobuf:"bytes,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	Host         string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *UndeployAppRequest) Reset()                    { *m = UndeployAppRequest{} }
func (m *UndeployAppRequest) String() string            { return proto.CompactTextString(m) }
func (*UndeployAppRequest) ProtoMessage()               {}
func (*UndeployAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *UndeployAppRequest) GetDeploymentID() string {
	if m != nil {
		return m.DeploymentID
	}
	return ""
}

func (m *UndeployAppRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type AutoRegistration struct {
	Portdef     string `protobuf:"bytes,1,opt,name=Portdef" json:"Portdef,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	// comma delimited list of apitypes
	ApiTypes string `protobuf:"bytes,3,opt,name=ApiTypes" json:"ApiTypes,omitempty"`
}

func (m *AutoRegistration) Reset()                    { *m = AutoRegistration{} }
func (m *AutoRegistration) String() string            { return proto.CompactTextString(m) }
func (*AutoRegistration) ProtoMessage()               {}
func (*AutoRegistration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *AutoRegistration) GetPortdef() string {
	if m != nil {
		return m.Portdef
	}
	return ""
}

func (m *AutoRegistration) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AutoRegistration) GetApiTypes() string {
	if m != nil {
		return m.ApiTypes
	}
	return ""
}

type ListVersionByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *ListVersionByNameRequest) Reset()                    { *m = ListVersionByNameRequest{} }
func (m *ListVersionByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionByNameRequest) ProtoMessage()               {}
func (*ListVersionByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ListVersionByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AutodeployerInfo struct {
	IP        string   `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port      uint32   `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	Groups    []string `protobuf:"bytes,3,rep,name=Groups" json:"Groups,omitempty"`
	Broken    bool     `protobuf:"varint,4,opt,name=Broken" json:"Broken,omitempty"`
	Available bool     `protobuf:"varint,5,opt,name=Available" json:"Available,omitempty"`
	LastSeen  uint32   `protobuf:"varint,6,opt,name=LastSeen" json:"LastSeen,omitempty"`
}

func (m *AutodeployerInfo) Reset()                    { *m = AutodeployerInfo{} }
func (m *AutodeployerInfo) String() string            { return proto.CompactTextString(m) }
func (*AutodeployerInfo) ProtoMessage()               {}
func (*AutodeployerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *AutodeployerInfo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AutodeployerInfo) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AutodeployerInfo) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *AutodeployerInfo) GetBroken() bool {
	if m != nil {
		return m.Broken
	}
	return false
}

func (m *AutodeployerInfo) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *AutodeployerInfo) GetLastSeen() uint32 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

type AutodeployerList struct {
	Autodeployers []*AutodeployerInfo `protobuf:"bytes,1,rep,name=Autodeployers" json:"Autodeployers,omitempty"`
}

func (m *AutodeployerList) Reset()                    { *m = AutodeployerList{} }
func (m *AutodeployerList) String() string            { return proto.CompactTextString(m) }
func (*AutodeployerList) ProtoMessage()               {}
func (*AutodeployerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *AutodeployerList) GetAutodeployers() []*AutodeployerInfo {
	if m != nil {
		return m.Autodeployers
	}
	return nil
}

type SuggestRequest struct {
	MaxAgeSecs uint32 `protobuf:"varint,1,opt,name=MaxAgeSecs" json:"MaxAgeSecs,omitempty"`
}

func (m *SuggestRequest) Reset()                    { *m = SuggestRequest{} }
func (m *SuggestRequest) String() string            { return proto.CompactTextString(m) }
func (*SuggestRequest) ProtoMessage()               {}
func (*SuggestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SuggestRequest) GetMaxAgeSecs() uint32 {
	if m != nil {
		return m.MaxAgeSecs
	}
	return 0
}

type Suggestion struct {
	Start           bool                   `protobuf:"varint,1,opt,name=Start" json:"Start,omitempty"`
	Host            string                 `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	App             *ApplicationDefinition `protobuf:"bytes,3,opt,name=App" json:"App,omitempty"`
	DeployRequest   *DeployAppRequest      `protobuf:"bytes,4,opt,name=DeployRequest" json:"DeployRequest,omitempty"`
	UndeployRequest *UndeployAppRequest    `protobuf:"bytes,5,opt,name=UndeployRequest" json:"UndeployRequest,omitempty"`
}

func (m *Suggestion) Reset()                    { *m = Suggestion{} }
func (m *Suggestion) String() string            { return proto.CompactTextString(m) }
func (*Suggestion) ProtoMessage()               {}
func (*Suggestion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *Suggestion) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

func (m *Suggestion) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Suggestion) GetApp() *ApplicationDefinition {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *Suggestion) GetDeployRequest() *DeployAppRequest {
	if m != nil {
		return m.DeployRequest
	}
	return nil
}

func (m *Suggestion) GetUndeployRequest() *UndeployAppRequest {
	if m != nil {
		return m.UndeployRequest
	}
	return nil
}

type SuggestionList struct {
	Suggestions []*Suggestion `protobuf:"bytes,1,rep,name=Suggestions" json:"Suggestions,omitempty"`
}

func (m *SuggestionList) Reset()                    { *m = SuggestionList{} }
func (m *SuggestionList) String() string            { return proto.CompactTextString(m) }
func (*SuggestionList) ProtoMessage()               {}
func (*SuggestionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *SuggestionList) GetSuggestions() []*Suggestion {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

func init() {
	proto.RegisterType((*AppReference)(nil), "deploymonkey.AppReference")
	proto.RegisterType((*ApplicationDefinition)(nil), "deploymonkey.ApplicationDefinition")
	proto.RegisterType((*Limits)(nil), "deploymonkey.Limits")
	proto.RegisterType((*GroupDefinitionRequest)(nil), "deploymonkey.GroupDefinitionRequest")
	proto.RegisterType((*GroupConfig)(nil), "deploymonkey.GroupConfig")
	proto.RegisterType((*UpdateAppRequest)(nil), "deploymonkey.UpdateAppRequest")
	proto.RegisterType((*EmptyResponse)(nil), "deploymonkey.EmptyResponse")
	proto.RegisterType((*GroupDefResponse)(nil), "deploymonkey.GroupDefResponse")
	proto.RegisterType((*DeployRequest)(nil), "deploymonkey.DeployRequest")
	proto.RegisterType((*DeployResponse)(nil), "deploymonkey.DeployResponse")
	proto.RegisterType((*GetNameSpaceRequest)(nil), "deploymonkey.GetNameSpaceRequest")
	proto.RegisterType((*GetNameSpaceResponse)(nil), "deploymonkey.GetNameSpaceResponse")
	proto.RegisterType((*GetGroupsRequest)(nil), "deploymonkey.GetGroupsRequest")
	proto.RegisterType((*GroupDef)(nil), "deploymonkey.GroupDef")
	proto.RegisterType((*GetGroupsResponse)(nil), "deploymonkey.GetGroupsResponse")
	proto.RegisterType((*GetAppsRequest)(nil), "deploymonkey.GetAppsRequest")
	proto.RegisterType((*GetAppResponse)(nil), "deploymonkey.GetAppResponse")
	proto.RegisterType((*GetAppVersionsResponse)(nil), "deploymonkey.GetAppVersionsResponse")
	proto.RegisterType((*GetAppsResponse)(nil), "deploymonkey.GetAppsResponse")
	proto.RegisterType((*UpdateRepoRequest)(nil), "deploymonkey.UpdateRepoRequest")
	proto.RegisterType((*ParseRequest)(nil), "deploymonkey.ParseRequest")
	proto.RegisterType((*ParseConfigResponse)(nil), "deploymonkey.ParseConfigResponse")
	proto.RegisterType((*EmptyMessage)(nil), "deploymonkey.EmptyMessage")
	proto.RegisterType((*ApplyRequest)(nil), "deploymonkey.ApplyRequest")
	proto.RegisterType((*ListVersionRequest)(nil), "deploymonkey.ListVersionRequest")
	proto.RegisterType((*DeleteApplicationRequest)(nil), "deploymonkey.DeleteApplicationRequest")
	proto.RegisterType((*UndeployApplicationRequest)(nil), "deploymonkey.UndeployApplicationRequest")
	proto.RegisterType((*MachineStatus)(nil), "deploymonkey.MachineStatus")
	proto.RegisterType((*SetMachineStatusRequest)(nil), "deploymonkey.SetMachineStatusRequest")
	proto.RegisterType((*UndeployResponse)(nil), "deploymonkey.UndeployResponse")
	proto.RegisterType((*Deployment)(nil), "deploymonkey.Deployment")
	proto.RegisterType((*DeploymentList)(nil), "deploymonkey.DeploymentList")
	proto.RegisterType((*Deployer)(nil), "deploymonkey.Deployer")
	proto.RegisterType((*DeployersList)(nil), "deploymonkey.DeployersList")
	proto.RegisterType((*Config)(nil), "deploymonkey.Config")
	proto.RegisterType((*DeployAppRequest)(nil), "deploymonkey.DeployAppRequest")
	proto.RegisterType((*UndeployAppRequest)(nil), "deploymonkey.UndeployAppRequest")
	proto.RegisterType((*AutoRegistration)(nil), "deploymonkey.AutoRegistration")
	proto.RegisterType((*ListVersionByNameRequest)(nil), "deploymonkey.ListVersionByNameRequest")
	proto.RegisterType((*AutodeployerInfo)(nil), "deploymonkey.AutodeployerInfo")
	proto.RegisterType((*AutodeployerList)(nil), "deploymonkey.AutodeployerList")
	proto.RegisterType((*SuggestRequest)(nil), "deploymonkey.SuggestRequest")
	proto.RegisterType((*Suggestion)(nil), "deploymonkey.Suggestion")
	proto.RegisterType((*SuggestionList)(nil), "deploymonkey.SuggestionList")
	proto.RegisterEnum("deploymonkey.GroupResponseStatus", GroupResponseStatus_name, GroupResponseStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeployMonkey service

type DeployMonkeyClient interface {
	DefineGroup(ctx context.Context, in *GroupDefinitionRequest, opts ...grpc.CallOption) (*GroupDefResponse, error)
	DeployVersion(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	//  deploymonkey-client: update all apps in a repo in a group to a new buildid
	UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*GroupDefResponse, error)
	//  deploymonkey-client: update a single app to a new buildid
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*GroupDefResponse, error)
	// rpc GetNameSpaces(GetNameSpaceRequest) returns (GetNameSpaceResponse);
	// rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse);
	// rpc GetApplications(GetAppsRequest) returns (GetAppsResponse);
	ParseConfigFile(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseConfigResponse, error)
	// deploymonkey-client: list previous versions for a given group
	ListVersionsForGroup(ctx context.Context, in *ListVersionRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error)
	ListVersionsByName(ctx context.Context, in *ListVersionByNameRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error)
	// rpc DeleteApplication(DeleteApplicationRequest) returns (EmptyMessage);
	UndeployApplication(ctx context.Context, in *UndeployApplicationRequest, opts ...grpc.CallOption) (*UndeployResponse, error)
	// rpc SetMachineStatus(SetMachineStatusRequest) returns (EmptyMessage);
	// get entire config
	GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Config, error)
	// this reads from cache:
	GetDeploymentsFromCache(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DeploymentList, error)
	// rpc GetDeployers(common.Void) returns (DeployersList);
	// low-level primitives to check the suggestion mode
	DeployAppOnTarget(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*common.Void, error)
	UndeployAppOnTarget(ctx context.Context, in *UndeployAppRequest, opts ...grpc.CallOption) (*common.Void, error)
	// autodeployer is shutting down (using IP as key)
	AutodeployerShutdown(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// autodeployer (on that IP) has just started
	AutodeployerStartup(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// get all autodeployers that we currently know of
	GetKnownAutodeployers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AutodeployerList, error)
	// get suggestions
	GetSuggestions(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestionList, error)
}

type deployMonkeyClient struct {
	cc *grpc.ClientConn
}

func NewDeployMonkeyClient(cc *grpc.ClientConn) DeployMonkeyClient {
	return &deployMonkeyClient{cc}
}

func (c *deployMonkeyClient) DefineGroup(ctx context.Context, in *GroupDefinitionRequest, opts ...grpc.CallOption) (*GroupDefResponse, error) {
	out := new(GroupDefResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/DefineGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) DeployVersion(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/DeployVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*GroupDefResponse, error) {
	out := new(GroupDefResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UpdateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*GroupDefResponse, error) {
	out := new(GroupDefResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) ParseConfigFile(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseConfigResponse, error) {
	out := new(ParseConfigResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/ParseConfigFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) ListVersionsForGroup(ctx context.Context, in *ListVersionRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error) {
	out := new(GetAppVersionsResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/ListVersionsForGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) ListVersionsByName(ctx context.Context, in *ListVersionByNameRequest, opts ...grpc.CallOption) (*GetAppVersionsResponse, error) {
	out := new(GetAppVersionsResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/ListVersionsByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UndeployApplication(ctx context.Context, in *UndeployApplicationRequest, opts ...grpc.CallOption) (*UndeployResponse, error) {
	out := new(UndeployResponse)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UndeployApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetDeploymentsFromCache(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DeploymentList, error) {
	out := new(DeploymentList)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetDeploymentsFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) DeployAppOnTarget(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/DeployAppOnTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) UndeployAppOnTarget(ctx context.Context, in *UndeployAppRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/UndeployAppOnTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) AutodeployerShutdown(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/AutodeployerShutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) AutodeployerStartup(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/AutodeployerStartup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetKnownAutodeployers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AutodeployerList, error) {
	out := new(AutodeployerList)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetKnownAutodeployers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployMonkeyClient) GetSuggestions(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestionList, error) {
	out := new(SuggestionList)
	err := grpc.Invoke(ctx, "/deploymonkey.DeployMonkey/GetSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeployMonkey service

type DeployMonkeyServer interface {
	DefineGroup(context.Context, *GroupDefinitionRequest) (*GroupDefResponse, error)
	DeployVersion(context.Context, *DeployRequest) (*DeployResponse, error)
	//  deploymonkey-client: update all apps in a repo in a group to a new buildid
	UpdateRepo(context.Context, *UpdateRepoRequest) (*GroupDefResponse, error)
	//  deploymonkey-client: update a single app to a new buildid
	UpdateApp(context.Context, *UpdateAppRequest) (*GroupDefResponse, error)
	// rpc GetNameSpaces(GetNameSpaceRequest) returns (GetNameSpaceResponse);
	// rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse);
	// rpc GetApplications(GetAppsRequest) returns (GetAppsResponse);
	ParseConfigFile(context.Context, *ParseRequest) (*ParseConfigResponse, error)
	// deploymonkey-client: list previous versions for a given group
	ListVersionsForGroup(context.Context, *ListVersionRequest) (*GetAppVersionsResponse, error)
	ListVersionsByName(context.Context, *ListVersionByNameRequest) (*GetAppVersionsResponse, error)
	// rpc DeleteApplication(DeleteApplicationRequest) returns (EmptyMessage);
	UndeployApplication(context.Context, *UndeployApplicationRequest) (*UndeployResponse, error)
	// rpc SetMachineStatus(SetMachineStatusRequest) returns (EmptyMessage);
	// get entire config
	GetConfig(context.Context, *common.Void) (*Config, error)
	// this reads from cache:
	GetDeploymentsFromCache(context.Context, *common.Void) (*DeploymentList, error)
	// rpc GetDeployers(common.Void) returns (DeployersList);
	// low-level primitives to check the suggestion mode
	DeployAppOnTarget(context.Context, *DeployAppRequest) (*common.Void, error)
	UndeployAppOnTarget(context.Context, *UndeployAppRequest) (*common.Void, error)
	// autodeployer is shutting down (using IP as key)
	AutodeployerShutdown(context.Context, *common.Void) (*common.Void, error)
	// autodeployer (on that IP) has just started
	AutodeployerStartup(context.Context, *common.Void) (*common.Void, error)
	// get all autodeployers that we currently know of
	GetKnownAutodeployers(context.Context, *common.Void) (*AutodeployerList, error)
	// get suggestions
	GetSuggestions(context.Context, *SuggestRequest) (*SuggestionList, error)
}

func RegisterDeployMonkeyServer(s *grpc.Server, srv DeployMonkeyServer) {
	s.RegisterService(&_DeployMonkey_serviceDesc, srv)
}

func _DeployMonkey_DefineGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).DefineGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/DefineGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).DefineGroup(ctx, req.(*GroupDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_DeployVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).DeployVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/DeployVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).DeployVersion(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UpdateRepo(ctx, req.(*UpdateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_ParseConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).ParseConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/ParseConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).ParseConfigFile(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_ListVersionsForGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).ListVersionsForGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/ListVersionsForGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).ListVersionsForGroup(ctx, req.(*ListVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_ListVersionsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).ListVersionsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/ListVersionsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).ListVersionsByName(ctx, req.(*ListVersionByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UndeployApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UndeployApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UndeployApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UndeployApplication(ctx, req.(*UndeployApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetConfig(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetDeploymentsFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetDeploymentsFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetDeploymentsFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetDeploymentsFromCache(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_DeployAppOnTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).DeployAppOnTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/DeployAppOnTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).DeployAppOnTarget(ctx, req.(*DeployAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_UndeployAppOnTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).UndeployAppOnTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/UndeployAppOnTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).UndeployAppOnTarget(ctx, req.(*UndeployAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_AutodeployerShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).AutodeployerShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/AutodeployerShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).AutodeployerShutdown(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_AutodeployerStartup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).AutodeployerStartup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/AutodeployerStartup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).AutodeployerStartup(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetKnownAutodeployers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetKnownAutodeployers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetKnownAutodeployers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetKnownAutodeployers(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployMonkey_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployMonkeyServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymonkey.DeployMonkey/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployMonkeyServer).GetSuggestions(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeployMonkey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deploymonkey.DeployMonkey",
	HandlerType: (*DeployMonkeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefineGroup",
			Handler:    _DeployMonkey_DefineGroup_Handler,
		},
		{
			MethodName: "DeployVersion",
			Handler:    _DeployMonkey_DeployVersion_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _DeployMonkey_UpdateRepo_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _DeployMonkey_UpdateApp_Handler,
		},
		{
			MethodName: "ParseConfigFile",
			Handler:    _DeployMonkey_ParseConfigFile_Handler,
		},
		{
			MethodName: "ListVersionsForGroup",
			Handler:    _DeployMonkey_ListVersionsForGroup_Handler,
		},
		{
			MethodName: "ListVersionsByName",
			Handler:    _DeployMonkey_ListVersionsByName_Handler,
		},
		{
			MethodName: "UndeployApplication",
			Handler:    _DeployMonkey_UndeployApplication_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _DeployMonkey_GetConfig_Handler,
		},
		{
			MethodName: "GetDeploymentsFromCache",
			Handler:    _DeployMonkey_GetDeploymentsFromCache_Handler,
		},
		{
			MethodName: "DeployAppOnTarget",
			Handler:    _DeployMonkey_DeployAppOnTarget_Handler,
		},
		{
			MethodName: "UndeployAppOnTarget",
			Handler:    _DeployMonkey_UndeployAppOnTarget_Handler,
		},
		{
			MethodName: "AutodeployerShutdown",
			Handler:    _DeployMonkey_AutodeployerShutdown_Handler,
		},
		{
			MethodName: "AutodeployerStartup",
			Handler:    _DeployMonkey_AutodeployerStartup_Handler,
		},
		{
			MethodName: "GetKnownAutodeployers",
			Handler:    _DeployMonkey_GetKnownAutodeployers_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _DeployMonkey_GetSuggestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/golang.conradwood.net/apis/deploymonkey/deploymonkey.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/deploymonkey/deploymonkey.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1941 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x58, 0xdd, 0x73, 0x1b, 0x49,
	0x11, 0x67, 0xe5, 0x8f, 0x93, 0xda, 0xb2, 0xac, 0x8c, 0x9d, 0xdc, 0x22, 0x5c, 0x46, 0xb7, 0x5c,
	0x1d, 0x26, 0x15, 0x9c, 0xe0, 0x03, 0xea, 0xee, 0x80, 0x2a, 0xd6, 0x92, 0xa2, 0x93, 0x63, 0x27,
	0xaa, 0x51, 0x72, 0x50, 0x47, 0x71, 0xd4, 0x46, 0x1a, 0x2b, 0x4b, 0xa4, 0x9d, 0x65, 0x67, 0x14,
	0x9f, 0x1e, 0xf9, 0x78, 0xe1, 0x89, 0xa2, 0x8a, 0x3f, 0x80, 0xff, 0x82, 0x57, 0xfe, 0x33, 0xa8,
	0xf9, 0xda, 0xdd, 0x59, 0xad, 0x63, 0xe5, 0xee, 0x49, 0xdb, 0xbd, 0xdd, 0x3d, 0xfd, 0xf9, 0x9b,
	0x5e, 0x81, 0x1f, 0x27, 0x94, 0x53, 0xf6, 0x70, 0x4a, 0x67, 0x41, 0x34, 0x3d, 0x19, 0xd3, 0x28,
	0x09, 0x26, 0xd7, 0x94, 0x4e, 0x4e, 0x22, 0xc2, 0x1f, 0x06, 0x71, 0xc8, 0x1e, 0x4e, 0x48, 0x3c,
	0xa3, 0xcb, 0x39, 0x8d, 0x5e, 0x93, 0xa5, 0x45, 0x9c, 0x48, 0x5d, 0x54, 0xcf, 0xf3, 0x5a, 0x27,
	0x6f, 0xb1, 0x34, 0xa6, 0xf3, 0x39, 0x8d, 0xf4, 0x8f, 0xd2, 0xf6, 0x7e, 0x07, 0x75, 0x3f, 0x8e,
	0x31, 0xb9, 0x22, 0x09, 0x89, 0xc6, 0x04, 0x35, 0xa0, 0x32, 0xe8, 0xba, 0x4e, 0xdb, 0x39, 0xde,
	0xc4, 0x95, 0x41, 0x17, 0xfd, 0x02, 0xb6, 0xfd, 0x38, 0xee, 0x92, 0x2b, 0xb7, 0xd2, 0x76, 0x8e,
	0x77, 0x4e, 0x7f, 0x70, 0x62, 0xb9, 0xe0, 0xc7, 0xf1, 0x2c, 0x1c, 0x07, 0x3c, 0xa4, 0x51, 0x97,
	0x5c, 0x85, 0x51, 0x28, 0x9e, 0xb0, 0x56, 0xf1, 0xfe, 0xb9, 0x05, 0x77, 0x4b, 0x25, 0x50, 0x1b,
	0x76, 0xba, 0xf4, 0x3a, 0x9a, 0xd1, 0x60, 0xf2, 0x02, 0x5f, 0xc8, 0xf3, 0x6a, 0x38, 0xcf, 0x42,
	0x1e, 0xd4, 0x53, 0x92, 0x91, 0x44, 0x1e, 0x5f, 0xc3, 0x16, 0x0f, 0xdd, 0x87, 0xa6, 0xa1, 0x87,
	0x01, 0x63, 0xd7, 0x34, 0x99, 0xb8, 0x1b, 0x52, 0x6e, 0x85, 0x8f, 0xee, 0xc1, 0xf6, 0x59, 0x18,
	0x05, 0xc9, 0xd2, 0xdd, 0x94, 0x12, 0x9a, 0x42, 0x08, 0x36, 0xfd, 0x64, 0xca, 0xdc, 0xad, 0xf6,
	0xc6, 0x71, 0x0d, 0xcb, 0x67, 0xe4, 0xc2, 0x7b, 0x67, 0x8b, 0x70, 0x36, 0x19, 0x74, 0xdd, 0xf7,
	0x64, 0x26, 0x0c, 0x89, 0x0e, 0xa1, 0x36, 0x88, 0x18, 0x0f, 0xa2, 0x31, 0x61, 0x6e, 0xb5, 0xed,
	0x1c, 0xef, 0xe2, 0x8c, 0x21, 0x7d, 0x56, 0xd9, 0x21, 0x11, 0x1f, 0x74, 0xdd, 0x9a, 0xf6, 0x39,
	0xc7, 0x43, 0x9f, 0x41, 0xd5, 0x5f, 0x70, 0x8a, 0xc9, 0x94, 0xb9, 0xd0, 0xde, 0x38, 0xde, 0x39,
	0x3d, 0x2a, 0xa4, 0x54, 0xbd, 0x0d, 0x19, 0x4f, 0x64, 0xd6, 0x70, 0x2a, 0x8f, 0x5a, 0x50, 0xbd,
	0x0c, 0xc6, 0xaf, 0xc2, 0x88, 0x30, 0x77, 0x47, 0xda, 0x4e, 0x69, 0x74, 0x04, 0xa0, 0xce, 0x79,
	0xbe, 0x8c, 0x89, 0x5b, 0x97, 0x6f, 0x73, 0x1c, 0x5d, 0xd8, 0xdd, 0xb4, 0xb0, 0x2d, 0xa8, 0x76,
	0x92, 0x90, 0x87, 0xe3, 0x60, 0xe6, 0x36, 0xda, 0xce, 0x71, 0x15, 0xa7, 0xb4, 0x78, 0xe7, 0xcf,
	0xae, 0x83, 0x25, 0x7b, 0x16, 0xb9, 0x7b, 0xea, 0x9d, 0xa1, 0xd1, 0x31, 0xec, 0x8d, 0x78, 0xc0,
	0xc3, 0xf1, 0xf3, 0x20, 0x99, 0x12, 0xde, 0x0d, 0x13, 0xb7, 0x29, 0x0f, 0x2b, 0xb2, 0x45, 0xc6,
	0x87, 0x8b, 0x97, 0xb3, 0x70, 0xec, 0xde, 0x91, 0x36, 0x34, 0x85, 0x1e, 0xc0, 0xf6, 0x45, 0x38,
	0x0f, 0x39, 0x73, 0x91, 0x6c, 0xa9, 0x03, 0x3b, 0x7e, 0xf5, 0x0e, 0x6b, 0x19, 0x51, 0x9f, 0xf3,
	0xe0, 0x4d, 0xe0, 0xee, 0x4b, 0x1b, 0xf2, 0x59, 0xe4, 0x19, 0x93, 0x98, 0xb2, 0x90, 0xd3, 0x64,
	0x39, 0xe8, 0xba, 0x07, 0x32, 0x2a, 0x8b, 0x27, 0x4e, 0xf7, 0x19, 0xa6, 0x94, 0xbb, 0x77, 0xd5,
	0xe9, 0x8a, 0xf2, 0xce, 0xcc, 0xe9, 0xa2, 0x96, 0x97, 0xc1, 0xd7, 0x97, 0x64, 0x4e, 0x93, 0xa5,
	0xec, 0xc0, 0x5d, 0x9c, 0x31, 0x44, 0x0e, 0x86, 0x49, 0x48, 0x93, 0x90, 0x2f, 0x65, 0xef, 0x6d,
	0xe1, 0x94, 0xf6, 0xfe, 0xe3, 0xc0, 0xbd, 0x7e, 0x42, 0x17, 0x71, 0xae, 0xe7, 0xc9, 0x9f, 0x16,
	0x84, 0x71, 0x61, 0xf4, 0x69, 0x30, 0x27, 0x2c, 0x0e, 0xc6, 0x44, 0xb7, 0x75, 0xc6, 0x10, 0x8d,
	0x25, 0xf5, 0x06, 0x5d, 0xdd, 0xcf, 0x86, 0x14, 0x7a, 0xc3, 0x84, 0x72, 0x32, 0xe6, 0x44, 0xf5,
	0x70, 0x15, 0x67, 0x0c, 0xd4, 0x97, 0x53, 0x6a, 0xe6, 0x88, 0xb9, 0x9b, 0xb2, 0x71, 0xd6, 0x9a,
	0x45, 0x4b, 0xd1, 0xfb, 0x9b, 0x03, 0x3b, 0xf2, 0xc8, 0x0e, 0x8d, 0xae, 0xc2, 0x29, 0x7a, 0x00,
	0x5b, 0x92, 0x94, 0xae, 0xee, 0x9c, 0xde, 0xb3, 0x2d, 0x9a, 0x18, 0xb1, 0x12, 0x5a, 0x71, 0xa3,
	0xf2, 0x4d, 0xdd, 0xf8, 0xb3, 0x03, 0xcd, 0x17, 0xf1, 0x24, 0xe0, 0x44, 0x82, 0x8f, 0x4a, 0x5d,
	0x2e, 0x39, 0xce, 0x4a, 0x72, 0xb2, 0xa4, 0x56, 0x8a, 0x49, 0xfd, 0x19, 0x6c, 0x04, 0x71, 0x2c,
	0x93, 0xb6, 0xa6, 0x33, 0x42, 0xde, 0xdb, 0x83, 0xdd, 0xde, 0x3c, 0xe6, 0x4b, 0x4c, 0x58, 0x4c,
	0x23, 0x46, 0xbc, 0xbf, 0x3a, 0xd0, 0x4c, 0x23, 0xd6, 0x4c, 0xd9, 0x46, 0x93, 0x37, 0xa1, 0x2c,
	0xa6, 0x00, 0x08, 0x4d, 0x09, 0x97, 0xbe, 0x20, 0x09, 0x0b, 0x69, 0x94, 0xd6, 0x32, 0x63, 0xa0,
	0x4f, 0x61, 0x1b, 0x13, 0xb6, 0x98, 0x71, 0xe9, 0x55, 0xe3, 0xf4, 0x83, 0x92, 0xbc, 0x9a, 0x23,
	0xc4, 0xd8, 0x2c, 0x18, 0xd6, 0x0a, 0xde, 0x8f, 0x61, 0x57, 0x4d, 0x6d, 0xae, 0xa3, 0xb2, 0x93,
	0x9c, 0xc2, 0x49, 0x5e, 0x13, 0x1a, 0x46, 0x5c, 0x87, 0x71, 0x17, 0xf6, 0xfb, 0x84, 0x8b, 0xf4,
	0x8c, 0x44, 0x7a, 0xb4, 0x19, 0xef, 0xe7, 0x70, 0x60, 0xb3, 0x75, 0x80, 0x47, 0x00, 0x29, 0x93,
	0xe9, 0x20, 0x73, 0x1c, 0xef, 0x11, 0x34, 0xfb, 0x84, 0x4b, 0x8f, 0x59, 0xa1, 0xc9, 0x47, 0xc5,
	0x26, 0x97, 0x0c, 0xef, 0x5f, 0x0e, 0x54, 0x4d, 0x1e, 0x6f, 0x2f, 0xea, 0xa8, 0x58, 0x54, 0xc9,
	0x10, 0x30, 0xa3, 0xe2, 0x22, 0x13, 0x1d, 0xac, 0x4c, 0xe5, 0x06, 0x2e, 0xb2, 0xd1, 0x47, 0xd0,
	0x18, 0x92, 0x68, 0x12, 0x46, 0x53, 0x23, 0xb8, 0x29, 0x05, 0x0b, 0x5c, 0xaf, 0x03, 0x77, 0x72,
	0x81, 0xe8, 0xe8, 0x4f, 0x60, 0x5b, 0x71, 0x64, 0xe4, 0x37, 0x0f, 0x80, 0x96, 0xf2, 0x2e, 0xa0,
	0xd1, 0x27, 0xdc, 0x8f, 0xd7, 0xcc, 0x85, 0x78, 0x2b, 0x35, 0x05, 0xc7, 0x04, 0x99, 0x32, 0xbc,
	0x7f, 0x38, 0xc6, 0x5c, 0xea, 0x50, 0x0f, 0x76, 0x72, 0x3d, 0xab, 0xc7, 0x72, 0xad, 0xa6, 0xce,
	0xeb, 0x89, 0xb4, 0x77, 0x12, 0x12, 0x08, 0x30, 0xa9, 0xc8, 0x6c, 0x18, 0xd2, 0x6e, 0x27, 0x95,
	0xd2, 0x5c, 0x3b, 0x9d, 0xc3, 0x3d, 0xe5, 0x90, 0x66, 0x65, 0x99, 0x7a, 0x04, 0x9b, 0x22, 0x6c,
	0x9d, 0xa7, 0xc3, 0x42, 0x9e, 0xac, 0x20, 0xb0, 0x94, 0xf4, 0xbe, 0x84, 0xbd, 0x34, 0x57, 0xda,
	0x48, 0x11, 0x40, 0x9c, 0x6f, 0x0a, 0x20, 0x7f, 0x77, 0xe0, 0x8e, 0x02, 0x10, 0x01, 0xfa, 0xdf,
	0x16, 0x7c, 0x73, 0xf7, 0xfd, 0xa6, 0x7d, 0xdf, 0x17, 0x6f, 0x9a, 0xad, 0xd5, 0x9b, 0xc6, 0x3b,
	0x87, 0xfa, 0x30, 0x48, 0x98, 0x99, 0x34, 0x01, 0x19, 0x0a, 0x5d, 0xb5, 0x0b, 0x9a, 0x5a, 0xb1,
	0x55, 0x29, 0xb1, 0xf5, 0x1b, 0xd8, 0x97, 0xb6, 0x94, 0x4a, 0x9a, 0xb7, 0x5f, 0x67, 0x13, 0xa5,
	0x73, 0xf6, 0x61, 0x79, 0xa3, 0xda, 0xb7, 0x11, 0x4e, 0xb5, 0xbc, 0x06, 0xd4, 0x25, 0xda, 0x5d,
	0x12, 0xc6, 0x82, 0x29, 0xf1, 0xda, 0xaa, 0x12, 0x29, 0xca, 0x34, 0x61, 0xc3, 0x9f, 0xcd, 0xa4,
	0xc7, 0x55, 0x2c, 0x1e, 0xbd, 0x4f, 0x00, 0x5d, 0x84, 0x8c, 0xeb, 0x46, 0x30, 0x72, 0xeb, 0x04,
	0x71, 0x1f, 0xdc, 0x2e, 0x99, 0x11, 0x09, 0xee, 0xa6, 0x64, 0x46, 0x3f, 0xdb, 0x2f, 0x37, 0xc4,
	0x1a, 0xe2, 0x3d, 0x80, 0xd6, 0x8b, 0x48, 0x85, 0xb2, 0x86, 0xf4, 0x0b, 0xd8, 0xd5, 0x0b, 0x8f,
	0x42, 0x4d, 0xb1, 0x47, 0x9e, 0xcd, 0xe8, 0xf8, 0xf5, 0x63, 0x9a, 0x3c, 0x25, 0xd7, 0xda, 0xfd,
	0x3c, 0x4b, 0x38, 0x7c, 0x19, 0x4e, 0x93, 0x80, 0x93, 0xce, 0x8c, 0x04, 0x91, 0x74, 0xb8, 0x8a,
	0x2d, 0x9e, 0xf7, 0x15, 0xbc, 0x3f, 0x22, 0xdc, 0xb2, 0x9c, 0xf3, 0x20, 0x8c, 0x75, 0x21, 0x2b,
	0x61, 0x8c, 0x3e, 0x86, 0x6d, 0x25, 0xa0, 0xf7, 0xe1, 0xef, 0xd9, 0x75, 0xb0, 0x6d, 0x68, 0x51,
	0xef, 0xf7, 0xd0, 0x34, 0x41, 0xa6, 0x25, 0xd5, 0xb7, 0x96, 0xf3, 0x6e, 0xb7, 0x96, 0x58, 0x87,
	0x5e, 0x51, 0xc6, 0xe5, 0xd5, 0x5b, 0xc3, 0xf2, 0xd9, 0xfb, 0xd2, 0xac, 0x7e, 0x62, 0xc5, 0x14,
	0x12, 0x9f, 0x0b, 0x09, 0xe5, 0xb3, 0x7c, 0x46, 0x9f, 0xe8, 0xe1, 0xad, 0xbc, 0x43, 0xef, 0xa8,
	0x21, 0xbe, 0x30, 0xf7, 0x8b, 0xb0, 0x2d, 0xfa, 0x01, 0x7d, 0x06, 0x3b, 0x19, 0xc7, 0x8c, 0xb0,
	0x6b, 0x9b, 0xcc, 0x04, 0x70, 0x5e, 0xd8, 0x3b, 0x83, 0xaa, 0x86, 0xef, 0x24, 0x8d, 0x44, 0xfb,
	0x29, 0x9e, 0x45, 0xb1, 0xe6, 0x2a, 0x83, 0x53, 0xb9, 0x95, 0xa8, 0x28, 0x2d, 0x9e, 0xd7, 0x33,
	0x17, 0x24, 0x49, 0x98, 0x74, 0xe8, 0xa7, 0x50, 0x4b, 0x19, 0xe5, 0x30, 0x6e, 0x5e, 0xe3, 0x4c,
	0xd0, 0xfb, 0x8b, 0x63, 0xc6, 0x14, 0x7d, 0x6a, 0x1b, 0x28, 0x29, 0xab, 0x75, 0x60, 0xce, 0x0a,
	0xfa, 0x15, 0xd4, 0x73, 0xeb, 0x94, 0x49, 0xf0, 0x77, 0x4b, 0x12, 0xac, 0x27, 0xda, 0x12, 0xf7,
	0x7e, 0x09, 0xcd, 0xae, 0xe9, 0x7d, 0xd3, 0x71, 0x07, 0xb0, 0xe5, 0xc7, 0x71, 0xfa, 0x11, 0xa6,
	0x88, 0xb4, 0xaa, 0x95, 0xac, 0xaa, 0xde, 0x05, 0xa0, 0xdc, 0xec, 0xe4, 0x26, 0xd4, 0xfa, 0x08,
	0x71, 0x4a, 0x3e, 0x42, 0xca, 0xac, 0xfd, 0x11, 0x9a, 0xc5, 0x4f, 0x0f, 0x01, 0x8c, 0x43, 0x9a,
	0xf0, 0x89, 0x84, 0x1d, 0x09, 0x99, 0x9a, 0x14, 0x83, 0x37, 0x22, 0x89, 0x58, 0x85, 0x72, 0x57,
	0x5b, 0x9e, 0x25, 0x3f, 0x22, 0xe2, 0x50, 0x7c, 0x7b, 0x30, 0xfd, 0x51, 0x96, 0xd2, 0xde, 0x09,
	0xb8, 0x39, 0x6c, 0x39, 0x5b, 0x0a, 0x05, 0xe3, 0x3f, 0x82, 0x4d, 0x69, 0x52, 0xf7, 0x85, 0xbc,
	0x28, 0xff, 0xed, 0x28, 0xe7, 0x26, 0x3a, 0xf1, 0x83, 0xe8, 0x8a, 0x4a, 0x70, 0x18, 0x9a, 0xd1,
	0x1c, 0x0c, 0x85, 0xa2, 0xf0, 0x4e, 0xfa, 0xb2, 0x8b, 0xe5, 0xb3, 0xc0, 0x62, 0x7d, 0xbf, 0x6f,
	0xa8, 0xf5, 0x4d, 0x51, 0xf2, 0x6b, 0x30, 0xa1, 0xaf, 0x89, 0x5a, 0x16, 0xaa, 0x58, 0x53, 0xe2,
	0x06, 0xf1, 0xdf, 0x04, 0xe1, 0x2c, 0x78, 0x39, 0x23, 0x12, 0xec, 0xab, 0x38, 0x63, 0x88, 0x90,
	0x2e, 0x02, 0xc6, 0x47, 0x84, 0x44, 0xee, 0xb6, 0x3c, 0x25, 0xa5, 0xbd, 0xdf, 0xda, 0x1e, 0xca,
	0xce, 0xec, 0xc2, 0x6e, 0x9e, 0x67, 0xba, 0xb3, 0xe4, 0x83, 0x2f, 0x1f, 0x18, 0xb6, 0x95, 0xbc,
	0x47, 0xd0, 0x18, 0x2d, 0xa6, 0x53, 0x31, 0x93, 0x3a, 0x45, 0x47, 0x00, 0x97, 0xc1, 0xd7, 0xfe,
	0x94, 0x8c, 0xc8, 0x98, 0xe9, 0x4f, 0x97, 0x1c, 0xc7, 0xfb, 0x9f, 0x03, 0xa0, 0x55, 0x44, 0x15,
	0x0f, 0x60, 0x6b, 0xc4, 0x83, 0x84, 0x6b, 0x78, 0x54, 0x44, 0x59, 0x0f, 0x08, 0x50, 0xf2, 0xdf,
	0x71, 0x95, 0xf6, 0xe3, 0x58, 0xc4, 0x69, 0xed, 0xac, 0x32, 0xa9, 0x2b, 0x71, 0x16, 0x3b, 0x1d,
	0x17, 0x16, 0xdd, 0x73, 0xd8, 0xcb, 0x50, 0x52, 0xd9, 0xd9, 0x92, 0x76, 0xda, 0xb6, 0x9d, 0xd5,
	0x9e, 0xc7, 0x45, 0x45, 0x01, 0x5b, 0x59, 0x02, 0x0c, 0x6c, 0x65, 0x9c, 0x1b, 0x60, 0x2b, 0x13,
	0xc0, 0x79, 0xe1, 0xfb, 0x4f, 0x60, 0xbf, 0x64, 0x65, 0x47, 0x75, 0xa8, 0x3e, 0x7d, 0xd6, 0xf9,
	0xdc, 0x7f, 0xda, 0xef, 0x35, 0xbf, 0x83, 0x10, 0x34, 0xd4, 0xb3, 0xdf, 0xe9, 0xf4, 0x86, 0xcf,
	0x7b, 0xdd, 0xa6, 0x93, 0xf1, 0x70, 0xef, 0xbc, 0xd7, 0x11, 0xbc, 0xca, 0xe9, 0x7f, 0x6b, 0x66,
	0x40, 0x2f, 0xe5, 0xa9, 0x68, 0x24, 0x00, 0xf5, 0x2a, 0x8c, 0x88, 0xfa, 0xc8, 0x5a, 0x0b, 0x9d,
	0x5b, 0x47, 0x37, 0x2c, 0xaa, 0xe6, 0x7a, 0x39, 0x37, 0x25, 0x31, 0x6b, 0x72, 0x29, 0xa2, 0x19,
	0x6b, 0x87, 0xe5, 0x2f, 0xb5, 0xad, 0x4b, 0x80, 0x6c, 0xd7, 0x42, 0xdf, 0x2f, 0x54, 0xa3, 0xb8,
	0x85, 0xdd, 0xea, 0xda, 0x13, 0xa8, 0xa5, 0xdf, 0x7e, 0xe8, 0xa8, 0xcc, 0x5a, 0x56, 0xd9, 0x5b,
	0x8d, 0x0d, 0x61, 0x2f, 0xb7, 0x30, 0x3d, 0x0e, 0xc5, 0x94, 0xda, 0x2a, 0xf9, 0xdd, 0xac, 0xf5,
	0x41, 0xc9, 0xbb, 0xc2, 0xae, 0xf5, 0x15, 0x1c, 0xe4, 0xb0, 0x89, 0x3d, 0xa6, 0x89, 0xaa, 0x4b,
	0xbb, 0xf8, 0x37, 0x45, 0x71, 0x37, 0x6a, 0x7d, 0x58, 0xb6, 0x14, 0xaf, 0x2c, 0xd2, 0x2f, 0xad,
	0xbd, 0x8a, 0x29, 0xf0, 0x43, 0x1f, 0xdd, 0x68, 0xdd, 0x42, 0xc7, 0x35, 0xcf, 0xf8, 0x03, 0xec,
	0x97, 0x6c, 0x55, 0xe8, 0xf8, 0xc6, 0x41, 0x2a, 0x2c, 0x5e, 0xc5, 0xb4, 0xaf, 0x6c, 0x2f, 0x0f,
	0xa1, 0xd6, 0x27, 0x5c, 0xdf, 0x9f, 0xf5, 0x13, 0xfd, 0x97, 0xe2, 0x17, 0x34, 0x9c, 0xb4, 0x0a,
	0x7f, 0xe7, 0x68, 0x99, 0x1e, 0xbc, 0xdf, 0x27, 0x3c, 0xb7, 0x0b, 0x3c, 0x4e, 0xe8, 0xbc, 0x13,
	0x8c, 0x5f, 0x91, 0x82, 0xfa, 0xe1, 0x4d, 0x9b, 0x84, 0x9c, 0x62, 0x1f, 0xee, 0xa4, 0x30, 0xf2,
	0x2c, 0x52, 0xff, 0x35, 0xa1, 0x5b, 0x70, 0xa6, 0x65, 0x1d, 0x80, 0x7a, 0x56, 0x6e, 0x52, 0x23,
	0xb7, 0x82, 0x4c, 0xc1, 0xcc, 0x29, 0x1c, 0xe4, 0x61, 0x7a, 0xf4, 0x6a, 0xc1, 0x27, 0xf4, 0x3a,
	0x2a, 0x44, 0x63, 0xeb, 0xfc, 0x04, 0xf6, 0x2d, 0x1d, 0x81, 0xc3, 0x8b, 0xf8, 0xad, 0x2a, 0x3d,
	0xb8, 0xdb, 0x27, 0xfc, 0x49, 0x44, 0xaf, 0x23, 0xeb, 0x56, 0x28, 0x28, 0xbd, 0xe5, 0x4a, 0x91,
	0x79, 0x53, 0xdf, 0xad, 0x39, 0x4c, 0x43, 0x87, 0xa5, 0xd0, 0x77, 0x03, 0x20, 0xd8, 0x58, 0x7a,
	0xf6, 0x23, 0xf8, 0x61, 0x44, 0x78, 0xfe, 0x3f, 0x66, 0xfd, 0xaf, 0x73, 0x10, 0x87, 0xcc, 0xd2,
	0x7c, 0xb9, 0x2d, 0xff, 0x66, 0xfe, 0xf8, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0x02, 0x21,
	0xe0, 0xe9, 0x16, 0x00, 0x00,
}
